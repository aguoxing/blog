2020-04-19 21:19:24.643 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251752142763507713
2020-04-19 21:19:24.647 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:19:24.647 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:19:24.648 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:19:24.648 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:19:24.650 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:19:24.651 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-19 21:19:24.653 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:19:24.654 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:19:24.655 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:19:24.657 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:19:24.658 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:19:24.659 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:19:24.660 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:19:24.661 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：18
2020-04-19 21:19:24.663 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}
2020-04-19 21:19:24.664 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:19:24.666 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251752142763507713(String), [1251752142763507713](String), 1(Integer), GET(String), 18(Long), {"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:19:24.670 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:22:18.857 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 21:22:18.859 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:22:18.860 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:22:18.861 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 21:22:18.861 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:22:18.862 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-19 21:22:18.862 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 21:22:18.869 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:22:18.870 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:22:18.875 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:22:19.094 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 21:22:19.095 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:22:19.096 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:22:19.096 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.listTag
2020-04-19 21:22:19.096 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:22:19.098 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag 
2020-04-19 21:22:19.100 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 21:22:19.102 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -<==      Total: 7
2020-04-19 21:22:19.103 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 21:22:19.103 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},{"id":4,"isDeleted":false,"isEnable":true,"name":"javascript"},{"id":5,"isDeleted":false,"isEnable":true,"name":"Python"},{"id":6,"isDeleted":false,"isEnable":true,"name":"vue"},{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"}],"msg":"操作成功"}
2020-04-19 21:22:19.105 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:22:19.107 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [](String), 1(Integer), GET(String), 9(Long), {"code":20000,"data":[{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},{"id":4,"isDeleted":false,"isEnable":true,"name":"javascript"},{"id":5,"isDeleted":false,"isEnable":true,"name":"Python"},{"id":6,"isDeleted":false,"isEnable":true,"name":"vue"},{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:22:19.110 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:22:19.401 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 21:22:19.401 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:22:19.401 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:22:19.401 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:22:19.402 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:22:19.402 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:22:19.402 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 21:22:19.402 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:22:19.402 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:22:19.403 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:22:19.405 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 21:22:19.406 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 21:22:19.407 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 21:22:19.409 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 21:22:19.410 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 21:22:19.410 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:22:19.411 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 21:22:19.413 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:22:19.413 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 21:22:19.414 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 9(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:22:19.414 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:22:19.417 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:22:19.417 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:19.418 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:22:19.427 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.428 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:19.429 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:22:19.432 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.433 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:19.434 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:22:19.435 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.436 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:19.437 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:22:19.438 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.439 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:19.440 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:22:19.442 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.444 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:19.445 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:22:19.446 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.448 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:19.449 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:22:19.451 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.453 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:19.454 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:22:19.455 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.456 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:19.457 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:22:19.458 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.461 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:19.462 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:22:19.463 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.466 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:19.467 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:22:19.468 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.469 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:19.470 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:22:19.472 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.474 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:19.475 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:22:19.477 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.478 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:19.478 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:22:19.479 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:22:19.480 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:19.481 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:22:19.482 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.483 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:19.483 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:22:19.484 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.485 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:19.486 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:22:19.487 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.488 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:19.489 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:22:19.494 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.495 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:19.496 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:22:19.497 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:19.498 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:19.499 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:22:19.500 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:22:19.501 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:22:19.501 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：100
2020-04-19 21:22:19.502 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 21:22:19.505 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:22:19.507 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=create_time)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d713689.getLoginInfo(<generated>)
(String), POST(String), 100(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:22:19.512 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:22:24.331 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251752142763507713
2020-04-19 21:22:24.332 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:22:24.332 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:22:24.332 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:22:24.333 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:22:24.333 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:22:24.334 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-19 21:22:24.338 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:24.339 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:22:24.340 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:24.342 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:24.343 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:22:24.345 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:24.345 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:22:24.346 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：15
2020-04-19 21:22:24.346 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}
2020-04-19 21:22:24.347 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:22:24.348 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251752142763507713(String), [1251752142763507713](String), 1(Integer), GET(String), 15(Long), {"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:22:24.351 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:22:51.741 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251770557519675394
2020-04-19 21:22:51.742 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:22:51.742 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:22:51.743 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:22:51.743 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:22:51.744 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:22:51.744 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251770557519675394(String)
2020-04-19 21:22:51.746 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:22:51.746 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:22:51.748 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:51.749 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:22:51.750 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:22:51.752 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:22:51.753 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:22:51.753 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-19 21:22:51.754 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},"msg":"操作成功"}
2020-04-19 21:22:51.755 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:22:51.756 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251770557519675394(String), [1251770557519675394](String), 1(Integer), GET(String), 12(Long), {"code":20000,"data":{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:22:51.758 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:23:04.024 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251752142763507713
2020-04-19 21:23:04.025 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:23:04.025 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:23:04.025 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:23:04.026 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:23:04.026 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:23:04.028 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-19 21:23:04.030 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:23:04.031 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:23:04.032 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:23:04.034 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:23:04.035 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:23:04.037 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:23:04.038 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:23:04.038 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-19 21:23:04.038 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}
2020-04-19 21:23:04.039 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:23:04.040 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251752142763507713(String), [1251752142763507713](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:23:04.043 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:23:52.282 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 21:23:53.000 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 8892 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 21:23:53.001 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 21:23:53.002 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 21:23:53.198 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 21:23:54.757 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$41f00020] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:54.911 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:54.925 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$210ec77c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:54.932 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:54.945 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:54.961 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$4879b543] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:54.972 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$96966391] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:55.014 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:55.085 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:55.091 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:55.299 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 21:23:55.867 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:55.874 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:55.883 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:55.888 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:55.903 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:55.941 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:56.236 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:56.258 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 21:23:56.565 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 21:23:56.573 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 21:23:56.574 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 21:23:56.575 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 21:23:56.680 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 21:23:56.680 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3618 ms
2020-04-19 21:23:58.170 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 21:23:58.569 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 21:23:58.585 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 21:23:58.614 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 21:23:58.822 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 21:23:58.831 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 21:23:58.837 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 21:23:58.850 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 21:23:58.867 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 21:23:58.902 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 21:23:58.923 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 21:23:58.925 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.585 seconds (JVM running for 7.888)
2020-04-19 21:24:16.297 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 21:24:16.298 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 21:24:16.312 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 14 ms
2020-04-19 21:24:16.368 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 21:24:16.368 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:24:16.369 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:24:16.370 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 21:24:16.371 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:24:16.456 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 21:24:16.612 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:24:16.625 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 0(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$61b269cc.getLoginInfo(<generated>)
(String), GET(String), 127.0.0.1(String)
2020-04-19 21:24:16.630 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:24:16.644 ERROR [http-nio-8088-exec-1]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$61b269cc.getLoginInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 21:24:21.576 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/user/login
2020-04-19 21:24:21.577 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:24:21.577 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:24:21.578 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.sysLogin
2020-04-19 21:24:21.578 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:24:21.580 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==>  Preparing: select username,password from sys_user where username=? 
2020-04-19 21:24:21.581 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==> Parameters: admin(String)
2020-04-19 21:24:21.591 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -<==      Total: 1
2020-04-19 21:24:21.595 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：19
2020-04-19 21:24:21.659 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"token":"1EB2A01E7380DBF71F3F139463973B85"},"msg":"操作成功"}
2020-04-19 21:24:21.660 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:24:21.661 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/user/login(String), [SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null, isDeleted=null)](String), 1(Integer), POST(String), 19(Long), {"code":20000,"data":{"token":"1EB2A01E7380DBF71F3F139463973B85"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:24:21.665 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:24:21.695 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 21:24:21.696 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:24:21.696 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:24:21.696 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 21:24:21.696 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:24:21.697 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 21:24:21.701 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 21:24:21.703 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:24:21.705 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:24:21.708 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:24:22.234 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:24:22.234 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:24:22.235 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:24:22.236 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:24:22.237 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 21:24:22.237 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 21:24:22.237 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:24:22.238 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:24:22.238 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:24:22.239 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.listTag
2020-04-19 21:24:22.237 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:24:22.239 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:24:22.240 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:24:22.240 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 21:24:22.240 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:24:22.270 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 21:24:22.271 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 21:24:22.275 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 21:24:22.275 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：38
2020-04-19 21:24:22.276 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag 
2020-04-19 21:24:22.277 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 21:24:22.279 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 21:24:22.280 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -<==      Total: 7
2020-04-19 21:24:22.281 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：44
2020-04-19 21:24:22.281 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:24:22.283 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 38(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:24:22.287 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:24:22.287 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},{"id":4,"isDeleted":false,"isEnable":true,"name":"javascript"},{"id":5,"isDeleted":false,"isEnable":true,"name":"Python"},{"id":6,"isDeleted":false,"isEnable":true,"name":"vue"},{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"}],"msg":"操作成功"}
2020-04-19 21:24:22.293 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:24:22.296 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [](String), 1(Integer), GET(String), 44(Long), {"code":20000,"data":[{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},{"id":4,"isDeleted":false,"isEnable":true,"name":"javascript"},{"id":5,"isDeleted":false,"isEnable":true,"name":"Python"},{"id":6,"isDeleted":false,"isEnable":true,"name":"vue"},{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:24:22.300 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:24:22.316 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 21:24:22.317 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:24:22.323 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 21:24:22.324 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:24:22.328 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:22.328 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:24:22.330 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.332 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:22.333 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:24:22.335 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.339 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:22.340 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:24:22.342 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.344 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:22.345 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:24:22.346 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.348 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:22.348 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:24:22.349 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.351 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:22.352 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:24:22.354 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.356 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:22.357 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:24:22.358 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.360 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:22.361 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:24:22.362 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.363 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:22.364 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:24:22.365 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.367 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:22.368 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:24:22.369 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.372 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:22.373 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:24:22.375 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.377 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:22.378 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:24:22.380 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.381 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:22.382 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:24:22.383 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.384 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:22.385 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:24:22.387 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:24:22.389 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:22.390 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:24:22.391 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.392 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:22.393 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:24:22.394 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.396 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:22.397 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:24:22.398 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.399 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:22.400 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:24:22.401 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.403 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:22.404 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:24:22.405 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:22.407 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:22.407 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:24:22.408 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:24:22.409 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:24:22.410 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：176
2020-04-19 21:24:22.425 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 21:24:22.618 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:24:22.621 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=create_time)](String), 1(Integer), POST(String), 176(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:24:22.626 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:24:25.364 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251752142763507713
2020-04-19 21:24:25.365 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:24:25.365 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:24:25.365 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:24:25.365 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:24:25.366 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:24:25.367 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-19 21:24:25.369 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:25.370 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:24:25.373 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:25.374 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:25.375 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:24:25.376 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:25.378 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:24:25.378 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-19 21:24:25.379 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}
2020-04-19 21:24:25.380 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:24:25.381 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251752142763507713(String), [1251752142763507713](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:24:25.385 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:24:40.578 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251776651612700674
2020-04-19 21:24:40.579 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:24:40.579 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:24:40.579 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:24:40.579 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:24:40.581 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:24:40.582 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251776651612700674(String)
2020-04-19 21:24:40.584 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:24:40.585 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:24:40.587 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:40.588 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:24:40.589 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:24:40.590 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:24:40.591 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:24:40.592 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-19 21:24:40.592 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},"msg":"操作成功"}
2020-04-19 21:24:40.594 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:24:40.595 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251776651612700674(String), [1251776651612700674](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:24:40.598 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:25:17.194 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251780392676016129
2020-04-19 21:25:17.195 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:25:17.195 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:25:17.195 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:25:17.195 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:25:17.196 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:25:17.197 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 21:25:17.198 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:25:17.199 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:25:17.200 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:25:17.202 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:25:17.203 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:25:17.204 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:25:17.206 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:25:17.207 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：13
2020-04-19 21:25:17.207 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},"msg":"操作成功"}
2020-04-19 21:25:17.209 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:25:17.211 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251780392676016129(String), [1251780392676016129](String), 1(Integer), GET(String), 13(Long), {"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:25:17.216 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:26:38.700 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251752142763507713
2020-04-19 21:26:38.700 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:26:38.701 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:26:38.701 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:26:38.701 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:26:38.705 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:26:38.706 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-19 21:26:38.708 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:26:38.708 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:26:38.709 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:26:38.711 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:26:38.712 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:26:38.714 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:26:38.715 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:26:38.716 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：16
2020-04-19 21:26:38.716 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}
2020-04-19 21:26:38.717 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:26:38.718 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251752142763507713(String), [1251752142763507713](String), 1(Integer), GET(String), 16(Long), {"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:26:38.722 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:27:33.756 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251752142763507713
2020-04-19 21:27:33.756 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:27:33.757 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:27:33.757 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:27:33.757 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:27:33.758 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:27:33.759 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-19 21:27:33.761 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:27:33.762 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:27:33.763 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:27:33.765 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:27:33.765 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:27:33.766 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:27:33.767 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:27:33.768 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-19 21:27:33.768 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}
2020-04-19 21:27:33.770 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:27:33.771 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251752142763507713(String), [1251752142763507713](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$61b269cc.getLoginInfo(<generated>)
(String), GET(String), 12(Long), {"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>\n<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>\n<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>\n<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>\n<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>\n<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>\n<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>\n<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>\n<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>\n<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>\n<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>\n<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>\n<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>\n<p>&nbsp;</p>\n<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>\n<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>\n<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>\n<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>\n<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>\n<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>\n<p>所以我又不能回广州了。</p>\n<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>\n<p>就这样，回头草没吃成。</p>\n<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>\n<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>\n<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 13:59:01","views":12},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:27:33.776 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:28:07.166 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/update
2020-04-19 21:28:07.167 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-19 21:28:07.167 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:28:07.167 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.update
2020-04-19 21:28:07.168 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:28:07.179 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -==>  Preparing: UPDATE article SET author=?, title=?, content=?, summary=?, views=?, comment_count=?, like_count=?, is_top=?, is_recommend=?, create_time=?, update_time=?, is_enable=? WHERE id=? 
2020-04-19 21:28:07.181 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -==> Parameters: _江南一点雨(String), 离职半年了，老东家又发 offer，回不回？(String), <p>```</p>
<p>asdajshdji</p>
<p>```</p>(String), 有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？(String), 12(Integer), 0(Integer), 123(Integer), false(Boolean), false(Boolean), 2020-04-19T13:59:01(LocalDateTime), 2020-04-19T21:28:07.170(LocalDateTime), false(Boolean), 1251752142763507713(String)
2020-04-19 21:28:07.185 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -<==    Updates: 1
2020-04-19 21:28:07.186 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：20
2020-04-19 21:28:07.186 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"更新成功"}
2020-04-19 21:28:07.187 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:28:07.188 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/update(String), [ArticleDTO(category=Category(id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null), tagList=[Tag(id=2, name=java, isEnable=null, isDeleted=null)])](String), 1(Integer), PUT(String), 20(Long), {"code":20000,"msg":"更新成功"}(String), 127.0.0.1(String)
2020-04-19 21:28:07.191 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:28:07.416 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:28:07.417 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:28:07.417 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:28:07.418 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:28:07.418 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:28:07.421 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 21:28:07.422 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:28:07.423 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 LIMIT ?,? 
2020-04-19 21:28:07.424 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:28:07.427 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:07.428 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:28:07.429 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.431 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:07.431 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:28:07.432 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:28:07.436 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:07.437 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:28:07.442 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.443 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:07.444 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:28:07.445 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.447 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:07.447 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:28:07.449 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.451 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:07.452 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:28:07.453 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.455 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:07.456 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:28:07.457 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.459 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:07.460 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:28:07.461 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:28:07.464 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:07.465 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:28:07.467 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.468 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:07.469 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:28:07.471 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.472 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:07.473 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:28:07.474 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.475 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:07.476 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:28:07.477 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.478 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:07.479 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:28:07.480 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.482 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:07.483 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:28:07.484 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.486 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:07.487 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:28:07.488 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.490 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:07.490 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:28:07.491 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.493 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:07.493 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:28:07.494 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.495 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:07.496 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:28:07.497 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.498 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:07.499 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:28:07.501 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.502 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:07.503 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:28:07.504 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:07.505 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:28:07.505 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：89
2020-04-19 21:28:07.506 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>```</p>\n<p>asdajshdji</p>\n<p>```</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:28:07","views":12},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 21:28:07.508 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:28:07.512 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=11, pageSize=10, totalPage=2, currPage=1, list=[{id=4, author=3, title=这是置顶的文章哇, content=save, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=1128, commentCount=12, likeCount=12, isTop=true, isRecommend=false, createTime=[2019, 6, 14, 12, 21, 50], updateTime=[2020, 4, 19, 20, 1, 15], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251780392676016129, author=xing, title=mysql练习题, content=<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询"李"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过"张三"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过"张三"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索"01"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>, summary=MySQL练习题, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 51, 17], updateTime=[2020, 4, 19, 20, 1, 1], isEnable=true, isDeleted=null, version=null, category={id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=asdf, title=asdasd, content=<p>### asdkfhjajlkhdfkashdfki</p>, summary=asdasd, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 36, 25], updateTime=[2020, 4, 19, 20, 20, 22], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251770557519675394, author=test, title=test, content=<blockquote>
<p>yhjktykj</p>
</blockquote>
<p><span style="background-color: #00ff00;">fgdfgfdgd</span></p>
<p>&nbsp;</p>
<pre class="language-java"><code>public class Hello{
public sstatic void main(String args[]){
Sysout.print.out("hello");
}</code></pre>, summary=test, cover=null, views=3, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 12, 12], updateTime=[2020, 4, 19, 15, 14, 35], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251752142763507713, author=_江南一点雨, title=离职半年了，老东家又发 offer，回不回？, content=<p>有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？</p>
<p>俗话说好马不吃回头草，但是这个小伙伴既然感到纠结了，我觉得至少说明了两个问题：1.曾经的公司还不错；2.现在的日子也不是很如意。否则应该就不会纠结了。</p>
<p>老实说，松哥之前也有过类似的经历，今天就来和小伙伴们聊聊回头草到底吃不吃。</p>
<p>首先一个基本观点，就是离职了也没必要和老东家弄的苦大仇深不共戴天，其实分手了还是可以做朋友的，从做人做事两方面来说，都应该是这样：</p>
<p>从做人方面来说，做人要厚道。小伙伴们出去面试，大家都知道面试的时候比较忌讳说上家公司的坏话，就是这个原因。另一方面，不停的说上家公司的坏话，也会让人间接的感觉到你本身有很多问题。</p>
<p><br />从做事方面来讲，出于种种原因考虑，大部分时候我们跳槽可能都会选择相同的行业，比如医疗、金融、erp 等等，有的行业圈子大，有的行业圈子小，跳来跳去，你极有可能遇到自己的老同事老领导。所以和前同事和老东家搞好关系，在行业里留一个好名声，对自己未来的发展也很有好处。<br />基于这两点，我们都应该尽量处理好离职的事情，不管以后还见不见，多个朋友总比多个敌人好。</p>
<p>不过，也不排除会遇到一些不良公司，这种时候，作为个人，我觉得还是要做好自己，总不能因为遇到了一个不良公司我们就变成了一个不良员工。</p>
<p>我在 2017 年的时候，从一家效力了两年多的公司离职，当时因为公司业务调整，我被从广州调岗到深圳分公司，从广州把行李搬到了深圳，在深圳人生地不熟，干的挺郁闷的，于是没过几个月就离职了。</p>
<p>离职的时候就要办离职手续，这里涉及到一个小问题。</p>
<p>在我任职期间，公司有过一次大规模的薪资体系调整，在调整之前，公司对加班几乎是没有限制的，晚上加完班之后，第二天找自己的主管领导签字，加班满 8 个小时可以调休一天，加班只能调休无法折算成薪水，而我当时刚毕业，一个人呆在广州，晚上回家也没啥事情，干脆就呆在公司学习，所以没过多久我就成了公司加班时长最多的人，在薪资体系调整之前，我的加班大概一共可以折算成 30 天左右的假期。</p>
<p>薪资体系调整之后，公司开始严格控制加班，加班时长即可以调休也可以在离职的时候折算成薪水了。所以我 30 多天的加班如果不调休的话，都是有机会折算成薪水的。</p>
<p>后来等到我离职的时候，调休的大概还剩 22 天左右的加班时长，作为一个将要离职的人，我对于将 22 天的加班时长转为薪水没有抱有太大的希望，只是嘱咐了一下跟我办理离职手续的 hr，如果能帮我争取一下就尽量帮我争取一下。</p>
<p>一个月后，我收到了最后一个月的薪水，连同 22 天的加班和 5 天的年假，全部折算成薪水发给我了，这波操作顿时就把松哥收买了。</p>
<p>&nbsp;</p>
<p>正是因为这件事，所以在后来老东家再次找到我希望我回去的时候，我犹豫了。</p>
<p>在我离职了大概五个月的时候，新公司也干了快五个月了，老东家广州那边的领导联系到我，希望我能回去。</p>
<p>我当时在新公司收入也不低，但是新公司的业务不是很稳定，加上我一直比较喜欢广州的生活气息，所以也有一点点想回广州，当然仅仅这些东西是不足以让我做出回广州的决定的。</p>
<p>老东家广州分公司的负责人和我打过多次电话，有一次打了两个多小时电话，聊了很多东西，他讲了自己是如何从一个普通程序员走到现在的分公司负责人的，我这次入职后对我未来的规划、包括入职后的各项福利待遇、工龄接着之前的不中断等等，两个大男人就这样聊到了凌晨 1 点多，然后我就很不争气的被感动的一塌糊涂。</p>
<p>第二天起来我就做了一个重要的决定：回广州！我把我在深圳的电磁炉等一众做饭的家伙什儿送给了在深圳的大学同学，其他的衣服、书等行李打包用物流寄回了广州公司，让以前的同事先帮我收着。我自己则打算在国庆节之后回广州。接着广州那边的 hr 就给我发了 offer，我就先收着了。</p>
<p>结果，国庆节刚过，女票就在校招中拿到了深圳某大厂的 offer。女票是我大学同学，毕业后又在西安读了研究生，校招的时候本来可以有更好的选择，但是因为我在深圳，所以她当时北京上海杭州考虑的比较少，主要是广州深圳，她在 10 月初拿到了 offer，参加过秋招的小伙伴都知道，秋招越往后大厂越少，而且她在 10 月底还要去昆士兰大学访学，时间也很紧张。</p>
<p>所以我又不能回广州了。</p>
<p>给广州那边打了电话，满怀愧疚说明了情况，对方也表示理解，毕竟和女朋友相比，工作只能排第二位。</p>
<p>就这样，回头草没吃成。</p>
<p>我这个人比较随和，离职只是因为有更好的选择，跟公司没有仇怨，所以再回去心里也能接受。</p>
<p>在职的时候和同事们保持一个好点的关系，工作认真负责，在同事中留一个好点的口碑，离职后该说的说，不该说的不说，再见我们还是好同事，当然如果公司本身比较坑爹，那早点走人吧！但是也别和人结怨。</p>
<p>小伙伴你呢 ？有没有遇到这样的事情 ？你有回去吗 ？<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「_江南一点雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/u012702547/article/details/104961130</p>, summary=有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？, cover=null, views=12, commentCount=0, likeCount=123, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 59, 1], updateTime=[2020, 4, 19, 13, 59, 1], isEnable=false, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 52, 57], updateTime=[2020, 4, 19, 20, 15, 29], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251726075243896833, author=sdfsdfsdfsdf, title=sdfsdf, content=<p>zxcxzc</p>, summary=sdfsdfs, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 15, 26], updateTime=[2020, 4, 19, 20, 17, 43], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725884101074946, author=sdf, title=sdf, content=<p>sdfsdfsdf</p>, summary=sdf, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 14, 41], updateTime=[2020, 4, 19, 12, 14, 41], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的f, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 11, 56], updateTime=[2020, 4, 19, 12, 11, 56], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=126, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=[2020, 3, 23, 15, 55, 15], updateTime=[2020, 4, 14, 11, 58, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 89(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>```</p>\n<p>asdajshdji</p>\n<p>```</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:28:07","views":12},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:28:07.519 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:28:10.434 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251750614375907330
2020-04-19 21:28:10.435 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:28:10.435 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:28:10.436 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:28:10.436 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:28:10.437 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:28:10.438 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251750614375907330(String)
2020-04-19 21:28:10.439 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:28:10.440 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:28:10.441 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:10.442 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:28:10.442 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:28:10.443 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:28:10.444 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:28:10.445 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：11
2020-04-19 21:28:10.445 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},"msg":"操作成功"}
2020-04-19 21:28:10.446 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:28:10.446 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251750614375907330(String), [1251750614375907330](String), 1(Integer), GET(String), 11(Long), {"code":20000,"data":{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:28:10.451 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:29:16.001 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 21:29:16.001 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:29:16.002 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:29:16.002 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 21:29:16.003 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:29:16.004 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-19 21:29:16.004 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 21:29:16.006 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:29:16.007 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:29:16.016 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:29:16.223 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:29:16.224 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:29:16.224 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:29:16.225 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:29:16.226 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:29:16.228 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 21:29:16.230 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:29:16.231 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 21:29:16.232 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:29:16.234 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:16.235 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:29:16.237 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.238 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:16.238 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:29:16.240 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.241 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:16.242 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:29:16.243 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.244 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:16.246 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:29:16.247 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.249 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:16.250 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:29:16.252 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.254 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:16.256 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:29:16.258 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.261 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:16.263 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:29:16.266 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.269 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:16.270 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:29:16.272 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.274 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:16.275 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:29:16.277 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.279 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:16.280 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:29:16.282 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.285 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:16.286 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:29:16.287 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.289 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:16.290 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:29:16.291 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.292 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:16.293 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:29:16.296 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.297 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:16.298 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:29:16.299 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:29:16.301 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:16.302 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:29:16.303 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.304 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:16.305 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:29:16.307 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.310 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:16.312 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:29:16.314 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.316 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:16.318 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:29:16.320 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.323 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:16.324 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:29:16.325 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:16.328 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:16.329 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:29:16.331 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:29:16.333 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:29:16.349 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：126
2020-04-19 21:29:16.350 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>```</p>\n<p>asdajshdji</p>\n<p>```</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:28:07","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 21:29:16.369 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:29:16.371 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=create_time)](String), 1(Integer), POST(String), 126(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>```</p>\n<p>asdajshdji</p>\n<p>```</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:28:07","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:29:16.376 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:29:16.530 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 21:29:16.530 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:29:16.530 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:29:16.531 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.listTag
2020-04-19 21:29:16.531 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 21:29:16.531 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:29:16.531 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:29:16.532 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag 
2020-04-19 21:29:16.532 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 21:29:16.534 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -<==      Total: 7
2020-04-19 21:29:16.531 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:29:16.535 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-19 21:29:16.536 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},{"id":4,"isDeleted":false,"isEnable":true,"name":"javascript"},{"id":5,"isDeleted":false,"isEnable":true,"name":"Python"},{"id":6,"isDeleted":false,"isEnable":true,"name":"vue"},{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"}],"msg":"操作成功"}
2020-04-19 21:29:16.538 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:29:16.539 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":[{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},{"id":4,"isDeleted":false,"isEnable":true,"name":"javascript"},{"id":5,"isDeleted":false,"isEnable":true,"name":"Python"},{"id":6,"isDeleted":false,"isEnable":true,"name":"vue"},{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:29:16.536 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 21:29:16.540 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:29:16.541 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:29:16.543 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 21:29:16.545 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 21:29:16.547 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 21:29:16.548 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：17
2020-04-19 21:29:16.548 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 21:29:16.550 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:29:16.551 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 17(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:29:16.553 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:29:19.734 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251752142763507713
2020-04-19 21:29:19.734 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:29:19.734 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:29:19.735 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:29:19.735 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:29:19.736 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:29:19.736 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-19 21:29:19.737 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:19.738 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:29:19.739 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:19.740 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:19.740 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:29:19.741 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:19.741 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:29:19.742 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-19 21:29:19.742 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>```</p>\n<p>asdajshdji</p>\n<p>```</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:28:07","views":12},"msg":"操作成功"}
2020-04-19 21:29:19.743 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:29:19.744 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251752142763507713(String), [1251752142763507713](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>```</p>\n<p>asdajshdji</p>\n<p>```</p>","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:28:07","views":12},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:29:19.748 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:29:40.904 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/update
2020-04-19 21:29:40.904 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-19 21:29:40.905 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:29:40.905 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.update
2020-04-19 21:29:40.905 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:29:40.906 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -==>  Preparing: UPDATE article SET author=?, title=?, content=?, summary=?, views=?, comment_count=?, like_count=?, is_top=?, is_recommend=?, create_time=?, update_time=?, is_enable=? WHERE id=? 
2020-04-19 21:29:40.907 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -==> Parameters: _江南一点雨(String), 离职半年了，老东家又发 offer，回不回？(String), ```
代码块
```
asdasd(String), 有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？(String), 12(Integer), 0(Integer), 123(Integer), false(Boolean), false(Boolean), 2020-04-19T13:59:01(LocalDateTime), 2020-04-19T21:29:40.906(LocalDateTime), false(Boolean), 1251752142763507713(String)
2020-04-19 21:29:40.912 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -<==    Updates: 1
2020-04-19 21:29:40.913 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 21:29:40.913 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"更新成功"}
2020-04-19 21:29:40.914 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:29:40.914 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/update(String), [ArticleDTO(category=Category(id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null), tagList=[Tag(id=2, name=java, isEnable=null, isDeleted=null)])](String), 1(Integer), PUT(String), 9(Long), {"code":20000,"msg":"更新成功"}(String), 127.0.0.1(String)
2020-04-19 21:29:40.917 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:29:41.158 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:29:41.159 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:29:41.159 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:29:41.159 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:29:41.160 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:29:41.163 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 21:29:41.163 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:29:41.164 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 LIMIT ?,? 
2020-04-19 21:29:41.165 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:29:41.167 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:41.168 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:29:41.169 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.171 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:41.173 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:29:41.174 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:29:41.175 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:41.176 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:29:41.178 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.179 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:41.180 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:29:41.181 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.182 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:41.182 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:29:41.183 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.184 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:41.185 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:29:41.186 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.188 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:41.188 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:29:41.189 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.190 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:41.191 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:29:41.192 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:29:41.193 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:41.194 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:29:41.195 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.197 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:41.197 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:29:41.198 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.199 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:41.200 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:29:41.201 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.202 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:41.202 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:29:41.203 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.205 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:41.206 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:29:41.207 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.208 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:41.209 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:29:41.210 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.212 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:41.212 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:29:41.213 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.214 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:41.215 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:29:41.216 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.217 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:41.218 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:29:41.219 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.220 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:41.220 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:29:41.221 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.222 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:41.223 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:29:41.223 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.225 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:41.225 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:29:41.226 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:41.227 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:29:41.227 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：69
2020-04-19 21:29:41.228 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 21:29:41.230 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:29:41.232 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=11, pageSize=10, totalPage=2, currPage=1, list=[{id=4, author=3, title=这是置顶的文章哇, content=save, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=1128, commentCount=12, likeCount=12, isTop=true, isRecommend=false, createTime=[2019, 6, 14, 12, 21, 50], updateTime=[2020, 4, 19, 20, 1, 15], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251780392676016129, author=xing, title=mysql练习题, content=<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询"李"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过"张三"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过"张三"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索"01"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>, summary=MySQL练习题, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 51, 17], updateTime=[2020, 4, 19, 20, 1, 1], isEnable=true, isDeleted=null, version=null, category={id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=asdf, title=asdasd, content=<p>### asdkfhjajlkhdfkashdfki</p>, summary=asdasd, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 36, 25], updateTime=[2020, 4, 19, 20, 20, 22], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251770557519675394, author=test, title=test, content=<blockquote>
<p>yhjktykj</p>
</blockquote>
<p><span style="background-color: #00ff00;">fgdfgfdgd</span></p>
<p>&nbsp;</p>
<pre class="language-java"><code>public class Hello{
public sstatic void main(String args[]){
Sysout.print.out("hello");
}</code></pre>, summary=test, cover=null, views=3, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 12, 12], updateTime=[2020, 4, 19, 15, 14, 35], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251752142763507713, author=_江南一点雨, title=离职半年了，老东家又发 offer，回不回？, content=<p>```</p>
<p>asdajshdji</p>
<p>```</p>, summary=有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？, cover=null, views=12, commentCount=0, likeCount=123, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 59, 1], updateTime=[2020, 4, 19, 21, 28, 7], isEnable=false, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 52, 57], updateTime=[2020, 4, 19, 20, 15, 29], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251726075243896833, author=sdfsdfsdfsdf, title=sdfsdf, content=<p>zxcxzc</p>, summary=sdfsdfs, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 15, 26], updateTime=[2020, 4, 19, 20, 17, 43], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725884101074946, author=sdf, title=sdf, content=<p>sdfsdfsdf</p>, summary=sdf, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 14, 41], updateTime=[2020, 4, 19, 12, 14, 41], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的f, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 11, 56], updateTime=[2020, 4, 19, 12, 11, 56], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=126, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=[2020, 3, 23, 15, 55, 15], updateTime=[2020, 4, 14, 11, 58, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}], params={}, sortColumn=null)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$61b269cc.getLoginInfo(<generated>)
(String), POST(String), 69(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:29:41.237 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:29:47.963 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251750614375907330
2020-04-19 21:29:47.964 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:29:47.964 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:29:47.965 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:29:47.965 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:29:47.966 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:29:47.966 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251750614375907330(String)
2020-04-19 21:29:47.968 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:47.968 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:29:47.970 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:47.971 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:47.972 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:29:47.973 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:47.973 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:29:47.974 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：11
2020-04-19 21:29:47.974 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},"msg":"操作成功"}
2020-04-19 21:29:47.975 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:29:47.976 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251750614375907330(String), [1251750614375907330](String), 1(Integer), GET(String), 11(Long), {"code":20000,"data":{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:29:47.980 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:29:59.528 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251780392676016129
2020-04-19 21:29:59.528 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:29:59.528 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:29:59.528 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:29:59.529 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:29:59.529 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:29:59.530 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 21:29:59.532 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:29:59.532 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:29:59.533 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:59.535 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:29:59.535 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:29:59.536 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:29:59.537 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:29:59.538 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-19 21:29:59.538 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},"msg":"操作成功"}
2020-04-19 21:29:59.540 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:29:59.540 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251780392676016129(String), [1251780392676016129](String), 1(Integer), GET(String), 10(Long), {"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询\"李\"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过\"张三\"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过\"张三\"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 20:01:01","views":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:29:59.545 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:31:12.843 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/update
2020-04-19 21:31:12.844 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-19 21:31:12.844 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:31:12.844 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.update
2020-04-19 21:31:12.845 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:31:12.846 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -==>  Preparing: UPDATE article SET author=?, title=?, content=?, summary=?, views=?, comment_count=?, like_count=?, is_top=?, is_recommend=?, create_time=?, update_time=?, is_enable=? WHERE id=? 
2020-04-19 21:31:12.847 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -==> Parameters: xing(String), mysql练习题(String), ### 建表

- 学生表

```mysql
CREATE TABLE `Student`(
`s_id` VARCHAR(20),
`s_name` VARCHAR(20) NOT NULL DEFAULT '',
`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
PRIMARY KEY(`s_id`)
);
```

- 课程表

```mysql
CREATE TABLE `Course`(
`c_id`  VARCHAR(20),
`c_name` VARCHAR(20) NOT NULL DEFAULT '',
`t_id` VARCHAR(20) NOT NULL,
PRIMARY KEY(`c_id`)
);
```

- 教师表

```mysql
CREATE TABLE `Teacher`(
`t_id` VARCHAR(20),
`t_name` VARCHAR(20) NOT NULL DEFAULT '',
PRIMARY KEY(`t_id`)
);
```

- 成绩表

```mysql
CREATE TABLE `Score`(
`s_id` VARCHAR(20),
`c_id`  VARCHAR(20),
`s_score` INT(3),
PRIMARY KEY(`s_id`,`c_id`)
);
```

- 插入学生表测试数据

```mysql
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
```

- 课程表测试数据

```mysql
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');
```

- 教师表测试数据

```mysql
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');
```

- 成绩表测试数据

```mysql
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);
```

### 练习题和sql语句

1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数

```mysql
select a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c 
where a.s_id=b.s_id 
and a.s_id=c.s_id 
and b.c_id='01' 
and c.c_id='02' 
and b.s_score>c.s_score
```

2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数

```mysql
select a.* ,b.s_score as 01_score,c.s_score as 02_score from 
student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL 
join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score
```

3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score >=60;
```

4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
left join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score <60
union
select a.s_id,a.s_name,0 as avg_score from 
student a 
where a.s_id not in (
select distinct s_id from score);
```

5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩

```mysql
select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from 
student a 
left join score b on a.s_id=b.s_id
GROUP BY a.s_id,a.s_name;
```

6. 查询"李"姓老师的数量 

```mysql
select count(t_id) from teacher where t_name like '李%';
```

7. 查询学过"张三"老师授课的同学的信息 

```mysql
select a.* from 
student a 
join score b on a.s_id=b.s_id where b.c_id in(
select c_id from course where t_id =(
select t_id from teacher where t_name = '张三'));
```



8. 查询没学过"张三"老师授课的同学的信息 

```mysql
select * from 
    student c 
    where c.s_id not in(
        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(
        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));
```



9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a,score b,score c 
where a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';
```

10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a 
where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')
```

11. 查询没有学全所有课程的同学的信息 

```mysql
--@wendiepei的写法
select s.* from student s 
left join Score s1 on s1.s_id=s.s_id
group by s.s_id having count(s1.c_id)<(select count(*) from course)	
--@k1051785839的写法
select *
from student
where s_id not in(
select s_id from score t1  
group by s_id having count(*) =(select count(distinct c_id)  from course)) 
```

12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 

```mysql
select * from student where s_id in(
select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')
);
```

13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 

```mysql
--@ouyang_1993的写法
SELECT
 Student.*
FROM
 Student
WHERE
 s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (
    #下面的语句是找到'01'同学学习的课程数
    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'
   )
 )
AND s_id NOT IN (
 #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们
 SELECT s_id FROM Score
 WHERE c_id IN(
   #下面的语句是找到‘01’同学没学过的课程
   SELECT DISTINCT c_id FROM Score
   WHERE c_id NOT IN (
     #下面的语句是找出‘01’同学学习的课程
     SELECT c_id FROM Score WHERE s_id = '01'
    )
  ) GROUP BY s_id
) #下面的条件是排除01同学
AND s_id NOT IN ('01')
--@k1051785839的写法
SELECT
 t3.*
FROM
 (
  SELECT
   s_id,
   group_concat(c_id ORDER BY c_id) group1
  FROM
   score
  WHERE
   s_id &lt;> '01'
  GROUP BY
   s_id
 ) t1
INNER JOIN (
 SELECT
  group_concat(c_id ORDER BY c_id) group2
 FROM
  score
 WHERE
  s_id = '01'
 GROUP BY
  s_id
) t2 ON t1.group1 = t2.group2
INNER JOIN student t3 ON t1.s_id = t3.s_id
```

14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 

```mysql
select a.s_name from student a where a.s_id not in (
select s_id from score where c_id = 
(select c_id from course where t_id =(
select t_id from teacher where t_name = '张三')));
```

15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 

```mysql
select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from 
student a 
left join score b on a.s_id = b.s_id
where a.s_id in(
select s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)
GROUP BY a.s_id,a.s_name
```

16. 检索"01"课程分数小于60，按分数降序排列的学生信息

```mysql
select a.*,b.c_id,b.s_score from 
student a,score b 
where a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;
```

17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

```mysql
select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,
(select s_score from score where s_id=a.s_id and c_id='02') as 数学,
(select s_score from score where s_id=a.s_id and c_id='03') as 英语,
round(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;
--@喝完这杯还有一箱的写法
SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, 
MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, 
MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, 
avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC
```

18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

```mysql
select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),
ROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,
ROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,
ROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,
ROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率
from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name
```

19. 按各科成绩进行排序，并显示排名

```mysql
-- mysql没有rank函数
select a.s_id,a.c_id,
        @i:=@i +1 as i保留排名,
        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,
        @score:=a.s_score as score
    from (
        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC
    )a,(select @k:=0,@i:=0,@score:=0)s
--@k1051785839的写法
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank
                FROM score t1 where t1.c_id='01'
                order by t1.s_score desc) t1)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank
                FROM score t1 where t1.c_id='02'
                order by t1.s_score desc) t2)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank
                FROM score t1 where t1.c_id='03'
                order by t1.s_score desc) t3)
```

20. 查询学生的总成绩并进行排名

```mysql
select a.s_id,
@i:=@i+1 as i,
@k:=(case when @score=a.sum_score then @k else @i end) as rank,
@score:=a.sum_score as score
from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,
(select @k:=0,@i:=0,@score:=0)s
```

21. 查询不同老师所教不同课程平均分从高到低显示 

```mysql
select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a
left join score b on a.c_id=b.c_id 
left join teacher c on a.t_id=c.t_id
GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;
```

22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩

```mysql
select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  
ORDER BY a.s_score DESC  
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' 
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3;
```

23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比

```mysql
select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a
left join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,
ROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)b on a.c_id=b.c_id
left join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,
ROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)c on a.c_id=c.c_id
left join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,
ROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)d on a.c_id=d.c_id
left join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,
ROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)e on a.c_id=e.c_id
left join course f on a.c_id = f.c_id
```

24. 查询学生平均成绩及其名次 

```mysql
select a.s_id,
@i:=@i+1 as '不保留空缺排名',
@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',
@avg_score:=avg_s as '平均分'
from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;
```

25. 查询各科成绩前三名的记录

```mysql
-- 1.选出b表比a表成绩大的所有组
-- 2.选出比当前id成绩大的 小于三个的
select a.s_id,a.c_id,a.s_score from score a 
left join score b on a.c_id = b.c_id and a.s_score<b.s_score
group by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3
ORDER BY a.c_id,a.s_score DESC
```

26. 查询每门课程被选修的学生数 

```mysql
select c_id,count(s_id) from score a GROUP BY c_id
```

27. 查询出只有两门课程的全部学生的学号和姓名 

```mysql
select s_id,s_name from student where s_id in(
select s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);
```

28. 查询男生、女生人数 

```mysql
select s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex
```

29. 查询名字中含有"风"字的学生信息

```mysql
select * from student where s_name like '%风%';
```

30. 查询同名同性学生名单，并统计同名人数 		

```mysql
select a.s_name,a.s_sex,count(*) from student a  JOIN 
student b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex
GROUP BY a.s_name,a.s_sex
```

31. 查询1990年出生的学生名单

```mysql
select s_name from student where s_birth like '1990%'
```

32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 

```mysql
select c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC
```

33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 

```mysql
select a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a
left join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85
```

34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 	

```mysql
select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(
select c_id from course where c_name ='数学') and b.s_score<60
```

35. 查询所有学生的课程及分数情况；

```mysql
select a.s_id,a.s_name,
SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',
SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',
SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',
SUM(b.s_score) as  '总分'
from student a left join score b on a.s_id = b.s_id 
left join course c on b.c_id = c.c_id 
GROUP BY a.s_id,a.s_name
```

36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； 

```mysql
select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id
left join student a on a.s_id=c.s_id where c.s_score>=70
```

37. 查询不及格的课程

```mysql
select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id
where a.s_score<60 
```

38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； 

```mysql
select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id
where a.c_id = '01'and a.s_score>80
```

39. 求每门课程的学生人数 

```mysql
select count(*) from score GROUP BY c_id;
```

40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩

```mysql
-- 查询老师id	
select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'
-- 查询最高分（可能有相同分数）
select MAX(s_score) from score where c_id='02'
-- 查询信息
select a.*,b.s_score,b.c_id,c.c_name from student a
LEFT JOIN score b on a.s_id = b.s_id
LEFT JOIN course c on b.c_id=c.c_id
where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')
and b.s_score in (select MAX(s_score) from score where c_id='02')
```

41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 

```mysql
select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score
```

42. 查询每门功成绩最好的前两名 

```mysql
select a.s_id,a.c_id,a.s_score from score a
where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id
```

43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  

```mysql
select c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC
```

44. 检索至少选修两门课程的学生学号 

```mysql
select s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2
```

45. 查询选修了全部课程的学生信息 

```mysql
select * from student where s_id in(		
select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))
```

46. 查询各学生的年龄

```mysql
# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - 
(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age
from student;
```

47. 查询本周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)
select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
	
select WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
```

48. 查询下周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)
```

49. 查询本月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)
```

50. 查询下月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)
```

(String), MySQL练习题(String), 1(Integer), 0(Integer), 0(Integer), false(Boolean), false(Boolean), 2020-04-19T15:51:17(LocalDateTime), 2020-04-19T21:31:12.845(LocalDateTime), true(Boolean), 1251780392676016129(String)
2020-04-19 21:31:12.854 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -<==    Updates: 1
2020-04-19 21:31:12.855 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-19 21:31:12.855 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"更新成功"}
2020-04-19 21:31:12.856 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:31:12.856 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/update(String), [ArticleDTO(category=Category(id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null), tagList=[Tag(id=3, name=mysql, isEnable=null, isDeleted=null)])](String), 1(Integer), PUT(String), 12(Long), {"code":20000,"msg":"更新成功"}(String), 127.0.0.1(String)
2020-04-19 21:31:12.858 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:31:13.096 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:31:13.097 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:31:13.098 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:31:13.098 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:31:13.099 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:31:13.101 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 21:31:13.102 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:31:13.104 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 LIMIT ?,? 
2020-04-19 21:31:13.104 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:31:13.106 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:13.107 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:31:13.107 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.109 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:13.110 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:31:13.111 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:31:13.114 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:13.114 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:31:13.116 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.117 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:13.117 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:31:13.118 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.120 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:13.120 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:31:13.121 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.122 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:13.123 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:31:13.124 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.126 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:13.126 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:31:13.127 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.129 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:13.130 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:31:13.131 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:31:13.132 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:13.133 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:31:13.134 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.135 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:13.135 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:31:13.136 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.138 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:13.138 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:31:13.140 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.141 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:13.142 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:31:13.143 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.144 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:13.145 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:31:13.146 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.148 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:13.148 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:31:13.150 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.151 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:13.151 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:31:13.152 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.153 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:13.154 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:31:13.155 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.156 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:13.157 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:31:13.158 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.159 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:13.160 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:31:13.161 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.163 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:13.163 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:31:13.164 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.166 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:13.167 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:31:13.168 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:13.169 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:31:13.170 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：74
2020-04-19 21:31:13.171 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:13","views":1},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 21:31:13.174 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:31:13.176 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=11, pageSize=10, totalPage=2, currPage=1, list=[{id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=126, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=[2020, 3, 23, 15, 55, 15], updateTime=[2020, 4, 14, 11, 58, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的f, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 11, 56], updateTime=[2020, 4, 19, 12, 11, 56], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725884101074946, author=sdf, title=sdf, content=<p>sdfsdfsdf</p>, summary=sdf, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 14, 41], updateTime=[2020, 4, 19, 12, 14, 41], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251726075243896833, author=sdfsdfsdfsdf, title=sdfsdf, content=<p>zxcxzc</p>, summary=sdfsdfs, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 15, 26], updateTime=[2020, 4, 19, 20, 17, 43], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 52, 57], updateTime=[2020, 4, 19, 20, 15, 29], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251752142763507713, author=_江南一点雨, title=离职半年了，老东家又发 offer，回不回？, content=```
代码块
```
asdasd, summary=有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？, cover=null, views=12, commentCount=0, likeCount=123, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 59, 1], updateTime=[2020, 4, 19, 21, 29, 41], isEnable=false, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251770557519675394, author=test, title=test, content=<blockquote>
<p>yhjktykj</p>
</blockquote>
<p><span style="background-color: #00ff00;">fgdfgfdgd</span></p>
<p>&nbsp;</p>
<pre class="language-java"><code>public class Hello{
public sstatic void main(String args[]){
Sysout.print.out("hello");
}</code></pre>, summary=test, cover=null, views=3, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 12, 12], updateTime=[2020, 4, 19, 15, 14, 35], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=asdf, title=asdasd, content=<p>### asdkfhjajlkhdfkashdfki</p>, summary=asdasd, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 36, 25], updateTime=[2020, 4, 19, 20, 20, 22], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251780392676016129, author=xing, title=mysql练习题, content=<p>### 建表 - 学生表 ```mysql CREATE TABLE `Student`( `s_id` VARCHAR(20), `s_name` VARCHAR(20) NOT NULL DEFAULT '', `s_birth` VARCHAR(20) NOT NULL DEFAULT '', `s_sex` VARCHAR(10) NOT NULL DEFAULT '', PRIMARY KEY(`s_id`) ); ``` - 课程表 ```mysql CREATE TABLE `Course`( `c_id` VARCHAR(20), `c_name` VARCHAR(20) NOT NULL DEFAULT '', `t_id` VARCHAR(20) NOT NULL, PRIMARY KEY(`c_id`) ); ``` - 教师表 ```mysql CREATE TABLE `Teacher`( `t_id` VARCHAR(20), `t_name` VARCHAR(20) NOT NULL DEFAULT '', PRIMARY KEY(`t_id`) ); ``` - 成绩表 ```mysql CREATE TABLE `Score`( `s_id` VARCHAR(20), `c_id` VARCHAR(20), `s_score` INT(3), PRIMARY KEY(`s_id`,`c_id`) ); ``` - 插入学生表测试数据 ```mysql insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-05-20' , '男'); insert into Student values('04' , '李云' , '1990-08-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-03-01' , '女'); insert into Student values('07' , '郑竹' , '1989-07-01' , '女'); insert into Student values('08' , '王菊' , '1990-01-20' , '女'); ``` - 课程表测试数据 ```mysql insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); ``` - 教师表测试数据 ```mysql insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); ``` - 成绩表测试数据 ```mysql insert into Score values('01' , '01' , 80); insert into Score values('01' , '02' , 90); insert into Score values('01' , '03' , 99); insert into Score values('02' , '01' , 70); insert into Score values('02' , '02' , 60); insert into Score values('02' , '03' , 80); insert into Score values('03' , '01' , 80); insert into Score values('03' , '02' , 80); insert into Score values('03' , '03' , 80); insert into Score values('04' , '01' , 50); insert into Score values('04' , '02' , 30); insert into Score values('04' , '03' , 20); insert into Score values('05' , '01' , 76); insert into Score values('05' , '02' , 87); insert into Score values('06' , '01' , 31); insert into Score values('06' , '03' , 34); insert into Score values('07' , '02' , 89); insert into Score values('07' , '03' , 98); ``` ### 练习题和sql语句 1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数 ```mysql select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c where a.s_id=b.s_id and a.s_id=c.s_id and b.c_id='01' and c.c_id='02' and b.s_score&gt;c.s_score ``` 2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数 ```mysql select a.* ,b.s_score as 01_score,c.s_score as 02_score from student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score=60; ``` 4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的) ```mysql select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from student b left join score a on b.s_id = a.s_id GROUP BY b.s_id,b.s_name HAVING avg_score &lt;60 union select a.s_id,a.s_name,0 as avg_score from student a where a.s_id not in ( select distinct s_id from score); ``` 5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩 ```mysql select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from student a left join score b on a.s_id=b.s_id GROUP BY a.s_id,a.s_name; ``` 6. 查询"李"姓老师的数量 ```mysql select count(t_id) from teacher where t_name like '李%'; ``` 7. 查询学过"张三"老师授课的同学的信息 ```mysql select a.* from student a join score b on a.s_id=b.s_id where b.c_id in( select c_id from course where t_id =( select t_id from teacher where t_name = '张三')); ``` 8. 查询没学过"张三"老师授课的同学的信息 ```mysql select * from student c where c.s_id not in( select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in( select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三')); ``` 9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息 ```mysql select a.* from student a,score b,score c where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02'; ``` 10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息 ```mysql select a.* from student a where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02') ``` 11. 查询没有学全所有课程的同学的信息 ```mysql --@wendiepei的写法 select s.* from student s left join Score s1 on s1.s_id=s.s_id group by s.s_id having count(s1.c_id)&lt;(select count(*) from course) --@k1051785839的写法 select * from student where s_id not in( select s_id from score t1 group by s_id having count(*) =(select count(distinct c_id) from course)) ``` 12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 ```mysql select * from student where s_id in( select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01') ); ``` 13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 ```mysql --@ouyang_1993的写法 SELECT Student.* FROM Student WHERE s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = ( #下面的语句是找到'01'同学学习的课程数 SELECT COUNT(c_id) FROM Score WHERE s_id = '01' ) ) AND s_id NOT IN ( #下面的语句是找到学过&lsquo;01&rsquo;同学没学过的课程，有哪些同学。并排除他们 SELECT s_id FROM Score WHERE c_id IN( #下面的语句是找到&lsquo;01&rsquo;同学没学过的课程 SELECT DISTINCT c_id FROM Score WHERE c_id NOT IN ( #下面的语句是找出&lsquo;01&rsquo;同学学习的课程 SELECT c_id FROM Score WHERE s_id = '01' ) ) GROUP BY s_id ) #下面的条件是排除01同学 AND s_id NOT IN ('01') --@k1051785839的写法 SELECT t3.* FROM ( SELECT s_id, group_concat(c_id ORDER BY c_id) group1 FROM score WHERE s_id &lt;&gt; '01' GROUP BY s_id ) t1 INNER JOIN ( SELECT group_concat(c_id ORDER BY c_id) group2 FROM score WHERE s_id = '01' GROUP BY s_id ) t2 ON t1.group1 = t2.group2 INNER JOIN student t3 ON t1.s_id = t3.s_id ``` 14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 ```mysql select a.s_name from student a where a.s_id not in ( select s_id from score where c_id = (select c_id from course where t_id =( select t_id from teacher where t_name = '张三'))); ``` 15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 ```mysql select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from student a left join score b on a.s_id = b.s_id where a.s_id in( select s_id from score where s_score&lt;60 GROUP BY s_id having count(1)&gt;=2) GROUP BY a.s_id,a.s_name ``` 16. 检索"01"课程分数小于60，按分数降序排列的学生信息 ```mysql select a.*,b.c_id,b.s_score from student a,score b where a.s_id = b.s_id and b.c_id='01' and b.s_score&lt;60 ORDER BY b.s_score DESC; ``` 17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 ```mysql select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文, (select s_score from score where s_id=a.s_id and c_id='02') as 数学, (select s_score from score where s_id=a.s_id and c_id='03') as 英语, round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC; --@喝完这杯还有一箱的写法 SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC ``` 18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 --及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 ```mysql select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2), ROUND(100*(SUM(case when a.s_score&gt;=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率, ROUND(100*(SUM(case when a.s_score&gt;=70 and a.s_score&lt;=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率, ROUND(100*(SUM(case when a.s_score&gt;=80 and a.s_score&lt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率, ROUND(100*(SUM(case when a.s_score&gt;=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率 from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name ``` 19. 按各科成绩进行排序，并显示排名 ```mysql -- mysql没有rank函数 select a.s_id,a.c_id, @i:=@i +1 as i保留排名, @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名, @score:=a.s_score as score from ( select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC )a,(select @k:=0,@i:=0,@score:=0)s --@k1051785839的写法 (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='01') rank FROM score t1 where t1.c_id='01' order by t1.s_score desc) t1) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='02') rank FROM score t1 where t1.c_id='02' order by t1.s_score desc) t2) union (select * from (select t1.c_id, t1.s_score, (select count(distinct t2.s_score) from score t2 where t2.s_score&gt;=t1.s_score and t2.c_id='03') rank FROM score t1 where t1.c_id='03' order by t1.s_score desc) t3) ``` 20. 查询学生的总成绩并进行排名 ```mysql select a.s_id, @i:=@i+1 as i, @k:=(case when @score=a.sum_score then @k else @i end) as rank, @score:=a.sum_score as score from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a, (select @k:=0,@i:=0,@score:=0)s ``` 21. 查询不同老师所教不同课程平均分从高到低显示 ```mysql select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a left join score b on a.c_id=b.c_id left join teacher c on a.t_id=c.t_id GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC; ``` 22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 ```mysql select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3 UNION select d.*,c.排名,c.s_score,c.c_id from ( select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' ORDER BY a.s_score DESC )c left join student d on c.s_id=d.s_id where 排名 BETWEEN 2 AND 3; ``` 23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 ```mysql select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a left join (select c_id,SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end) as `85-100`, ROUND(100*(SUM(case when s_score &gt;85 and s_score &lt;=100 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)b on a.c_id=b.c_id left join (select c_id,SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end) as `70-85`, ROUND(100*(SUM(case when s_score &gt;70 and s_score &lt;=85 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)c on a.c_id=c.c_id left join (select c_id,SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end) as `60-70`, ROUND(100*(SUM(case when s_score &gt;60 and s_score &lt;=70 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)d on a.c_id=d.c_id left join (select c_id,SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end) as `0-60`, ROUND(100*(SUM(case when s_score &gt;=0 and s_score &lt;=60 then 1 else 0 end)/count(*)),2) as 百分比 from score GROUP BY c_id)e on a.c_id=e.c_id left join course f on a.c_id = f.c_id ``` 24. 查询学生平均成绩及其名次 ```mysql select a.s_id, @i:=@i+1 as '不保留空缺排名', @k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名', @avg_score:=avg_s as '平均分' from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b; ``` 25. 查询各科成绩前三名的记录 ```mysql -- 1.选出b表比a表成绩大的所有组 -- 2.选出比当前id成绩大的 小于三个的 select a.s_id,a.c_id,a.s_score from score a left join score b on a.c_id = b.c_id and a.s_score=85 ``` 34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 ```mysql select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=( select c_id from course where c_name ='数学') and b.s_score&lt;60 ``` 35. 查询所有学生的课程及分数情况； ```mysql select a.s_id,a.s_name, SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文', SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学', SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语', SUM(b.s_score) as '总分' from student a left join score b on a.s_id = b.s_id left join course c on b.c_id = c.c_id GROUP BY a.s_id,a.s_name ``` 36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； ```mysql select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id left join student a on a.s_id=c.s_id where c.s_score&gt;=70 ``` 37. 查询不及格的课程 ```mysql select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id where a.s_score&lt;60 ``` 38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； ```mysql select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id where a.c_id = '01'and a.s_score&gt;80 ``` 39. 求每门课程的学生人数 ```mysql select count(*) from score GROUP BY c_id; ``` 40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩 ```mysql -- 查询老师id select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三' -- 查询最高分（可能有相同分数） select MAX(s_score) from score where c_id='02' -- 查询信息 select a.*,b.s_score,b.c_id,c.c_name from student a LEFT JOIN score b on a.s_id = b.s_id LEFT JOIN course c on b.c_id=c.c_id where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三') and b.s_score in (select MAX(s_score) from score where c_id='02') ``` 41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 ```mysql select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score ``` 42. 查询每门功成绩最好的前两名 ```mysql select a.s_id,a.c_id,a.s_score from score a where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score&gt;=a.s_score)&lt;=2 ORDER BY a.c_id ``` 43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 ```mysql select c_id,count(*) as total from score GROUP BY c_id HAVING total&gt;5 ORDER BY total,c_id ASC ``` 44. 检索至少选修两门课程的学生学号 ```mysql select s_id,count(*) as sel from score GROUP BY s_id HAVING sel&gt;=2 ``` 45. 查询选修了全部课程的学生信息 ```mysql select * from student where s_id in( select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course)) ``` 46. 查询各学生的年龄 ```mysql # 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一 select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - (case when DATE_FORMAT(NOW(),'%m%d')&gt;DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age from student; ``` 47. 查询本周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth) select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d')) select WEEK(DATE_FORMAT(NOW(),'%Y%m%d')) ``` 48. 查询下周过生日的学生 ```mysql select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth) ``` 49. 查询本月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth) ``` 50. 查询下月过生日的学生 ```mysql select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth) ```</p>, summary=MySQL练习题, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 51, 17], updateTime=[2020, 4, 19, 20, 1, 1], isEnable=true, isDeleted=null, version=null, category={id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=3, author=1, title=岁的法国士大夫, content=3123123123, summary=123124312414, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2019, 6, 17, 23, 48, 4], updateTime=[2020, 4, 17, 23, 48, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 74(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:13","views":1},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:31:13.182 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:31:17.806 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/details/1251780392676016129
2020-04-19 21:31:17.807 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:31:17.807 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:31:17.808 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.read
2020-04-19 21:31:17.808 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:31:17.814 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:31:17.815 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 21:31:17.817 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:17.817 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:31:17.818 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:17.819 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:17.820 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:31:17.821 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:17.822 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:31:17.823 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==>  Preparing: UPDATE article SET views = views + 1 WHERE id = ?; 
2020-04-19 21:31:17.824 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 21:31:17.827 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -<==    Updates: 1
2020-04-19 21:31:17.830 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：24
2020-04-19 21:31:17.830 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:13","views":1},"msg":"操作成功"}
2020-04-19 21:31:17.832 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:31:17.833 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/details/1251780392676016129(String), [1251780392676016129](String), 1(Integer), GET(String), 24(Long), {"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:13","views":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:31:17.836 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:31:47.199 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251780392676016129
2020-04-19 21:31:47.200 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:31:47.200 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:31:47.200 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:31:47.201 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:31:47.202 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:31:47.203 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 21:31:47.204 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:47.205 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:31:47.206 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:47.207 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:47.207 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:31:47.208 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:47.209 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:31:47.209 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-19 21:31:47.210 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:13","views":2},"msg":"操作成功"}
2020-04-19 21:31:47.211 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:31:47.212 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251780392676016129(String), [1251780392676016129](String), 1(Integer), GET(String), 10(Long), {"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:13","views":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:31:47.218 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:31:58.888 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/update
2020-04-19 21:31:58.889 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-19 21:31:58.889 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:31:58.890 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.update
2020-04-19 21:31:58.890 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:31:58.891 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -==>  Preparing: UPDATE article SET author=?, title=?, content=?, summary=?, views=?, comment_count=?, like_count=?, is_top=?, is_recommend=?, create_time=?, update_time=?, is_enable=? WHERE id=? 
2020-04-19 21:31:58.892 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -==> Parameters: xing(String), mysql练习题(String), ### 建表

- 学生表

```mysql
CREATE TABLE `Student`(
`s_id` VARCHAR(20),
`s_name` VARCHAR(20) NOT NULL DEFAULT '',
`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
PRIMARY KEY(`s_id`)
);
```

- 课程表

```mysql
CREATE TABLE `Course`(
`c_id`  VARCHAR(20),
`c_name` VARCHAR(20) NOT NULL DEFAULT '',
`t_id` VARCHAR(20) NOT NULL,
PRIMARY KEY(`c_id`)
);
```

- 教师表

```mysql
CREATE TABLE `Teacher`(
`t_id` VARCHAR(20),
`t_name` VARCHAR(20) NOT NULL DEFAULT '',
PRIMARY KEY(`t_id`)
);
```

- 成绩表

```mysql
CREATE TABLE `Score`(
`s_id` VARCHAR(20),
`c_id`  VARCHAR(20),
`s_score` INT(3),
PRIMARY KEY(`s_id`,`c_id`)
);
```

- 插入学生表测试数据

```mysql
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
```

- 课程表测试数据

```mysql
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');
```

- 教师表测试数据

```mysql
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');
```

- 成绩表测试数据

```mysql
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);
```

### 练习题和sql语句

1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数

```mysql
select a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c 
where a.s_id=b.s_id 
and a.s_id=c.s_id 
and b.c_id='01' 
and c.c_id='02' 
and b.s_score>c.s_score
```

2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数

```mysql
select a.* ,b.s_score as 01_score,c.s_score as 02_score from 
student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL 
join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score
```

3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score >=60;
```

4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
left join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score <60
union
select a.s_id,a.s_name,0 as avg_score from 
student a 
where a.s_id not in (
select distinct s_id from score);
```

5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩

```mysql
select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from 
student a 
left join score b on a.s_id=b.s_id
GROUP BY a.s_id,a.s_name;
```

6. 查询"李"姓老师的数量 

```mysql
select count(t_id) from teacher where t_name like '李%';
```

7. 查询学过"张三"老师授课的同学的信息 

```mysql
select a.* from 
student a 
join score b on a.s_id=b.s_id where b.c_id in(
select c_id from course where t_id =(
select t_id from teacher where t_name = '张三'));
```



8. 查询没学过"张三"老师授课的同学的信息 

```mysql
select * from 
    student c 
    where c.s_id not in(
        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(
        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));
```



9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a,score b,score c 
where a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';
```

10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a 
where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')
```

11. 查询没有学全所有课程的同学的信息 

```mysql
--@wendiepei的写法
select s.* from student s 
left join Score s1 on s1.s_id=s.s_id
group by s.s_id having count(s1.c_id)<(select count(*) from course)	
--@k1051785839的写法
select *
from student
where s_id not in(
select s_id from score t1  
group by s_id having count(*) =(select count(distinct c_id)  from course)) 
```

12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 

```mysql
select * from student where s_id in(
select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')
);
```

13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 

```mysql
--@ouyang_1993的写法
SELECT
 Student.*
FROM
 Student
WHERE
 s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (
    #下面的语句是找到'01'同学学习的课程数
    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'
   )
 )
AND s_id NOT IN (
 #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们
 SELECT s_id FROM Score
 WHERE c_id IN(
   #下面的语句是找到‘01’同学没学过的课程
   SELECT DISTINCT c_id FROM Score
   WHERE c_id NOT IN (
     #下面的语句是找出‘01’同学学习的课程
     SELECT c_id FROM Score WHERE s_id = '01'
    )
  ) GROUP BY s_id
) #下面的条件是排除01同学
AND s_id NOT IN ('01')
--@k1051785839的写法
SELECT
 t3.*
FROM
 (
  SELECT
   s_id,
   group_concat(c_id ORDER BY c_id) group1
  FROM
   score
  WHERE
   s_id &lt;> '01'
  GROUP BY
   s_id
 ) t1
INNER JOIN (
 SELECT
  group_concat(c_id ORDER BY c_id) group2
 FROM
  score
 WHERE
  s_id = '01'
 GROUP BY
  s_id
) t2 ON t1.group1 = t2.group2
INNER JOIN student t3 ON t1.s_id = t3.s_id
```

14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 

```mysql
select a.s_name from student a where a.s_id not in (
select s_id from score where c_id = 
(select c_id from course where t_id =(
select t_id from teacher where t_name = '张三')));
```

15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 

```mysql
select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from 
student a 
left join score b on a.s_id = b.s_id
where a.s_id in(
select s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)
GROUP BY a.s_id,a.s_name
```

16. 检索"01"课程分数小于60，按分数降序排列的学生信息

```mysql
select a.*,b.c_id,b.s_score from 
student a,score b 
where a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;
```

17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

```mysql
select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,
(select s_score from score where s_id=a.s_id and c_id='02') as 数学,
(select s_score from score where s_id=a.s_id and c_id='03') as 英语,
round(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;
--@喝完这杯还有一箱的写法
SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, 
MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, 
MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, 
avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC
```

18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

```mysql
select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),
ROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,
ROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,
ROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,
ROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率
from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name
```

19. 按各科成绩进行排序，并显示排名

```mysql
-- mysql没有rank函数
select a.s_id,a.c_id,
        @i:=@i +1 as i保留排名,
        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,
        @score:=a.s_score as score
    from (
        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC
    )a,(select @k:=0,@i:=0,@score:=0)s
--@k1051785839的写法
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank
                FROM score t1 where t1.c_id='01'
                order by t1.s_score desc) t1)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank
                FROM score t1 where t1.c_id='02'
                order by t1.s_score desc) t2)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank
                FROM score t1 where t1.c_id='03'
                order by t1.s_score desc) t3)
```

20. 查询学生的总成绩并进行排名

```mysql
select a.s_id,
@i:=@i+1 as i,
@k:=(case when @score=a.sum_score then @k else @i end) as rank,
@score:=a.sum_score as score
from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,
(select @k:=0,@i:=0,@score:=0)s
```

21. 查询不同老师所教不同课程平均分从高到低显示 

```mysql
select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a
left join score b on a.c_id=b.c_id 
left join teacher c on a.t_id=c.t_id
GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;
```

22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩

```mysql
select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  
ORDER BY a.s_score DESC  
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' 
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3;
```

23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比

```mysql
select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a
left join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,
ROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)b on a.c_id=b.c_id
left join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,
ROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)c on a.c_id=c.c_id
left join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,
ROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)d on a.c_id=d.c_id
left join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,
ROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)e on a.c_id=e.c_id
left join course f on a.c_id = f.c_id
```

24. 查询学生平均成绩及其名次 

```mysql
select a.s_id,
@i:=@i+1 as '不保留空缺排名',
@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',
@avg_score:=avg_s as '平均分'
from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;
```

25. 查询各科成绩前三名的记录

```mysql
-- 1.选出b表比a表成绩大的所有组
-- 2.选出比当前id成绩大的 小于三个的
select a.s_id,a.c_id,a.s_score from score a 
left join score b on a.c_id = b.c_id and a.s_score<b.s_score
group by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3
ORDER BY a.c_id,a.s_score DESC
```

26. 查询每门课程被选修的学生数 

```mysql
select c_id,count(s_id) from score a GROUP BY c_id
```

27. 查询出只有两门课程的全部学生的学号和姓名 

```mysql
select s_id,s_name from student where s_id in(
select s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);
```

28. 查询男生、女生人数 

```mysql
select s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex
```

29. 查询名字中含有"风"字的学生信息

```mysql
select * from student where s_name like '%风%';
```

30. 查询同名同性学生名单，并统计同名人数 		

```mysql
select a.s_name,a.s_sex,count(*) from student a  JOIN 
student b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex
GROUP BY a.s_name,a.s_sex
```

31. 查询1990年出生的学生名单

```mysql
select s_name from student where s_birth like '1990%'
```

32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 

```mysql
select c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC
```

33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 

```mysql
select a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a
left join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85
```

34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 	

```mysql
select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(
select c_id from course where c_name ='数学') and b.s_score<60
```

35. 查询所有学生的课程及分数情况；

```mysql
select a.s_id,a.s_name,
SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',
SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',
SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',
SUM(b.s_score) as  '总分'
from student a left join score b on a.s_id = b.s_id 
left join course c on b.c_id = c.c_id 
GROUP BY a.s_id,a.s_name
```

36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； 

```mysql
select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id
left join student a on a.s_id=c.s_id where c.s_score>=70
```

37. 查询不及格的课程

```mysql
select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id
where a.s_score<60 
```

38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； 

```mysql
select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id
where a.c_id = '01'and a.s_score>80
```

39. 求每门课程的学生人数 

```mysql
select count(*) from score GROUP BY c_id;
```

40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩

```mysql
-- 查询老师id	
select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'
-- 查询最高分（可能有相同分数）
select MAX(s_score) from score where c_id='02'
-- 查询信息
select a.*,b.s_score,b.c_id,c.c_name from student a
LEFT JOIN score b on a.s_id = b.s_id
LEFT JOIN course c on b.c_id=c.c_id
where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')
and b.s_score in (select MAX(s_score) from score where c_id='02')
```

41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 

```mysql
select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score
```

42. 查询每门功成绩最好的前两名 

```mysql
select a.s_id,a.c_id,a.s_score from score a
where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id
```

43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  

```mysql
select c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC
```

44. 检索至少选修两门课程的学生学号 

```mysql
select s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2
```

45. 查询选修了全部课程的学生信息 

```mysql
select * from student where s_id in(		
select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))
```

46. 查询各学生的年龄

```mysql
# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - 
(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age
from student;
```

47. 查询本周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)
select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
	
select WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
```

48. 查询下周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)
```

49. 查询本月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)
```

50. 查询下月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)
```

(String), MySQL练习题(String), 2(Integer), 0(Integer), 0(Integer), false(Boolean), true(Boolean), 2020-04-19T15:51:17(LocalDateTime), 2020-04-19T21:31:58.890(LocalDateTime), true(Boolean), 1251780392676016129(String)
2020-04-19 21:31:58.897 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.updateById.debug:143 -<==    Updates: 1
2020-04-19 21:31:58.898 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 21:31:58.898 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"更新成功"}
2020-04-19 21:31:58.898 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:31:58.899 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/update(String), [ArticleDTO(category=Category(id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null), tagList=[Tag(id=3, name=mysql, isEnable=null, isDeleted=null)])](String), 1(Integer), PUT(String), 9(Long), {"code":20000,"msg":"更新成功"}(String), 127.0.0.1(String)
2020-04-19 21:31:58.901 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:31:59.141 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:31:59.142 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:31:59.142 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:31:59.142 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:31:59.144 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:31:59.146 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 21:31:59.147 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:31:59.149 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 LIMIT ?,? 
2020-04-19 21:31:59.149 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:31:59.151 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:59.152 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:31:59.153 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.155 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:59.156 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:31:59.157 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:31:59.158 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:59.159 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:31:59.161 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.163 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:59.163 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:31:59.164 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.166 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:59.167 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:31:59.168 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.170 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:59.170 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:31:59.172 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.173 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:59.174 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:31:59.175 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.176 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:59.178 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:31:59.180 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:31:59.181 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:59.182 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:31:59.184 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.185 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:59.186 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:31:59.187 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.188 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:59.188 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:31:59.189 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.191 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:59.191 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:31:59.192 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.193 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:59.194 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:31:59.195 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.197 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:59.197 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:31:59.199 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.200 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:59.201 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:31:59.202 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.203 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:59.203 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:31:59.204 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.205 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:59.206 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:31:59.206 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.208 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:59.208 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:31:59.209 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.211 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:31:59.211 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:31:59.212 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.214 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:31:59.215 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:31:59.216 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:31:59.217 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:31:59.218 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：77
2020-04-19 21:31:59.219 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":2},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 21:31:59.221 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:31:59.222 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=11, pageSize=10, totalPage=2, currPage=1, list=[{id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=126, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=[2020, 3, 23, 15, 55, 15], updateTime=[2020, 4, 14, 11, 58, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的f, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 11, 56], updateTime=[2020, 4, 19, 12, 11, 56], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725884101074946, author=sdf, title=sdf, content=<p>sdfsdfsdf</p>, summary=sdf, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 14, 41], updateTime=[2020, 4, 19, 12, 14, 41], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251726075243896833, author=sdfsdfsdfsdf, title=sdfsdf, content=<p>zxcxzc</p>, summary=sdfsdfs, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 15, 26], updateTime=[2020, 4, 19, 20, 17, 43], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 52, 57], updateTime=[2020, 4, 19, 20, 15, 29], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251752142763507713, author=_江南一点雨, title=离职半年了，老东家又发 offer，回不回？, content=```
代码块
```
asdasd, summary=有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？, cover=null, views=12, commentCount=0, likeCount=123, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 59, 1], updateTime=[2020, 4, 19, 21, 29, 41], isEnable=false, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251770557519675394, author=test, title=test, content=<blockquote>
<p>yhjktykj</p>
</blockquote>
<p><span style="background-color: #00ff00;">fgdfgfdgd</span></p>
<p>&nbsp;</p>
<pre class="language-java"><code>public class Hello{
public sstatic void main(String args[]){
Sysout.print.out("hello");
}</code></pre>, summary=test, cover=null, views=3, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 12, 12], updateTime=[2020, 4, 19, 15, 14, 35], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=asdf, title=asdasd, content=<p>### asdkfhjajlkhdfkashdfki</p>, summary=asdasd, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 36, 25], updateTime=[2020, 4, 19, 20, 20, 22], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251780392676016129, author=xing, title=mysql练习题, content=### 建表

- 学生表

```mysql
CREATE TABLE `Student`(
`s_id` VARCHAR(20),
`s_name` VARCHAR(20) NOT NULL DEFAULT '',
`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
PRIMARY KEY(`s_id`)
);
```

- 课程表

```mysql
CREATE TABLE `Course`(
`c_id`  VARCHAR(20),
`c_name` VARCHAR(20) NOT NULL DEFAULT '',
`t_id` VARCHAR(20) NOT NULL,
PRIMARY KEY(`c_id`)
);
```

- 教师表

```mysql
CREATE TABLE `Teacher`(
`t_id` VARCHAR(20),
`t_name` VARCHAR(20) NOT NULL DEFAULT '',
PRIMARY KEY(`t_id`)
);
```

- 成绩表

```mysql
CREATE TABLE `Score`(
`s_id` VARCHAR(20),
`c_id`  VARCHAR(20),
`s_score` INT(3),
PRIMARY KEY(`s_id`,`c_id`)
);
```

- 插入学生表测试数据

```mysql
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
```

- 课程表测试数据

```mysql
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');
```

- 教师表测试数据

```mysql
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');
```

- 成绩表测试数据

```mysql
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);
```

### 练习题和sql语句

1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数

```mysql
select a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c 
where a.s_id=b.s_id 
and a.s_id=c.s_id 
and b.c_id='01' 
and c.c_id='02' 
and b.s_score>c.s_score
```

2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数

```mysql
select a.* ,b.s_score as 01_score,c.s_score as 02_score from 
student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL 
join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score
```

3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score >=60;
```

4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
left join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score <60
union
select a.s_id,a.s_name,0 as avg_score from 
student a 
where a.s_id not in (
select distinct s_id from score);
```

5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩

```mysql
select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from 
student a 
left join score b on a.s_id=b.s_id
GROUP BY a.s_id,a.s_name;
```

6. 查询"李"姓老师的数量 

```mysql
select count(t_id) from teacher where t_name like '李%';
```

7. 查询学过"张三"老师授课的同学的信息 

```mysql
select a.* from 
student a 
join score b on a.s_id=b.s_id where b.c_id in(
select c_id from course where t_id =(
select t_id from teacher where t_name = '张三'));
```



8. 查询没学过"张三"老师授课的同学的信息 

```mysql
select * from 
    student c 
    where c.s_id not in(
        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(
        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));
```



9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a,score b,score c 
where a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';
```

10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a 
where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')
```

11. 查询没有学全所有课程的同学的信息 

```mysql
--@wendiepei的写法
select s.* from student s 
left join Score s1 on s1.s_id=s.s_id
group by s.s_id having count(s1.c_id)<(select count(*) from course)	
--@k1051785839的写法
select *
from student
where s_id not in(
select s_id from score t1  
group by s_id having count(*) =(select count(distinct c_id)  from course)) 
```

12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 

```mysql
select * from student where s_id in(
select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')
);
```

13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 

```mysql
--@ouyang_1993的写法
SELECT
 Student.*
FROM
 Student
WHERE
 s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (
    #下面的语句是找到'01'同学学习的课程数
    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'
   )
 )
AND s_id NOT IN (
 #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们
 SELECT s_id FROM Score
 WHERE c_id IN(
   #下面的语句是找到‘01’同学没学过的课程
   SELECT DISTINCT c_id FROM Score
   WHERE c_id NOT IN (
     #下面的语句是找出‘01’同学学习的课程
     SELECT c_id FROM Score WHERE s_id = '01'
    )
  ) GROUP BY s_id
) #下面的条件是排除01同学
AND s_id NOT IN ('01')
--@k1051785839的写法
SELECT
 t3.*
FROM
 (
  SELECT
   s_id,
   group_concat(c_id ORDER BY c_id) group1
  FROM
   score
  WHERE
   s_id &lt;> '01'
  GROUP BY
   s_id
 ) t1
INNER JOIN (
 SELECT
  group_concat(c_id ORDER BY c_id) group2
 FROM
  score
 WHERE
  s_id = '01'
 GROUP BY
  s_id
) t2 ON t1.group1 = t2.group2
INNER JOIN student t3 ON t1.s_id = t3.s_id
```

14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 

```mysql
select a.s_name from student a where a.s_id not in (
select s_id from score where c_id = 
(select c_id from course where t_id =(
select t_id from teacher where t_name = '张三')));
```

15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 

```mysql
select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from 
student a 
left join score b on a.s_id = b.s_id
where a.s_id in(
select s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)
GROUP BY a.s_id,a.s_name
```

16. 检索"01"课程分数小于60，按分数降序排列的学生信息

```mysql
select a.*,b.c_id,b.s_score from 
student a,score b 
where a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;
```

17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

```mysql
select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,
(select s_score from score where s_id=a.s_id and c_id='02') as 数学,
(select s_score from score where s_id=a.s_id and c_id='03') as 英语,
round(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;
--@喝完这杯还有一箱的写法
SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, 
MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, 
MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, 
avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC
```

18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

```mysql
select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),
ROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,
ROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,
ROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,
ROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率
from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name
```

19. 按各科成绩进行排序，并显示排名

```mysql
-- mysql没有rank函数
select a.s_id,a.c_id,
        @i:=@i +1 as i保留排名,
        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,
        @score:=a.s_score as score
    from (
        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC
    )a,(select @k:=0,@i:=0,@score:=0)s
--@k1051785839的写法
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank
                FROM score t1 where t1.c_id='01'
                order by t1.s_score desc) t1)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank
                FROM score t1 where t1.c_id='02'
                order by t1.s_score desc) t2)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank
                FROM score t1 where t1.c_id='03'
                order by t1.s_score desc) t3)
```

20. 查询学生的总成绩并进行排名

```mysql
select a.s_id,
@i:=@i+1 as i,
@k:=(case when @score=a.sum_score then @k else @i end) as rank,
@score:=a.sum_score as score
from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,
(select @k:=0,@i:=0,@score:=0)s
```

21. 查询不同老师所教不同课程平均分从高到低显示 

```mysql
select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a
left join score b on a.c_id=b.c_id 
left join teacher c on a.t_id=c.t_id
GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;
```

22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩

```mysql
select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  
ORDER BY a.s_score DESC  
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' 
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3;
```

23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比

```mysql
select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a
left join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,
ROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)b on a.c_id=b.c_id
left join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,
ROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)c on a.c_id=c.c_id
left join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,
ROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)d on a.c_id=d.c_id
left join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,
ROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)e on a.c_id=e.c_id
left join course f on a.c_id = f.c_id
```

24. 查询学生平均成绩及其名次 

```mysql
select a.s_id,
@i:=@i+1 as '不保留空缺排名',
@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',
@avg_score:=avg_s as '平均分'
from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;
```

25. 查询各科成绩前三名的记录

```mysql
-- 1.选出b表比a表成绩大的所有组
-- 2.选出比当前id成绩大的 小于三个的
select a.s_id,a.c_id,a.s_score from score a 
left join score b on a.c_id = b.c_id and a.s_score<b.s_score
group by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3
ORDER BY a.c_id,a.s_score DESC
```

26. 查询每门课程被选修的学生数 

```mysql
select c_id,count(s_id) from score a GROUP BY c_id
```

27. 查询出只有两门课程的全部学生的学号和姓名 

```mysql
select s_id,s_name from student where s_id in(
select s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);
```

28. 查询男生、女生人数 

```mysql
select s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex
```

29. 查询名字中含有"风"字的学生信息

```mysql
select * from student where s_name like '%风%';
```

30. 查询同名同性学生名单，并统计同名人数 		

```mysql
select a.s_name,a.s_sex,count(*) from student a  JOIN 
student b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex
GROUP BY a.s_name,a.s_sex
```

31. 查询1990年出生的学生名单

```mysql
select s_name from student where s_birth like '1990%'
```

32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 

```mysql
select c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC
```

33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 

```mysql
select a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a
left join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85
```

34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 	

```mysql
select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(
select c_id from course where c_name ='数学') and b.s_score<60
```

35. 查询所有学生的课程及分数情况；

```mysql
select a.s_id,a.s_name,
SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',
SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',
SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',
SUM(b.s_score) as  '总分'
from student a left join score b on a.s_id = b.s_id 
left join course c on b.c_id = c.c_id 
GROUP BY a.s_id,a.s_name
```

36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； 

```mysql
select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id
left join student a on a.s_id=c.s_id where c.s_score>=70
```

37. 查询不及格的课程

```mysql
select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id
where a.s_score<60 
```

38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； 

```mysql
select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id
where a.c_id = '01'and a.s_score>80
```

39. 求每门课程的学生人数 

```mysql
select count(*) from score GROUP BY c_id;
```

40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩

```mysql
-- 查询老师id	
select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'
-- 查询最高分（可能有相同分数）
select MAX(s_score) from score where c_id='02'
-- 查询信息
select a.*,b.s_score,b.c_id,c.c_name from student a
LEFT JOIN score b on a.s_id = b.s_id
LEFT JOIN course c on b.c_id=c.c_id
where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')
and b.s_score in (select MAX(s_score) from score where c_id='02')
```

41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 

```mysql
select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score
```

42. 查询每门功成绩最好的前两名 

```mysql
select a.s_id,a.c_id,a.s_score from score a
where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id
```

43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  

```mysql
select c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC
```

44. 检索至少选修两门课程的学生学号 

```mysql
select s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2
```

45. 查询选修了全部课程的学生信息 

```mysql
select * from student where s_id in(		
select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))
```

46. 查询各学生的年龄

```mysql
# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - 
(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age
from student;
```

47. 查询本周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)
select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
	
select WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
```

48. 查询下周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)
```

49. 查询本月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)
```

50. 查询下月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)
```

, summary=MySQL练习题, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 51, 17], updateTime=[2020, 4, 19, 21, 31, 13], isEnable=true, isDeleted=null, version=null, category={id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=3, author=1, title=岁的法国士大夫, content=3123123123, summary=123124312414, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2019, 6, 17, 23, 48, 4], updateTime=[2020, 4, 17, 23, 48, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 77(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":2},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:31:59.233 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:32:05.052 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-19 21:32:05.052 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/details/1251780392676016129
2020-04-19 21:32:05.053 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:32:05.053 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:32:05.053 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-19 21:32:05.053 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:32:05.055 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:32:05.055 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 21:32:05.055 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:32:05.055 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.read
2020-04-19 21:32:05.056 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-19 21:32:05.058 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-19 21:32:05.056 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:32:05.055 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:32:05.063 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:05.063 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:05.065 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:05.065 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:32:05.067 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 21:32:05.067 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:05.068 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:05.070 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:05.070 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:05.070 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:05.072 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:05.072 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:05.072 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:05.073 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:05.074 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:05.074 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:05.075 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:05.076 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:05.076 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:05.077 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:32:05.078 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==>  Preparing: UPDATE article SET views = views + 1 WHERE id = ?; 
2020-04-19 21:32:05.078 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:05.078 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 21:32:05.079 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 2
2020-04-19 21:32:05.080 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -<==    Updates: 1
2020-04-19 21:32:05.079 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：27
2020-04-19 21:32:05.081 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"测试","id":1},"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","likeCount":0,"tagList":[{"id":2,"name":"java"}],"title":"test"},{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-19 21:32:05.082 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：30
2020-04-19 21:32:05.083 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:32:05.083 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":2},"msg":"操作成功"}
2020-04-19 21:32:05.084 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$61b269cc.getLoginInfo(<generated>)
(String), GET(String), 27(Long), {"code":20000,"data":[{"category":{"categoryName":"测试","id":1},"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","likeCount":0,"tagList":[{"id":2,"name":"java"}],"title":"test"},{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:32:05.085 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:32:05.086 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:32:05.086 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/details/1251780392676016129(String), [1251780392676016129](String), 1(Integer), GET(String), 30(Long), {"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:32:05.062 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:32:05.089 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.listTag
2020-04-19 21:32:05.090 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:32:05.090 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:32:05.092 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag 
2020-04-19 21:32:05.094 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 21:32:05.095 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -<==      Total: 7
2020-04-19 21:32:05.096 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：41
2020-04-19 21:32:05.097 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},{"id":4,"isDeleted":false,"isEnable":true,"name":"javascript"},{"id":5,"isDeleted":false,"isEnable":true,"name":"Python"},{"id":6,"isDeleted":false,"isEnable":true,"name":"vue"},{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"}],"msg":"操作成功"}
2020-04-19 21:32:05.098 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:32:05.099 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [](String), 1(Integer), GET(String), 41(Long), {"code":20000,"data":[{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},{"id":4,"isDeleted":false,"isEnable":true,"name":"javascript"},{"id":5,"isDeleted":false,"isEnable":true,"name":"Python"},{"id":6,"isDeleted":false,"isEnable":true,"name":"vue"},{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:32:05.101 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:32:05.350 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-19 21:32:05.350 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:32:05.351 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:32:05.351 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-19 21:32:05.351 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:32:05.360 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-19 21:32:05.361 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 21:32:05.363 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-19 21:32:05.364 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-19 21:32:05.366 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-19 21:32:05.367 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:32:05.367 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:32:05.369 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:32:18.214 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:32:18.215 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:32:18.215 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:32:18.215 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:32:18.215 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:32:18.221 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 21:32:18.222 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 21:32:18.224 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 21:32:18.224 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 21:32:18.226 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:18.226 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:32:18.227 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.228 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:18.229 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:32:18.229 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.230 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:18.231 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:18.231 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.232 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:18.233 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:18.233 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.234 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:18.235 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:32:18.236 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.236 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:18.237 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:32:18.238 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.239 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:18.240 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:18.241 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.241 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:18.242 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:18.243 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.243 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:18.244 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:32:18.245 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.246 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:18.246 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:32:18.247 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.248 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:18.248 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:32:18.249 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.250 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:18.250 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:32:18.251 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:32:18.252 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:18.252 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:32:18.253 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.254 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:18.254 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:32:18.255 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.257 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:18.257 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:32:18.258 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.259 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:18.259 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:32:18.260 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.260 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:18.260 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:32:18.261 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.262 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:18.262 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:32:18.264 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:32:18.264 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:18.264 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:32:18.265 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.267 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:18.267 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:32:18.267 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:18.269 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:32:18.269 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：55
2020-04-19 21:32:18.270 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 21:32:18.270 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:32:18.271 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 55(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:32:18.277 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:32:20.511 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:32:20.512 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:32:20.512 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:32:20.512 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:32:20.513 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:32:20.514 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 21:32:20.515 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 21:32:20.517 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 21:32:20.518 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 21:32:20.519 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:20.520 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:32:20.522 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.523 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:20.524 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:32:20.526 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.527 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:20.527 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:20.528 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.529 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:20.530 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:20.531 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.532 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:20.532 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:32:20.533 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.534 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:20.535 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:32:20.535 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.536 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:20.537 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:20.538 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.539 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:20.540 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:20.542 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.543 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:20.543 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:32:20.544 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.545 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:20.545 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:32:20.546 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.547 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:20.548 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:32:20.548 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.550 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:20.550 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:32:20.551 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:32:20.552 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:20.552 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:32:20.553 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.555 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:20.556 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:32:20.557 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.558 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:20.559 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:32:20.560 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.561 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:20.561 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:32:20.562 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.563 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:20.563 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:32:20.564 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.565 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:20.566 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:32:20.567 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:32:20.568 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:20.568 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:32:20.569 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.570 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:20.571 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:32:20.573 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:20.574 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:32:20.574 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：63
2020-04-19 21:32:20.575 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 21:32:20.577 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:32:20.578 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 63(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:32:20.582 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:32:22.470 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/details/1251780392676016129
2020-04-19 21:32:22.471 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:32:22.472 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:32:22.472 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.read
2020-04-19 21:32:22.472 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:32:22.474 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:32:22.475 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 21:32:22.476 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:22.476 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:22.477 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:22.478 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:22.478 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:22.479 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:22.480 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:32:22.481 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==>  Preparing: UPDATE article SET views = views + 1 WHERE id = ?; 
2020-04-19 21:32:22.481 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 21:32:22.484 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -<==    Updates: 1
2020-04-19 21:32:22.487 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：17
2020-04-19 21:32:22.488 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":3},"msg":"操作成功"}
2020-04-19 21:32:22.491 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:32:22.492 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/details/1251780392676016129(String), [1251780392676016129](String), 1(Integer), GET(String), 17(Long), {"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":3},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:32:22.495 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:32:26.625 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:32:26.626 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:32:26.626 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:32:26.627 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:32:26.627 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:32:26.629 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 21:32:26.630 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 21:32:26.631 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 21:32:26.632 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 21:32:26.634 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:26.634 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:32:26.635 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.637 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:26.638 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:32:26.639 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.640 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:26.640 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:26.641 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.642 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:26.643 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:26.643 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.644 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:26.645 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:32:26.646 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.647 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:26.647 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:32:26.648 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.648 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:26.649 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:26.650 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.650 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:26.651 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:26.651 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.653 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:26.654 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:32:26.655 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.656 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:26.657 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:32:26.658 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.659 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:26.659 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:32:26.660 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.661 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:26.662 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:32:26.662 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:32:26.663 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:26.664 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:32:26.664 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.665 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:26.666 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:32:26.666 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.667 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:26.668 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:32:26.668 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.670 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:26.671 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:32:26.672 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.673 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:26.674 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:32:26.674 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.675 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:26.676 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:32:26.676 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:32:26.677 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:26.678 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:32:26.678 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.679 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:26.679 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:32:26.680 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:26.681 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:32:26.681 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：56
2020-04-19 21:32:26.682 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 21:32:26.684 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:32:26.685 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 56(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:32:26.688 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:32:50.122 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:32:50.122 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:32:50.122 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:32:50.123 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:32:50.123 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:32:50.125 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 21:32:50.126 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:32:50.127 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, like_count desc LIMIT ?,? 
2020-04-19 21:32:50.127 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:32:50.129 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:50.130 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:32:50.131 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.132 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:50.133 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:32:50.134 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.135 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:50.135 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:32:50.136 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.137 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:50.137 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:32:50.138 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.139 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:50.139 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:32:50.140 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.141 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:50.141 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:32:50.142 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:32:50.143 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:50.144 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:32:50.144 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.146 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:50.146 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:32:50.147 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.149 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:50.150 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:32:50.150 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.152 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:50.152 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:32:50.153 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.154 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:50.155 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:32:50.156 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.157 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:50.157 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:32:50.158 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.159 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:50.160 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:32:50.161 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.162 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:50.162 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:32:50.164 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:32:50.166 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:50.166 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:32:50.167 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.169 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:50.170 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:32:50.171 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.172 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:50.172 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:50.173 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.174 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:50.175 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:50.175 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.176 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:50.177 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:32:50.177 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.178 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:50.179 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:32:50.180 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:50.181 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:32:50.182 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：60
2020-04-19 21:32:50.182 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 21:32:50.183 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:32:50.184 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=10, pageSize=10, totalPage=1, currPage=1, list=[{id=4, author=3, title=这是置顶的文章哇, content=save, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=1128, commentCount=12, likeCount=12, isTop=true, isRecommend=false, createTime=[2019, 6, 14, 12, 21, 50], updateTime=[2020, 4, 19, 20, 1, 15], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251780392676016129, author=xing, title=mysql练习题, content=### 建表

- 学生表

```mysql
CREATE TABLE `Student`(
`s_id` VARCHAR(20),
`s_name` VARCHAR(20) NOT NULL DEFAULT '',
`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
PRIMARY KEY(`s_id`)
);
```

- 课程表

```mysql
CREATE TABLE `Course`(
`c_id`  VARCHAR(20),
`c_name` VARCHAR(20) NOT NULL DEFAULT '',
`t_id` VARCHAR(20) NOT NULL,
PRIMARY KEY(`c_id`)
);
```

- 教师表

```mysql
CREATE TABLE `Teacher`(
`t_id` VARCHAR(20),
`t_name` VARCHAR(20) NOT NULL DEFAULT '',
PRIMARY KEY(`t_id`)
);
```

- 成绩表

```mysql
CREATE TABLE `Score`(
`s_id` VARCHAR(20),
`c_id`  VARCHAR(20),
`s_score` INT(3),
PRIMARY KEY(`s_id`,`c_id`)
);
```

- 插入学生表测试数据

```mysql
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
```

- 课程表测试数据

```mysql
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');
```

- 教师表测试数据

```mysql
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');
```

- 成绩表测试数据

```mysql
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);
```

### 练习题和sql语句

1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数

```mysql
select a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c 
where a.s_id=b.s_id 
and a.s_id=c.s_id 
and b.c_id='01' 
and c.c_id='02' 
and b.s_score>c.s_score
```

2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数

```mysql
select a.* ,b.s_score as 01_score,c.s_score as 02_score from 
student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL 
join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score
```

3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score >=60;
```

4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
left join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score <60
union
select a.s_id,a.s_name,0 as avg_score from 
student a 
where a.s_id not in (
select distinct s_id from score);
```

5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩

```mysql
select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from 
student a 
left join score b on a.s_id=b.s_id
GROUP BY a.s_id,a.s_name;
```

6. 查询"李"姓老师的数量 

```mysql
select count(t_id) from teacher where t_name like '李%';
```

7. 查询学过"张三"老师授课的同学的信息 

```mysql
select a.* from 
student a 
join score b on a.s_id=b.s_id where b.c_id in(
select c_id from course where t_id =(
select t_id from teacher where t_name = '张三'));
```



8. 查询没学过"张三"老师授课的同学的信息 

```mysql
select * from 
    student c 
    where c.s_id not in(
        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(
        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));
```



9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a,score b,score c 
where a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';
```

10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a 
where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')
```

11. 查询没有学全所有课程的同学的信息 

```mysql
--@wendiepei的写法
select s.* from student s 
left join Score s1 on s1.s_id=s.s_id
group by s.s_id having count(s1.c_id)<(select count(*) from course)	
--@k1051785839的写法
select *
from student
where s_id not in(
select s_id from score t1  
group by s_id having count(*) =(select count(distinct c_id)  from course)) 
```

12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 

```mysql
select * from student where s_id in(
select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')
);
```

13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 

```mysql
--@ouyang_1993的写法
SELECT
 Student.*
FROM
 Student
WHERE
 s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (
    #下面的语句是找到'01'同学学习的课程数
    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'
   )
 )
AND s_id NOT IN (
 #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们
 SELECT s_id FROM Score
 WHERE c_id IN(
   #下面的语句是找到‘01’同学没学过的课程
   SELECT DISTINCT c_id FROM Score
   WHERE c_id NOT IN (
     #下面的语句是找出‘01’同学学习的课程
     SELECT c_id FROM Score WHERE s_id = '01'
    )
  ) GROUP BY s_id
) #下面的条件是排除01同学
AND s_id NOT IN ('01')
--@k1051785839的写法
SELECT
 t3.*
FROM
 (
  SELECT
   s_id,
   group_concat(c_id ORDER BY c_id) group1
  FROM
   score
  WHERE
   s_id &lt;> '01'
  GROUP BY
   s_id
 ) t1
INNER JOIN (
 SELECT
  group_concat(c_id ORDER BY c_id) group2
 FROM
  score
 WHERE
  s_id = '01'
 GROUP BY
  s_id
) t2 ON t1.group1 = t2.group2
INNER JOIN student t3 ON t1.s_id = t3.s_id
```

14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 

```mysql
select a.s_name from student a where a.s_id not in (
select s_id from score where c_id = 
(select c_id from course where t_id =(
select t_id from teacher where t_name = '张三')));
```

15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 

```mysql
select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from 
student a 
left join score b on a.s_id = b.s_id
where a.s_id in(
select s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)
GROUP BY a.s_id,a.s_name
```

16. 检索"01"课程分数小于60，按分数降序排列的学生信息

```mysql
select a.*,b.c_id,b.s_score from 
student a,score b 
where a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;
```

17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

```mysql
select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,
(select s_score from score where s_id=a.s_id and c_id='02') as 数学,
(select s_score from score where s_id=a.s_id and c_id='03') as 英语,
round(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;
--@喝完这杯还有一箱的写法
SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, 
MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, 
MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, 
avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC
```

18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

```mysql
select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),
ROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,
ROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,
ROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,
ROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率
from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name
```

19. 按各科成绩进行排序，并显示排名

```mysql
-- mysql没有rank函数
select a.s_id,a.c_id,
        @i:=@i +1 as i保留排名,
        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,
        @score:=a.s_score as score
    from (
        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC
    )a,(select @k:=0,@i:=0,@score:=0)s
--@k1051785839的写法
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank
                FROM score t1 where t1.c_id='01'
                order by t1.s_score desc) t1)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank
                FROM score t1 where t1.c_id='02'
                order by t1.s_score desc) t2)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank
                FROM score t1 where t1.c_id='03'
                order by t1.s_score desc) t3)
```

20. 查询学生的总成绩并进行排名

```mysql
select a.s_id,
@i:=@i+1 as i,
@k:=(case when @score=a.sum_score then @k else @i end) as rank,
@score:=a.sum_score as score
from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,
(select @k:=0,@i:=0,@score:=0)s
```

21. 查询不同老师所教不同课程平均分从高到低显示 

```mysql
select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a
left join score b on a.c_id=b.c_id 
left join teacher c on a.t_id=c.t_id
GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;
```

22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩

```mysql
select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  
ORDER BY a.s_score DESC  
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' 
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3;
```

23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比

```mysql
select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a
left join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,
ROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)b on a.c_id=b.c_id
left join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,
ROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)c on a.c_id=c.c_id
left join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,
ROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)d on a.c_id=d.c_id
left join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,
ROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)e on a.c_id=e.c_id
left join course f on a.c_id = f.c_id
```

24. 查询学生平均成绩及其名次 

```mysql
select a.s_id,
@i:=@i+1 as '不保留空缺排名',
@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',
@avg_score:=avg_s as '平均分'
from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;
```

25. 查询各科成绩前三名的记录

```mysql
-- 1.选出b表比a表成绩大的所有组
-- 2.选出比当前id成绩大的 小于三个的
select a.s_id,a.c_id,a.s_score from score a 
left join score b on a.c_id = b.c_id and a.s_score<b.s_score
group by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3
ORDER BY a.c_id,a.s_score DESC
```

26. 查询每门课程被选修的学生数 

```mysql
select c_id,count(s_id) from score a GROUP BY c_id
```

27. 查询出只有两门课程的全部学生的学号和姓名 

```mysql
select s_id,s_name from student where s_id in(
select s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);
```

28. 查询男生、女生人数 

```mysql
select s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex
```

29. 查询名字中含有"风"字的学生信息

```mysql
select * from student where s_name like '%风%';
```

30. 查询同名同性学生名单，并统计同名人数 		

```mysql
select a.s_name,a.s_sex,count(*) from student a  JOIN 
student b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex
GROUP BY a.s_name,a.s_sex
```

31. 查询1990年出生的学生名单

```mysql
select s_name from student where s_birth like '1990%'
```

32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 

```mysql
select c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC
```

33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 

```mysql
select a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a
left join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85
```

34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 	

```mysql
select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(
select c_id from course where c_name ='数学') and b.s_score<60
```

35. 查询所有学生的课程及分数情况；

```mysql
select a.s_id,a.s_name,
SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',
SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',
SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',
SUM(b.s_score) as  '总分'
from student a left join score b on a.s_id = b.s_id 
left join course c on b.c_id = c.c_id 
GROUP BY a.s_id,a.s_name
```

36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； 

```mysql
select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id
left join student a on a.s_id=c.s_id where c.s_score>=70
```

37. 查询不及格的课程

```mysql
select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id
where a.s_score<60 
```

38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； 

```mysql
select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id
where a.c_id = '01'and a.s_score>80
```

39. 求每门课程的学生人数 

```mysql
select count(*) from score GROUP BY c_id;
```

40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩

```mysql
-- 查询老师id	
select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'
-- 查询最高分（可能有相同分数）
select MAX(s_score) from score where c_id='02'
-- 查询信息
select a.*,b.s_score,b.c_id,c.c_name from student a
LEFT JOIN score b on a.s_id = b.s_id
LEFT JOIN course c on b.c_id=c.c_id
where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')
and b.s_score in (select MAX(s_score) from score where c_id='02')
```

41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 

```mysql
select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score
```

42. 查询每门功成绩最好的前两名 

```mysql
select a.s_id,a.c_id,a.s_score from score a
where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id
```

43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  

```mysql
select c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC
```

44. 检索至少选修两门课程的学生学号 

```mysql
select s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2
```

45. 查询选修了全部课程的学生信息 

```mysql
select * from student where s_id in(		
select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))
```

46. 查询各学生的年龄

```mysql
# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - 
(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age
from student;
```

47. 查询本周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)
select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
	
select WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
```

48. 查询下周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)
```

49. 查询本月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)
```

50. 查询下月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)
```

, summary=MySQL练习题, cover=null, views=4, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 51, 17], updateTime=[2020, 4, 19, 21, 31, 59], isEnable=true, isDeleted=null, version=null, category={id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=asdf, title=asdasd, content=<p>### asdkfhjajlkhdfkashdfki</p>, summary=asdasd, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 36, 25], updateTime=[2020, 4, 19, 20, 20, 22], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251770557519675394, author=test, title=test, content=<blockquote>
<p>yhjktykj</p>
</blockquote>
<p><span style="background-color: #00ff00;">fgdfgfdgd</span></p>
<p>&nbsp;</p>
<pre class="language-java"><code>public class Hello{
public sstatic void main(String args[]){
Sysout.print.out("hello");
}</code></pre>, summary=test, cover=null, views=3, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 12, 12], updateTime=[2020, 4, 19, 15, 14, 35], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 52, 57], updateTime=[2020, 4, 19, 20, 15, 29], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251726075243896833, author=sdfsdfsdfsdf, title=sdfsdf, content=<p>zxcxzc</p>, summary=sdfsdfs, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 15, 26], updateTime=[2020, 4, 19, 20, 17, 43], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725884101074946, author=sdf, title=sdf, content=<p>sdfsdfsdf</p>, summary=sdf, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 14, 41], updateTime=[2020, 4, 19, 12, 14, 41], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的f, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 11, 56], updateTime=[2020, 4, 19, 12, 11, 56], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=126, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=[2020, 3, 23, 15, 55, 15], updateTime=[2020, 4, 14, 11, 58, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=3, author=1, title=岁的法国士大夫, content=3123123123, summary=123124312414, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2019, 6, 17, 23, 48, 4], updateTime=[2020, 4, 17, 23, 48, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}], params={}, sortColumn=like_count)](String), 1(Integer), POST(String), 60(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:32:50.190 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:32:52.898 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:32:52.899 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:32:52.899 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:32:52.899 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:32:52.900 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:32:52.901 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 21:32:52.901 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:32:52.902 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, views desc LIMIT ?,? 
2020-04-19 21:32:52.903 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:32:52.904 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:52.905 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:32:52.906 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.906 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:52.907 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:32:52.907 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.908 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:52.909 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:32:52.910 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.911 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:52.911 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:32:52.912 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:32:52.913 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:52.914 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:32:52.915 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.915 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:52.916 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:32:52.917 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.918 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:52.918 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:32:52.919 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.920 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:52.920 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:32:52.921 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.922 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:52.922 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:52.923 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.923 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:52.924 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:32:52.925 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.926 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:52.927 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:52.928 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.929 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:52.929 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:32:52.931 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.932 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:52.933 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:32:52.933 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.934 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:52.935 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:32:52.935 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:32:52.936 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:52.937 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:32:52.937 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.938 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:52.939 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:32:52.939 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.940 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:52.941 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:32:52.941 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.942 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:52.942 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 21:32:52.943 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.945 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:32:52.945 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:32:52.946 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.947 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:32:52.948 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:32:52.949 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:32:52.949 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:32:52.950 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：52
2020-04-19 21:32:52.950 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 21:32:52.952 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:32:52.953 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=11, pageSize=10, totalPage=2, currPage=1, list=[{id=4, author=3, title=这是置顶的文章哇, content=save, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=1128, commentCount=12, likeCount=12, isTop=true, isRecommend=false, createTime=[2019, 6, 14, 12, 21, 50], updateTime=[2020, 4, 19, 20, 1, 15], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251752142763507713, author=_江南一点雨, title=离职半年了，老东家又发 offer，回不回？, content=```
代码块
```
asdasd, summary=有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？, cover=null, views=12, commentCount=0, likeCount=123, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 59, 1], updateTime=[2020, 4, 19, 21, 29, 41], isEnable=false, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=126, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=[2020, 3, 23, 15, 55, 15], updateTime=[2020, 4, 14, 11, 58, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=3, author=1, title=岁的法国士大夫, content=3123123123, summary=123124312414, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2019, 6, 17, 23, 48, 4], updateTime=[2020, 4, 17, 23, 48, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的f, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 11, 56], updateTime=[2020, 4, 19, 12, 11, 56], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725884101074946, author=sdf, title=sdf, content=<p>sdfsdfsdf</p>, summary=sdf, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 14, 41], updateTime=[2020, 4, 19, 12, 14, 41], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251726075243896833, author=sdfsdfsdfsdf, title=sdfsdf, content=<p>zxcxzc</p>, summary=sdfsdfs, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 15, 26], updateTime=[2020, 4, 19, 20, 17, 43], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 52, 57], updateTime=[2020, 4, 19, 20, 15, 29], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251770557519675394, author=test, title=test, content=<blockquote>
<p>yhjktykj</p>
</blockquote>
<p><span style="background-color: #00ff00;">fgdfgfdgd</span></p>
<p>&nbsp;</p>
<pre class="language-java"><code>public class Hello{
public sstatic void main(String args[]){
Sysout.print.out("hello");
}</code></pre>, summary=test, cover=null, views=3, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 12, 12], updateTime=[2020, 4, 19, 15, 14, 35], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=asdf, title=asdasd, content=<p>### asdkfhjajlkhdfkashdfki</p>, summary=asdasd, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 36, 25], updateTime=[2020, 4, 19, 20, 20, 22], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}], params={}, sortColumn=views)](String), 1(Integer), POST(String), 52(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:32:52.958 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:33:00.208 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 21:33:00.208 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:33:00.209 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:33:00.209 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 21:33:00.210 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:33:00.213 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 21:33:00.213 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:33:00.214 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 21:33:00.215 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:33:00.218 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:33:00.219 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:33:00.220 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.220 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:33:00.221 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 21:33:00.221 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.222 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:33:00.223 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:33:00.223 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.224 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:33:00.224 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 21:33:00.225 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.227 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:33:00.228 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:33:00.229 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.230 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:33:00.231 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 21:33:00.232 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.233 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:33:00.233 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:33:00.234 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.235 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:33:00.235 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 21:33:00.236 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.237 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:33:00.237 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:33:00.238 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.239 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:33:00.239 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:33:00.240 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.241 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:33:00.242 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:33:00.243 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.244 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:33:00.245 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:33:00.246 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.247 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:33:00.247 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:33:00.248 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.249 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:33:00.250 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 21:33:00.251 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:33:00.251 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:33:00.252 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:33:00.252 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.253 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:33:00.254 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 21:33:00.254 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.255 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:33:00.256 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:33:00.256 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.257 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:33:00.258 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 21:33:00.259 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.260 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:33:00.260 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:33:00.261 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:33:00.262 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:33:00.263 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 21:33:00.264 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 21:33:00.264 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:33:00.265 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：57
2020-04-19 21:33:00.265 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 21:33:00.267 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:33:00.269 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=11, pageSize=10, totalPage=2, currPage=1, list=[{id=4, author=3, title=这是置顶的文章哇, content=save, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=1128, commentCount=12, likeCount=12, isTop=true, isRecommend=false, createTime=[2019, 6, 14, 12, 21, 50], updateTime=[2020, 4, 19, 20, 1, 15], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=126, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=[2020, 3, 23, 15, 55, 15], updateTime=[2020, 4, 14, 11, 58, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251752142763507713, author=_江南一点雨, title=离职半年了，老东家又发 offer，回不回？, content=```
代码块
```
asdasd, summary=有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？, cover=null, views=12, commentCount=0, likeCount=123, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 59, 1], updateTime=[2020, 4, 19, 21, 29, 41], isEnable=false, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=asdf, title=asdasd, content=<p>### asdkfhjajlkhdfkashdfki</p>, summary=asdasd, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 36, 25], updateTime=[2020, 4, 19, 20, 20, 22], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251780392676016129, author=xing, title=mysql练习题, content=### 建表

- 学生表

```mysql
CREATE TABLE `Student`(
`s_id` VARCHAR(20),
`s_name` VARCHAR(20) NOT NULL DEFAULT '',
`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
PRIMARY KEY(`s_id`)
);
```

- 课程表

```mysql
CREATE TABLE `Course`(
`c_id`  VARCHAR(20),
`c_name` VARCHAR(20) NOT NULL DEFAULT '',
`t_id` VARCHAR(20) NOT NULL,
PRIMARY KEY(`c_id`)
);
```

- 教师表

```mysql
CREATE TABLE `Teacher`(
`t_id` VARCHAR(20),
`t_name` VARCHAR(20) NOT NULL DEFAULT '',
PRIMARY KEY(`t_id`)
);
```

- 成绩表

```mysql
CREATE TABLE `Score`(
`s_id` VARCHAR(20),
`c_id`  VARCHAR(20),
`s_score` INT(3),
PRIMARY KEY(`s_id`,`c_id`)
);
```

- 插入学生表测试数据

```mysql
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
```

- 课程表测试数据

```mysql
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');
```

- 教师表测试数据

```mysql
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');
```

- 成绩表测试数据

```mysql
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);
```

### 练习题和sql语句

1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数

```mysql
select a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c 
where a.s_id=b.s_id 
and a.s_id=c.s_id 
and b.c_id='01' 
and c.c_id='02' 
and b.s_score>c.s_score
```

2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数

```mysql
select a.* ,b.s_score as 01_score,c.s_score as 02_score from 
student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL 
join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score
```

3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score >=60;
```

4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
left join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score <60
union
select a.s_id,a.s_name,0 as avg_score from 
student a 
where a.s_id not in (
select distinct s_id from score);
```

5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩

```mysql
select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from 
student a 
left join score b on a.s_id=b.s_id
GROUP BY a.s_id,a.s_name;
```

6. 查询"李"姓老师的数量 

```mysql
select count(t_id) from teacher where t_name like '李%';
```

7. 查询学过"张三"老师授课的同学的信息 

```mysql
select a.* from 
student a 
join score b on a.s_id=b.s_id where b.c_id in(
select c_id from course where t_id =(
select t_id from teacher where t_name = '张三'));
```



8. 查询没学过"张三"老师授课的同学的信息 

```mysql
select * from 
    student c 
    where c.s_id not in(
        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(
        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));
```



9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a,score b,score c 
where a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';
```

10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a 
where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')
```

11. 查询没有学全所有课程的同学的信息 

```mysql
--@wendiepei的写法
select s.* from student s 
left join Score s1 on s1.s_id=s.s_id
group by s.s_id having count(s1.c_id)<(select count(*) from course)	
--@k1051785839的写法
select *
from student
where s_id not in(
select s_id from score t1  
group by s_id having count(*) =(select count(distinct c_id)  from course)) 
```

12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 

```mysql
select * from student where s_id in(
select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')
);
```

13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 

```mysql
--@ouyang_1993的写法
SELECT
 Student.*
FROM
 Student
WHERE
 s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (
    #下面的语句是找到'01'同学学习的课程数
    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'
   )
 )
AND s_id NOT IN (
 #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们
 SELECT s_id FROM Score
 WHERE c_id IN(
   #下面的语句是找到‘01’同学没学过的课程
   SELECT DISTINCT c_id FROM Score
   WHERE c_id NOT IN (
     #下面的语句是找出‘01’同学学习的课程
     SELECT c_id FROM Score WHERE s_id = '01'
    )
  ) GROUP BY s_id
) #下面的条件是排除01同学
AND s_id NOT IN ('01')
--@k1051785839的写法
SELECT
 t3.*
FROM
 (
  SELECT
   s_id,
   group_concat(c_id ORDER BY c_id) group1
  FROM
   score
  WHERE
   s_id &lt;> '01'
  GROUP BY
   s_id
 ) t1
INNER JOIN (
 SELECT
  group_concat(c_id ORDER BY c_id) group2
 FROM
  score
 WHERE
  s_id = '01'
 GROUP BY
  s_id
) t2 ON t1.group1 = t2.group2
INNER JOIN student t3 ON t1.s_id = t3.s_id
```

14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 

```mysql
select a.s_name from student a where a.s_id not in (
select s_id from score where c_id = 
(select c_id from course where t_id =(
select t_id from teacher where t_name = '张三')));
```

15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 

```mysql
select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from 
student a 
left join score b on a.s_id = b.s_id
where a.s_id in(
select s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)
GROUP BY a.s_id,a.s_name
```

16. 检索"01"课程分数小于60，按分数降序排列的学生信息

```mysql
select a.*,b.c_id,b.s_score from 
student a,score b 
where a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;
```

17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

```mysql
select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,
(select s_score from score where s_id=a.s_id and c_id='02') as 数学,
(select s_score from score where s_id=a.s_id and c_id='03') as 英语,
round(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;
--@喝完这杯还有一箱的写法
SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, 
MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, 
MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, 
avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC
```

18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

```mysql
select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),
ROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,
ROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,
ROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,
ROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率
from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name
```

19. 按各科成绩进行排序，并显示排名

```mysql
-- mysql没有rank函数
select a.s_id,a.c_id,
        @i:=@i +1 as i保留排名,
        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,
        @score:=a.s_score as score
    from (
        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC
    )a,(select @k:=0,@i:=0,@score:=0)s
--@k1051785839的写法
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank
                FROM score t1 where t1.c_id='01'
                order by t1.s_score desc) t1)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank
                FROM score t1 where t1.c_id='02'
                order by t1.s_score desc) t2)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank
                FROM score t1 where t1.c_id='03'
                order by t1.s_score desc) t3)
```

20. 查询学生的总成绩并进行排名

```mysql
select a.s_id,
@i:=@i+1 as i,
@k:=(case when @score=a.sum_score then @k else @i end) as rank,
@score:=a.sum_score as score
from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,
(select @k:=0,@i:=0,@score:=0)s
```

21. 查询不同老师所教不同课程平均分从高到低显示 

```mysql
select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a
left join score b on a.c_id=b.c_id 
left join teacher c on a.t_id=c.t_id
GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;
```

22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩

```mysql
select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  
ORDER BY a.s_score DESC  
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' 
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3;
```

23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比

```mysql
select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a
left join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,
ROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)b on a.c_id=b.c_id
left join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,
ROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)c on a.c_id=c.c_id
left join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,
ROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)d on a.c_id=d.c_id
left join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,
ROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)e on a.c_id=e.c_id
left join course f on a.c_id = f.c_id
```

24. 查询学生平均成绩及其名次 

```mysql
select a.s_id,
@i:=@i+1 as '不保留空缺排名',
@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',
@avg_score:=avg_s as '平均分'
from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;
```

25. 查询各科成绩前三名的记录

```mysql
-- 1.选出b表比a表成绩大的所有组
-- 2.选出比当前id成绩大的 小于三个的
select a.s_id,a.c_id,a.s_score from score a 
left join score b on a.c_id = b.c_id and a.s_score<b.s_score
group by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3
ORDER BY a.c_id,a.s_score DESC
```

26. 查询每门课程被选修的学生数 

```mysql
select c_id,count(s_id) from score a GROUP BY c_id
```

27. 查询出只有两门课程的全部学生的学号和姓名 

```mysql
select s_id,s_name from student where s_id in(
select s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);
```

28. 查询男生、女生人数 

```mysql
select s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex
```

29. 查询名字中含有"风"字的学生信息

```mysql
select * from student where s_name like '%风%';
```

30. 查询同名同性学生名单，并统计同名人数 		

```mysql
select a.s_name,a.s_sex,count(*) from student a  JOIN 
student b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex
GROUP BY a.s_name,a.s_sex
```

31. 查询1990年出生的学生名单

```mysql
select s_name from student where s_birth like '1990%'
```

32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 

```mysql
select c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC
```

33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 

```mysql
select a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a
left join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85
```

34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 	

```mysql
select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(
select c_id from course where c_name ='数学') and b.s_score<60
```

35. 查询所有学生的课程及分数情况；

```mysql
select a.s_id,a.s_name,
SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',
SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',
SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',
SUM(b.s_score) as  '总分'
from student a left join score b on a.s_id = b.s_id 
left join course c on b.c_id = c.c_id 
GROUP BY a.s_id,a.s_name
```

36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； 

```mysql
select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id
left join student a on a.s_id=c.s_id where c.s_score>=70
```

37. 查询不及格的课程

```mysql
select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id
where a.s_score<60 
```

38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； 

```mysql
select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id
where a.c_id = '01'and a.s_score>80
```

39. 求每门课程的学生人数 

```mysql
select count(*) from score GROUP BY c_id;
```

40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩

```mysql
-- 查询老师id	
select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'
-- 查询最高分（可能有相同分数）
select MAX(s_score) from score where c_id='02'
-- 查询信息
select a.*,b.s_score,b.c_id,c.c_name from student a
LEFT JOIN score b on a.s_id = b.s_id
LEFT JOIN course c on b.c_id=c.c_id
where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')
and b.s_score in (select MAX(s_score) from score where c_id='02')
```

41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 

```mysql
select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score
```

42. 查询每门功成绩最好的前两名 

```mysql
select a.s_id,a.c_id,a.s_score from score a
where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id
```

43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  

```mysql
select c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC
```

44. 检索至少选修两门课程的学生学号 

```mysql
select s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2
```

45. 查询选修了全部课程的学生信息 

```mysql
select * from student where s_id in(		
select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))
```

46. 查询各学生的年龄

```mysql
# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - 
(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age
from student;
```

47. 查询本周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)
select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
	
select WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
```

48. 查询下周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)
```

49. 查询本月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)
```

50. 查询下月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)
```

, summary=MySQL练习题, cover=null, views=4, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 51, 17], updateTime=[2020, 4, 19, 21, 31, 59], isEnable=true, isDeleted=null, version=null, category={id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251770557519675394, author=test, title=test, content=<blockquote>
<p>yhjktykj</p>
</blockquote>
<p><span style="background-color: #00ff00;">fgdfgfdgd</span></p>
<p>&nbsp;</p>
<pre class="language-java"><code>public class Hello{
public sstatic void main(String args[]){
Sysout.print.out("hello");
}</code></pre>, summary=test, cover=null, views=3, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 12, 12], updateTime=[2020, 4, 19, 15, 14, 35], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251726075243896833, author=sdfsdfsdfsdf, title=sdfsdf, content=<p>zxcxzc</p>, summary=sdfsdfs, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 15, 26], updateTime=[2020, 4, 19, 20, 17, 43], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 52, 57], updateTime=[2020, 4, 19, 20, 15, 29], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=3, author=1, title=岁的法国士大夫, content=3123123123, summary=123124312414, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2019, 6, 17, 23, 48, 4], updateTime=[2020, 4, 17, 23, 48, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的f, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 11, 56], updateTime=[2020, 4, 19, 12, 11, 56], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}], params={}, sortColumn=create_time)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$61b269cc.getLoginInfo(<generated>)
(String), POST(String), 57(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:33:00.275 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:33:12.941 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 21:33:12.942 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:33:12.943 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:33:12.943 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 21:33:12.943 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:33:12.944 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 21:33:12.944 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 21:33:12.945 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 21:33:12.946 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-19 21:33:12.946 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 21:33:12.947 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:33:12.947 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:33:12.951 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:35:13.279 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251752142763507713
2020-04-19 21:35:13.279 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:35:13.280 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:35:13.280 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:35:13.280 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:35:13.281 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:35:13.282 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-19 21:35:13.283 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:35:13.284 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:35:13.285 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:35:13.286 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:35:13.287 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 21:35:13.288 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:35:13.289 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:35:13.289 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-19 21:35:13.290 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},"msg":"操作成功"}
2020-04-19 21:35:13.291 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:35:13.291 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251752142763507713(String), [1251752142763507713](String), 1(Integer), GET(String), 10(Long), {"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:35:13.296 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:35:26.224 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251750614375907330
2020-04-19 21:35:26.225 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:35:26.225 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:35:26.226 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 21:35:26.226 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:35:26.226 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 21:35:26.227 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251750614375907330(String)
2020-04-19 21:35:26.228 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 21:35:26.229 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:35:26.230 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:35:26.231 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 21:35:26.231 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 21:35:26.232 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 21:35:26.233 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 21:35:26.233 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 21:35:26.234 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},"msg":"操作成功"}
2020-04-19 21:35:26.235 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:35:26.236 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251750614375907330(String), [1251750614375907330](String), 1(Integer), GET(String), 9(Long), {"code":20000,"data":{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:35:26.240 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:35:42.790 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 21:35:42.791 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:35:42.791 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:35:42.792 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 21:35:42.792 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:35:42.793 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-19 21:35:42.793 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 21:35:42.794 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:35:42.795 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:35:42.799 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:35:43.466 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/log/list
2020-04-19 21:35:43.467 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 21:35:43.467 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 21:35:43.467 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.LogController.getByPage
2020-04-19 21:35:43.468 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 21:35:43.473 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM sys_log 
2020-04-19 21:35:43.475 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 21:35:43.478 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT id,url,params,status,message,method,used_time,result,ip,create_time FROM sys_log LIMIT ?,? 
2020-04-19 21:35:43.479 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 21:35:43.481 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 21:35:43.481 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：15
2020-04-19 21:35:43.484 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"createTime":"2020-04-18 21:17:28","id":1,"ip":"0:0:0:0:0:0:0:1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":442},{"createTime":"2020-04-18 21:38:28","id":2,"ip":"127.0.0.1","method":"POST","params":"[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)]","result":"{\"code\":20000,\"data\":{\"token\":\"8EC8B4B799355BF59D52E087801AD843\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/user/login","usedTime":64},{"createTime":"2020-04-18 21:38:28","id":3,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:28","id":4,"ip":"127.0.0.1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":78},{"createTime":"2020-04-18 21:38:29","id":5,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":31},{"createTime":"2020-04-18 21:38:29","id":6,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":42},{"createTime":"2020-04-18 21:38:31","id":7,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:35","id":8,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":3},{"createTime":"2020-04-18 21:38:35","id":9,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":7},{"createTime":"2020-04-18 21:38:36","id":10,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":6}],"pageSize":10,"params":{},"totalCount":1239,"totalPage":124},"msg":"操作成功"}
2020-04-19 21:35:43.485 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:35:43.486 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /log/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 15(Long), {"code":20000,"data":{"currPage":1,"list":[{"createTime":"2020-04-18 21:17:28","id":1,"ip":"0:0:0:0:0:0:0:1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":442},{"createTime":"2020-04-18 21:38:28","id":2,"ip":"127.0.0.1","method":"POST","params":"[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)]","result":"{\"code\":20000,\"data\":{\"token\":\"8EC8B4B799355BF59D52E087801AD843\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/user/login","usedTime":64},{"createTime":"2020-04-18 21:38:28","id":3,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:28","id":4,"ip":"127.0.0.1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":78},{"createTime":"2020-04-18 21:38:29","id":5,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":31},{"createTime":"2020-04-18 21:38:29","id":6,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":42},{"createTime":"2020-04-18 21:38:31","id":7,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:35","id":8,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":3},{"createTime":"2020-04-18 21:38:35","id":9,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":7},{"createTime":"2020-04-18 21:38:36","id":10,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":6}],"pageSize":10,"params":{},"totalCount":1239,"totalPage":124},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 21:35:43.489 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:58:56.021 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 21:58:56.022 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 21:58:56.022 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 21:58:56.040 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.listTag
2020-04-19 21:58:56.041 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 21:58:56.047 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag 
2020-04-19 21:58:56.048 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 21:58:56.050 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.selectList.debug:143 -<==      Total: 7
2020-04-19 21:58:56.051 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：30
2020-04-19 21:58:56.051 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},{"id":4,"isDeleted":false,"isEnable":true,"name":"javascript"},{"id":5,"isDeleted":false,"isEnable":true,"name":"Python"},{"id":6,"isDeleted":false,"isEnable":true,"name":"vue"},{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"}],"msg":"操作成功"}
2020-04-19 21:58:56.052 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 21:58:56.053 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [](String), 1(Integer), GET(String), 30(Long), {"code":20000,"data":[{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},{"id":4,"isDeleted":false,"isEnable":true,"name":"javascript"},{"id":5,"isDeleted":false,"isEnable":true,"name":"Python"},{"id":6,"isDeleted":false,"isEnable":true,"name":"vue"},{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"}],"msg":"操作成功"}(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 21:58:56.056 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 21:59:49.557 WARN  [http-nio-8088-exec-8]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported]
2020-04-19 22:00:24.250 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 22:00:25.130 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 14132 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 22:00:25.131 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 22:00:25.132 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 22:00:25.335 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 22:00:26.638 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$ec839658] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:26.784 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:26.796 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$cba25db4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:26.803 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:26.813 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:26.827 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$f30d4b7b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:26.839 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$4129f9c9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:26.885 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:26.967 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:26.974 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:27.199 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 22:00:27.757 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:27.764 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:27.771 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:27.775 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:27.787 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:27.825 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:28.106 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:28.130 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:00:28.396 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 22:00:28.406 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 22:00:28.406 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 22:00:28.407 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 22:00:28.541 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 22:00:28.541 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3269 ms
2020-04-19 22:00:29.967 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 22:00:30.347 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 22:00:30.361 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 22:00:30.407 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 22:00:30.596 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 22:00:30.603 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 22:00:30.611 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 22:00:30.623 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 22:00:30.637 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 22:00:30.644 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 22:00:30.674 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 22:00:30.693 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 22:00:30.696 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.341 seconds (JVM running for 8.167)
2020-04-19 22:00:44.107 INFO  [http-nio-8088-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 22:00:44.107 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 22:00:44.121 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 14 ms
2020-04-19 22:00:44.202 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:00:44.202 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:00:44.203 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 22:00:44.205 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:00:44.205 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 22:00:44.291 INFO  [http-nio-8088-exec-2]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 22:00:44.480 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:00:44.495 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:00:44.507 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:00:44.508 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:00:44.515 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:00:44.516 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:00:44.517 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:00:44.534 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:00:44.535 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 0(Integer), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property 'article' of 'class cn.codexing.blog.vo.TagVO' with value '[null]' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'article' in 'class cn.codexing.blog.vo.TagVO'
	at cn.codexing.blog.service.impl.TagServiceImpl.listTagVo(TagServiceImpl.java:33)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$2c56b491.listTagVo(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$b27b573f.listTagVo(<generated>)
	at cn.codexing.blog.controller.TagController.getByPage(TagController.java:55)
	at cn.codexing.blog.controller.TagController$$FastClassBySpringCGLIB$$dd019bbc.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.TagController$$EnhancerBySpringCGLIB$$502f1ad2.getByPage(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: Could not set property 'article' of 'class cn.codexing.blog.vo.TagVO' with value '[null]' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'article' in 'class cn.codexing.blog.vo.TagVO'
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'article' in 'class cn.codexing.blog.vo.TagVO'
(String), POST(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 22:00:44.538 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:00:44.551 ERROR [http-nio-8088-exec-2]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property 'article' of 'class cn.codexing.blog.vo.TagVO' with value '[null]' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'article' in 'class cn.codexing.blog.vo.TagVO'] with root cause
org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'article' in 'class cn.codexing.blog.vo.TagVO'
	at org.apache.ibatis.reflection.Reflector.getSetInvoker(Reflector.java:365)
	at org.apache.ibatis.reflection.MetaClass.getSetInvoker(MetaClass.java:167)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.setBeanProperty(BeanWrapper.java:177)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.set(BeanWrapper.java:59)
	at org.apache.ibatis.reflection.MetaObject.setValue(MetaObject.java:140)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyPropertyMappings(DefaultResultSetHandler.java:455)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:404)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy164.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy163.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy95.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:177)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:78)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy115.getByPage(Unknown Source)
	at cn.codexing.blog.service.impl.TagServiceImpl.listTagVo(TagServiceImpl.java:33)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$2c56b491.listTagVo(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$b27b573f.listTagVo(<generated>)
	at cn.codexing.blog.controller.TagController.getByPage(TagController.java:55)
	at cn.codexing.blog.controller.TagController$$FastClassBySpringCGLIB$$dd019bbc.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.TagController$$EnhancerBySpringCGLIB$$502f1ad2.getByPage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 22:02:03.355 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 22:02:04.038 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 10352 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 22:02:04.038 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 22:02:04.040 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 22:02:04.362 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 22:02:05.707 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$ec839658] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:05.856 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:05.871 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$cba25db4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:05.877 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:05.888 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:05.899 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$f30d4b7b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:05.905 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$4129f9c9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:05.942 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:06.012 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:06.019 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:06.221 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 22:02:06.768 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:06.774 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:06.780 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:06.785 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:06.801 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:06.839 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:07.112 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:07.135 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:02:07.432 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 22:02:07.440 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 22:02:07.441 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 22:02:07.441 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 22:02:07.529 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 22:02:07.530 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3426 ms
2020-04-19 22:02:08.981 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 22:02:09.384 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 22:02:09.397 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 22:02:09.426 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 22:02:09.631 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 22:02:09.641 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 22:02:09.647 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 22:02:09.660 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 22:02:09.677 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 22:02:09.684 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 22:02:09.719 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 22:02:09.740 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 22:02:09.743 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.329 seconds (JVM running for 7.47)
2020-04-19 22:02:16.345 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 22:02:16.345 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 22:02:16.360 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 14 ms
2020-04-19 22:02:16.444 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:02:16.445 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:02:16.445 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 22:02:16.447 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:02:16.448 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 22:02:16.539 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 22:02:16.721 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:02:16.735 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:02:16.746 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:02:16.748 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:02:16.754 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:02:16.755 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:02:16.758 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:02:16.760 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:02:16.761 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:02:16.762 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:02:16.763 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:02:16.764 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:02:16.765 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:02:16.768 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:02:16.768 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:02:16.769 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:02:16.771 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:02:16.771 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:02:16.772 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:02:16.774 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:02:16.774 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:02:16.776 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:02:16.778 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:02:16.779 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:02:16.781 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:02:16.782 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:02:16.784 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：340
2020-04-19 22:02:16.850 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"id":1,"isEnable":true,"name":"spring"},{"id":2,"isEnable":true,"name":"java"},{"id":3,"isEnable":true,"name":"mysql"},{"id":4,"isEnable":true,"name":"javascript"},{"id":5,"isEnable":true,"name":"Python"},{"id":6,"isEnable":true,"name":"vue"},{"id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:02:16.859 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:02:16.860 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 1(Integer), POST(String), 340(Long), {"code":20000,"data":{"currPage":1,"list":[{"id":1,"isEnable":true,"name":"spring"},{"id":2,"isEnable":true,"name":"java"},{"id":3,"isEnable":true,"name":"mysql"},{"id":4,"isEnable":true,"name":"javascript"},{"id":5,"isEnable":true,"name":"Python"},{"id":6,"isEnable":true,"name":"vue"},{"id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 22:02:16.864 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:04:49.545 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 22:04:50.292 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 17372 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 22:04:50.293 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 22:04:50.293 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 22:04:50.561 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 22:04:51.873 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$41f00020] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.027 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.044 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$210ec77c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.050 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.059 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.069 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$4879b543] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.077 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$96966391] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.112 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.176 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.183 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.396 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 22:04:52.926 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.933 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.940 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.944 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.957 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:52.995 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:53.266 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:53.287 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:04:53.578 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 22:04:53.586 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 22:04:53.587 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 22:04:53.587 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 22:04:53.680 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 22:04:53.680 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3326 ms
2020-04-19 22:04:55.218 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 22:04:55.605 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 22:04:55.620 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 22:04:55.654 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 22:04:55.867 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 22:04:55.876 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 22:04:55.882 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 22:04:55.893 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 22:04:55.910 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 22:04:55.918 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 22:04:55.950 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 22:04:55.970 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 22:04:55.972 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.353 seconds (JVM running for 7.522)
2020-04-19 22:04:59.284 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 22:04:59.284 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 22:04:59.297 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 12 ms
2020-04-19 22:04:59.384 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:04:59.384 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:04:59.385 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 22:04:59.387 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:04:59.387 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 22:04:59.477 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 22:04:59.677 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:04:59.693 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:04:59.704 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:04:59.706 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:04:59.711 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:04:59.712 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:04:59.717 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:04:59.719 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:04:59.719 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:04:59.720 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:04:59.721 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:04:59.722 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:04:59.724 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:04:59.725 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:04:59.726 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:04:59.727 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:04:59.728 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:04:59.729 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:04:59.730 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:04:59.733 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:04:59.734 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:04:59.735 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:04:59.736 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:04:59.737 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:04:59.738 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:04:59.739 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:04:59.741 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：357
2020-04-19 22:04:59.801 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"id":1,"isEnable":true,"name":"spring"},{"id":2,"isEnable":true,"name":"java"},{"id":3,"isEnable":true,"name":"mysql"},{"id":4,"isEnable":true,"name":"javascript"},{"id":5,"isEnable":true,"name":"Python"},{"id":6,"isEnable":true,"name":"vue"},{"id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:04:59.810 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:04:59.812 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 1(Integer), POST(String), 357(Long), {"code":20000,"data":{"currPage":1,"list":[{"id":1,"isEnable":true,"name":"spring"},{"id":2,"isEnable":true,"name":"java"},{"id":3,"isEnable":true,"name":"mysql"},{"id":4,"isEnable":true,"name":"javascript"},{"id":5,"isEnable":true,"name":"Python"},{"id":6,"isEnable":true,"name":"vue"},{"id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 22:04:59.816 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:08:09.186 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 22:08:09.911 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 13876 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 22:08:09.912 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 22:08:09.913 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 22:08:10.162 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 22:08:11.454 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$fcd5bbba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:11.596 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:11.608 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$dbf48316] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:11.613 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:11.625 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:11.638 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$35f70dd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:11.646 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$517c1f2b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:11.687 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:11.771 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:11.777 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:11.971 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 22:08:12.509 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:12.515 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:12.522 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:12.525 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:12.538 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:12.576 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:12.860 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:12.880 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:08:13.152 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 22:08:13.160 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 22:08:13.161 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 22:08:13.161 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 22:08:13.251 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 22:08:13.252 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3247 ms
2020-04-19 22:08:14.618 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 22:08:14.999 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 22:08:15.016 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 22:08:15.044 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 22:08:15.240 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 22:08:15.246 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 22:08:15.252 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 22:08:15.265 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 22:08:15.282 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 22:08:15.288 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 22:08:15.321 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 22:08:15.340 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 22:08:15.343 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.052 seconds (JVM running for 7.309)
2020-04-19 22:08:24.176 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 22:08:24.176 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 22:08:24.191 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 15 ms
2020-04-19 22:08:24.272 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:08:24.272 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:08:24.273 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 22:08:24.275 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:08:24.275 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 22:08:24.367 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 22:08:24.540 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:08:24.554 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:08:24.566 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:08:24.568 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:08:24.587 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:08:24.589 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 0(Integer), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column 'tagId' from result set.  Cause: org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column 'tagId' from result set.  Cause: java.sql.SQLException: Column 'tagId' not found.
	at cn.codexing.blog.service.impl.TagServiceImpl.listTagVo(TagServiceImpl.java:33)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$3ba265c7.listTagVo(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$c1c70875.listTagVo(<generated>)
	at cn.codexing.blog.controller.TagController.getByPage(TagController.java:55)
	at cn.codexing.blog.controller.TagController$$FastClassBySpringCGLIB$$dd019bbc.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.TagController$$EnhancerBySpringCGLIB$$43f7dc52.getByPage(<generated>)
Caused by: org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column 'tagId' from result set.  Cause: org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column 'tagId' from result set.  Cause: java.sql.SQLException: Column 'tagId' not found.
Caused by: org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column 'tagId' from result set.  Cause: java.sql.SQLException: Column 'tagId' not found.
Caused by: java.sql.SQLException: Column 'tagId' not found.
(String), POST(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 22:08:24.593 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:08:24.606 ERROR [http-nio-8088-exec-1]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column 'tagId' from result set.  Cause: org.apache.ibatis.executor.result.ResultMapException: Error attempting to get column 'tagId' from result set.  Cause: java.sql.SQLException: Column 'tagId' not found.] with root cause
java.sql.SQLException: Column 'tagId' not found.
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:965)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:898)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:887)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:861)
	at com.mysql.jdbc.ResultSetImpl.findColumn(ResultSetImpl.java:1078)
	at com.mysql.jdbc.ResultSetImpl.getObject(ResultSetImpl.java:4696)
	at com.alibaba.druid.pool.DruidPooledResultSet.getObject(DruidPooledResultSet.java:448)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.ResultSetLogger.invoke(ResultSetLogger.java:69)
	at com.sun.proxy.$Proxy167.getObject(Unknown Source)
	at org.apache.ibatis.type.ObjectTypeHandler.getNullableResult(ObjectTypeHandler.java:37)
	at org.apache.ibatis.type.BaseTypeHandler.getResult(BaseTypeHandler.java:81)
	at org.apache.ibatis.type.UnknownTypeHandler.getNullableResult(UnknownTypeHandler.java:52)
	at org.apache.ibatis.type.BaseTypeHandler.getResult(BaseTypeHandler.java:81)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.prepareCompositeKeyParameter(DefaultResultSetHandler.java:792)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.prepareParameterForNestedQuery(DefaultResultSetHandler.java:769)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getNestedQueryMappingValue(DefaultResultSetHandler.java:745)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getPropertyMappingValue(DefaultResultSetHandler.java:465)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyPropertyMappings(DefaultResultSetHandler.java:441)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:404)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy164.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy163.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy95.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:177)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:78)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy115.getByPage(Unknown Source)
	at cn.codexing.blog.service.impl.TagServiceImpl.listTagVo(TagServiceImpl.java:33)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$3ba265c7.listTagVo(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$c1c70875.listTagVo(<generated>)
	at cn.codexing.blog.controller.TagController.getByPage(TagController.java:55)
	at cn.codexing.blog.controller.TagController$$FastClassBySpringCGLIB$$dd019bbc.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.TagController$$EnhancerBySpringCGLIB$$43f7dc52.getByPage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 22:09:18.973 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 22:09:19.744 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 17700 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 22:09:19.746 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 22:09:19.747 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 22:09:19.972 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 22:09:21.176 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$559c2525] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:21.324 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:21.338 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$34baec81] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:21.343 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:21.353 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:21.363 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$5c25da48] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:21.370 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$aa428896] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:21.404 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:21.479 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:21.486 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:21.682 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 22:09:22.257 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:22.264 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:22.274 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:22.280 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:22.295 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:22.346 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:22.650 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:22.673 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:09:22.962 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 22:09:22.971 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 22:09:22.972 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 22:09:22.972 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 22:09:23.079 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 22:09:23.080 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3156 ms
2020-04-19 22:09:24.511 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 22:09:24.901 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 22:09:24.915 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 22:09:24.945 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 22:09:25.158 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 22:09:25.166 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 22:09:25.171 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 22:09:25.183 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 22:09:25.200 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 22:09:25.207 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 22:09:25.240 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 22:09:25.261 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 22:09:25.264 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.218 seconds (JVM running for 7.405)
2020-04-19 22:09:37.556 INFO  [http-nio-8088-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 22:09:37.557 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 22:09:37.569 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 12 ms
2020-04-19 22:09:37.650 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:09:37.651 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:09:37.651 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 22:09:37.653 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:09:37.653 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 22:09:37.739 INFO  [http-nio-8088-exec-2]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 22:09:37.920 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:09:37.935 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:09:37.947 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:09:37.948 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:09:37.953 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:09:37.954 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:09:37.956 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:09:37.957 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:09:37.958 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:09:37.959 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:09:37.961 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:09:37.961 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:09:37.963 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:09:37.965 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:09:37.966 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:09:37.967 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:09:37.968 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:09:37.969 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:09:37.970 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:09:37.972 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:09:37.973 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:09:37.974 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:09:37.975 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:09:37.976 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:09:37.977 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:09:37.978 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:09:37.980 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：330
2020-04-19 22:09:38.045 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"id":1,"isEnable":true,"name":"spring"},{"id":2,"isEnable":true,"name":"java"},{"id":3,"isEnable":true,"name":"mysql"},{"id":4,"isEnable":true,"name":"javascript"},{"id":5,"isEnable":true,"name":"Python"},{"id":6,"isEnable":true,"name":"vue"},{"id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:09:38.053 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:09:38.054 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 1(Integer), POST(String), 330(Long), {"code":20000,"data":{"currPage":1,"list":[{"id":1,"isEnable":true,"name":"spring"},{"id":2,"isEnable":true,"name":"java"},{"id":3,"isEnable":true,"name":"mysql"},{"id":4,"isEnable":true,"name":"javascript"},{"id":5,"isEnable":true,"name":"Python"},{"id":6,"isEnable":true,"name":"vue"},{"id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 22:09:38.064 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:10:23.497 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 22:10:24.158 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 4204 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 22:10:24.159 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 22:10:24.160 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 22:10:24.404 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 22:10:25.598 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$baf587d1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:25.750 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:25.765 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$9a144f2d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:25.770 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:25.780 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:25.790 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$c17f3cf4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:25.799 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$f9beb42] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:25.845 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:25.928 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:25.935 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:26.146 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 22:10:26.614 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:26.621 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:26.627 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:26.632 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:26.646 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:26.685 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:27.016 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:27.038 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:10:27.300 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 22:10:27.307 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 22:10:27.308 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 22:10:27.308 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 22:10:27.398 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 22:10:27.398 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3170 ms
2020-04-19 22:10:28.859 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 22:10:29.257 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 22:10:29.275 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 22:10:29.307 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 22:10:29.622 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 22:10:29.635 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 22:10:29.646 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 22:10:29.665 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 22:10:29.688 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 22:10:29.699 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 22:10:29.742 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 22:10:29.769 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 22:10:29.773 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.218 seconds (JVM running for 7.321)
2020-04-19 22:10:41.146 INFO  [http-nio-8088-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 22:10:41.146 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 22:10:41.158 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 11 ms
2020-04-19 22:10:41.246 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:10:41.247 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:10:41.248 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 22:10:41.249 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:10:41.249 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 22:10:41.346 INFO  [http-nio-8088-exec-2]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 22:10:41.539 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:10:41.556 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:10:41.568 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:10:41.569 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:10:41.576 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select id,count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:10:41.577 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:10:41.630 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:10:41.631 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 0(Integer), org.springframework.dao.DataIntegrityViolationException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'id' in field list is ambiguous
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'id' in field list is ambiguous
; Column 'id' in field list is ambiguous; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'id' in field list is ambiguous
	at cn.codexing.blog.service.impl.TagServiceImpl.listTagVo(TagServiceImpl.java:33)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$1ba44e27.listTagVo(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$a1c8f0d5.listTagVo(<generated>)
	at cn.codexing.blog.controller.TagController.getByPage(TagController.java:55)
	at cn.codexing.blog.controller.TagController$$FastClassBySpringCGLIB$$dd019bbc.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.TagController$$EnhancerBySpringCGLIB$$cca64d16.getByPage(<generated>)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'id' in field list is ambiguous
(String), POST(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 22:10:41.646 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:10:41.658 ERROR [http-nio-8088-exec-2]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DataIntegrityViolationException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'id' in field list is ambiguous
### The error may exist in file [E:\2020\myblog2.0\blog-backend\target\classes\mapper\ArticleMapper.xml]
### The error may involve defaultParameterMap
### The error occurred while setting parameters
### SQL: select id,count(*) as articleCount from article a left join article_tag att on a.id=att.article_id          WHERE  att.tag_id = ?                          AND a.is_enable = 1             AND a.is_deleted = 0
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'id' in field list is ambiguous
; Column 'id' in field list is ambiguous; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'id' in field list is ambiguous] with root cause
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Column 'id' in field list is ambiguous
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3978)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3914)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2495)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1903)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1242)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy166.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy164.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at org.apache.ibatis.executor.loader.ResultLoader.selectList(ResultLoader.java:81)
	at org.apache.ibatis.executor.loader.ResultLoader.loadResult(ResultLoader.java:70)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getNestedQueryMappingValue(DefaultResultSetHandler.java:760)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getPropertyMappingValue(DefaultResultSetHandler.java:465)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyPropertyMappings(DefaultResultSetHandler.java:441)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:404)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy164.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy163.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy95.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:177)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:78)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy115.getByPage(Unknown Source)
	at cn.codexing.blog.service.impl.TagServiceImpl.listTagVo(TagServiceImpl.java:33)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$1ba44e27.listTagVo(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$a1c8f0d5.listTagVo(<generated>)
	at cn.codexing.blog.controller.TagController.getByPage(TagController.java:55)
	at cn.codexing.blog.controller.TagController$$FastClassBySpringCGLIB$$dd019bbc.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.TagController$$EnhancerBySpringCGLIB$$cca64d16.getByPage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 22:11:05.936 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 22:11:06.627 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 16976 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 22:11:06.628 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 22:11:06.628 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 22:11:06.907 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 22:11:08.111 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$c8b6db3c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:08.264 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:08.280 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$a7d5a298] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:08.286 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:08.296 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:08.309 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$cf40905f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:08.318 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$1d5d3ead] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:08.353 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:08.423 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:08.431 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:08.636 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 22:11:09.277 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:09.284 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:09.291 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:09.295 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:09.306 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:09.340 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:09.619 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:09.647 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:11:09.927 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 22:11:09.934 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 22:11:09.935 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 22:11:09.936 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 22:11:10.033 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 22:11:10.034 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3291 ms
2020-04-19 22:11:11.464 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 22:11:11.849 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 22:11:11.929 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 22:11:11.956 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 22:11:12.161 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 22:11:12.169 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 22:11:12.174 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 22:11:12.186 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 22:11:12.202 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 22:11:12.209 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 22:11:12.242 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 22:11:12.261 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 22:11:12.264 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.274 seconds (JVM running for 7.433)
2020-04-19 22:11:16.459 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 22:11:16.460 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 22:11:16.474 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 14 ms
2020-04-19 22:11:16.566 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:11:16.567 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:11:16.568 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 22:11:16.569 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:11:16.569 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 22:11:16.667 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 22:11:16.858 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:11:16.874 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:11:16.886 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:11:16.887 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:11:16.892 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select a.id,count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:11:16.893 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:11:16.898 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:11:16.913 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:11:16.914 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 0(Integer), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property 'articleCount' of 'class cn.codexing.blog.vo.TagVO' with value 'Article(id=1, author=null, title=null, content=null, summary=null, cover=null, views=null, commentCount=null, likeCount=null, isTop=null, isRecommend=null, createTime=null, updateTime=null, isEnable=null, isDeleted=null, version=null)' Cause: java.lang.IllegalArgumentException: argument type mismatch
	at cn.codexing.blog.service.impl.TagServiceImpl.listTagVo(TagServiceImpl.java:33)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$b577e3b5.listTagVo(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$3b9c8663.listTagVo(<generated>)
	at cn.codexing.blog.controller.TagController.getByPage(TagController.java:55)
	at cn.codexing.blog.controller.TagController$$FastClassBySpringCGLIB$$dd019bbc.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.TagController$$EnhancerBySpringCGLIB$$c3dea6d5.getByPage(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: Could not set property 'articleCount' of 'class cn.codexing.blog.vo.TagVO' with value 'Article(id=1, author=null, title=null, content=null, summary=null, cover=null, views=null, commentCount=null, likeCount=null, isTop=null, isRecommend=null, createTime=null, updateTime=null, isEnable=null, isDeleted=null, version=null)' Cause: java.lang.IllegalArgumentException: argument type mismatch
Caused by: java.lang.IllegalArgumentException: argument type mismatch
(String), POST(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 22:11:16.922 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:11:16.936 ERROR [http-nio-8088-exec-1]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property 'articleCount' of 'class cn.codexing.blog.vo.TagVO' with value 'Article(id=1, author=null, title=null, content=null, summary=null, cover=null, views=null, commentCount=null, likeCount=null, isTop=null, isRecommend=null, createTime=null, updateTime=null, isEnable=null, isDeleted=null, version=null)' Cause: java.lang.IllegalArgumentException: argument type mismatch] with root cause
java.lang.IllegalArgumentException: argument type mismatch
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.reflection.invoker.MethodInvoker.invoke(MethodInvoker.java:44)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.setBeanProperty(BeanWrapper.java:180)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.set(BeanWrapper.java:59)
	at org.apache.ibatis.reflection.MetaObject.setValue(MetaObject.java:140)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyPropertyMappings(DefaultResultSetHandler.java:455)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:404)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy164.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy163.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy95.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:177)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:78)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy115.getByPage(Unknown Source)
	at cn.codexing.blog.service.impl.TagServiceImpl.listTagVo(TagServiceImpl.java:33)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$b577e3b5.listTagVo(<generated>)
	at cn.codexing.blog.service.impl.TagServiceImpl$$FastClassBySpringCGLIB$$6fa46498.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.TagServiceImpl$$EnhancerBySpringCGLIB$$3b9c8663.listTagVo(<generated>)
	at cn.codexing.blog.controller.TagController.getByPage(TagController.java:55)
	at cn.codexing.blog.controller.TagController$$FastClassBySpringCGLIB$$dd019bbc.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.TagController$$EnhancerBySpringCGLIB$$c3dea6d5.getByPage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 22:12:27.697 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 22:12:28.368 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 8744 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 22:12:28.369 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 22:12:28.369 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 22:12:28.730 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 22:12:29.906 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$baf587d1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:30.061 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:30.074 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$9a144f2d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:30.079 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:30.091 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:30.104 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$c17f3cf4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:30.114 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$f9beb42] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:30.150 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:30.217 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:30.225 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:30.433 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 22:12:30.993 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:31.001 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:31.008 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:31.013 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:31.025 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:31.060 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:31.333 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:31.356 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:12:31.665 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 22:12:31.674 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 22:12:31.675 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 22:12:31.676 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 22:12:31.767 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 22:12:31.768 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3333 ms
2020-04-19 22:12:33.427 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 22:12:33.811 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 22:12:33.824 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 22:12:33.851 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 22:12:34.059 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 22:12:34.067 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 22:12:34.074 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 22:12:34.088 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 22:12:34.106 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 22:12:34.116 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 22:12:34.164 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 22:12:34.186 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 22:12:34.190 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.409 seconds (JVM running for 7.745)
2020-04-19 22:12:39.926 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 22:12:39.926 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 22:12:39.939 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 13 ms
2020-04-19 22:12:40.028 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:12:40.029 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:12:40.029 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 22:12:40.030 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:12:40.030 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 22:12:40.114 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 22:12:40.301 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:12:40.316 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:12:40.328 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:12:40.330 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:12:40.335 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:12:40.336 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:12:40.338 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:12:40.340 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:12:40.341 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:12:40.342 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:12:40.343 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:12:40.344 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:12:40.345 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:12:40.346 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:12:40.347 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:12:40.348 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:12:40.350 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:12:40.351 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:12:40.352 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:12:40.355 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:12:40.355 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:12:40.357 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:12:40.358 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:12:40.359 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:12:40.360 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:12:40.361 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:12:40.362 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：334
2020-04-19 22:12:40.427 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:12:40.435 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:12:40.437 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 1(Integer), POST(String), 334(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 22:12:40.441 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:13:31.741 WARN  [http-nio-8088-exec-3]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:13:31.828 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:13:31.829 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:13:31.829 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:13:31.829 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:13:31.830 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:13:31.846 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:13:31.846 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:13:31.849 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:13:31.850 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-19 22:13:31.853 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:13:31.855 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:13:31.856 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 22(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:13:31.859 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:13:32.039 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/log/list
2020-04-19 22:13:32.039 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:13:32.039 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:13:32.040 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.LogController.getByPage
2020-04-19 22:13:32.040 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:13:32.046 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM sys_log 
2020-04-19 22:13:32.047 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:13:32.052 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT id,url,params,status,message,method,used_time,result,ip,create_time FROM sys_log LIMIT ?,? 
2020-04-19 22:13:32.052 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:13:32.058 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 22:13:32.059 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：20
2020-04-19 22:13:32.067 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"createTime":"2020-04-18 21:17:28","id":1,"ip":"0:0:0:0:0:0:0:1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":442},{"createTime":"2020-04-18 21:38:28","id":2,"ip":"127.0.0.1","method":"POST","params":"[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)]","result":"{\"code\":20000,\"data\":{\"token\":\"8EC8B4B799355BF59D52E087801AD843\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/user/login","usedTime":64},{"createTime":"2020-04-18 21:38:28","id":3,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:28","id":4,"ip":"127.0.0.1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":78},{"createTime":"2020-04-18 21:38:29","id":5,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":31},{"createTime":"2020-04-18 21:38:29","id":6,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":42},{"createTime":"2020-04-18 21:38:31","id":7,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:35","id":8,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":3},{"createTime":"2020-04-18 21:38:35","id":9,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":7},{"createTime":"2020-04-18 21:38:36","id":10,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":6}],"pageSize":10,"params":{},"totalCount":1250,"totalPage":125},"msg":"操作成功"}
2020-04-19 22:13:32.070 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:13:32.094 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /log/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 20(Long), {"code":20000,"data":{"currPage":1,"list":[{"createTime":"2020-04-18 21:17:28","id":1,"ip":"0:0:0:0:0:0:0:1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":442},{"createTime":"2020-04-18 21:38:28","id":2,"ip":"127.0.0.1","method":"POST","params":"[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)]","result":"{\"code\":20000,\"data\":{\"token\":\"8EC8B4B799355BF59D52E087801AD843\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/user/login","usedTime":64},{"createTime":"2020-04-18 21:38:28","id":3,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:28","id":4,"ip":"127.0.0.1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":78},{"createTime":"2020-04-18 21:38:29","id":5,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":31},{"createTime":"2020-04-18 21:38:29","id":6,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":42},{"createTime":"2020-04-18 21:38:31","id":7,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:35","id":8,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":3},{"createTime":"2020-04-18 21:38:35","id":9,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":7},{"createTime":"2020-04-18 21:38:36","id":10,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":6}],"pageSize":10,"params":{},"totalCount":1250,"totalPage":125},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:13:32.098 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:16:12.406 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 22:16:12.407 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:16:12.408 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:16:12.408 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 22:16:12.409 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:16:12.424 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:16:12.426 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 0(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$1940c0e7.getLoginInfo(<generated>)
(String), GET(String), 127.0.0.1(String)
2020-04-19 22:16:12.446 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:16:12.452 ERROR [http-nio-8088-exec-7]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$1940c0e7.getLoginInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 22:16:16.745 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/user/login
2020-04-19 22:16:16.746 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:16:16.746 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:16:16.747 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.sysLogin
2020-04-19 22:16:16.747 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:16:16.749 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==>  Preparing: select username,password from sys_user where username=? 
2020-04-19 22:16:16.750 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==> Parameters: admin(String)
2020-04-19 22:16:16.751 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -<==      Total: 1
2020-04-19 22:16:16.756 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：11
2020-04-19 22:16:16.756 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"token":"2A44012919DC0D6F816E755CB43C6449"},"msg":"操作成功"}
2020-04-19 22:16:16.758 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:16:16.759 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/user/login(String), [SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null, isDeleted=null)](String), 1(Integer), POST(String), 11(Long), {"code":20000,"data":{"token":"2A44012919DC0D6F816E755CB43C6449"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:16:16.764 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:16:16.781 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 22:16:16.781 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:16:16.781 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:16:16.782 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 22:16:16.782 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:16:16.782 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：1
2020-04-19 22:16:16.785 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 22:16:16.786 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:16:16.788 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 1(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:16:16.791 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:16:17.209 WARN  [http-nio-8088-exec-9]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:16:17.212 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:16:17.212 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:16:17.213 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:16:17.213 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:16:17.214 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:16:17.216 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:16:17.216 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:16:17.217 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:16:17.217 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:16:17.218 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:16:17.220 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:16:17.220 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:16:17.221 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:16:17.222 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-19 22:16:17.222 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:16:17.225 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:16:17.230 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:16:17.230 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:16:17.231 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 10(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:16:17.232 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:16:17.234 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:16:17.235 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:16:17.237 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:17.238 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:16:17.240 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:17.243 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:17.245 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:16:17.247 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:17.248 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:17.249 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:16:17.250 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:17.253 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:17.253 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:16:17.254 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:17.257 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:17.258 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:16:17.259 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:17.260 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:17.261 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:16:17.262 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:17.263 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:17.264 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:16:17.265 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:17.265 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:16:17.266 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：50
2020-04-19 22:16:17.266 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:16:17.267 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:16:17.269 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 50(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:16:17.273 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:16:24.198 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 22:16:24.198 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:16:24.199 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:16:24.199 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 22:16:24.199 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:16:24.199 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：1
2020-04-19 22:16:24.199 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 22:16:24.202 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:16:24.203 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 1(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:16:24.208 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:16:25.097 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:16:25.097 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:16:25.097 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:16:25.098 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:16:25.098 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:16:25.100 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:16:25.101 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:16:25.103 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:16:25.105 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 22:16:25.105 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:16:25.107 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:16:25.108 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 9(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:16:25.112 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:16:26.153 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 22:16:26.154 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:16:26.154 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:16:26.154 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 22:16:26.154 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:16:26.154 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：1
2020-04-19 22:16:26.154 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 22:16:26.155 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:16:26.157 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 1(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:16:26.159 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:16:27.039 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:16:27.039 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:16:27.040 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:16:27.040 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:16:27.040 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:16:27.041 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:16:27.042 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:16:27.044 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:16:27.044 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:16:27.046 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:27.047 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:16:27.048 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:27.051 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:27.052 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:16:27.053 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:27.055 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:27.055 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:16:27.056 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:27.058 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:27.059 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:16:27.060 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:27.061 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:27.062 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:16:27.063 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:27.064 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:27.064 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:16:27.065 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:27.067 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:16:27.068 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:16:27.069 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:16:27.070 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:16:27.071 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：32
2020-04-19 22:16:27.071 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:16:27.073 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:16:27.073 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 32(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:16:27.078 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:16:30.809 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/7
2020-04-19 22:16:30.809 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:16:30.810 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:16:30.810 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getById
2020-04-19 22:16:30.810 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:16:30.811 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag WHERE id=? 
2020-04-19 22:16:30.812 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==> Parameters: 7(Integer)
2020-04-19 22:16:30.813 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 22:16:30.814 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-19 22:16:30.816 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"},"msg":"操作成功"}
2020-04-19 22:16:30.818 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:16:30.819 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/7(String), [7](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$1940c0e7.getLoginInfo(<generated>)
(String), GET(String), 5(Long), {"code":20000,"data":{"id":7,"isDeleted":false,"isEnable":true,"name":"面试"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:16:30.821 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:17:44.956 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:17:44.956 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:17:44.957 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:17:44.957 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:17:44.957 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:17:44.960 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:17:44.961 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:17:44.963 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:17:44.964 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:17:44.965 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:17:44.966 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:17:44.967 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:17:44.969 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:17:44.969 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:17:44.971 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:17:44.972 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:17:44.972 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:17:44.973 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:17:44.975 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:17:44.976 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:17:44.978 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:17:44.980 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:17:44.980 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:17:44.981 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:17:44.982 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:17:44.983 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:17:44.984 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:17:44.986 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:17:44.986 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:17:44.987 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:17:44.988 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:17:44.989 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：33
2020-04-19 22:17:44.989 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:17:44.990 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:17:44.991 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 33(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:17:44.995 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:19:12.538 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:19:12.539 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:19:12.539 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:19:12.539 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:19:12.540 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:19:12.542 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:19:12.542 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:19:12.544 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:19:12.544 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:19:12.546 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:19:12.546 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:19:12.548 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:19:12.550 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:19:12.551 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:19:12.552 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:19:12.554 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:19:12.554 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:19:12.555 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:19:12.556 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:19:12.557 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:19:12.558 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:19:12.559 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:19:12.560 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:19:12.561 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:19:12.562 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:19:12.563 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:19:12.564 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:19:12.566 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:19:12.567 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:19:12.571 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:19:12.572 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:19:12.573 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：35
2020-04-19 22:19:12.573 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:19:12.574 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:19:12.575 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 35(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:19:12.579 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:19:45.417 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 22:19:45.417 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:19:45.418 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:19:45.418 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 22:19:45.418 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:19:45.434 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 22:19:45.434 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 22:19:45.436 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 22:19:45.436 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 22:19:45.440 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:19:45.441 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 22:19:45.443 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.444 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:19:45.444 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 22:19:45.445 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.447 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:19:45.447 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:19:45.449 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.450 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:19:45.450 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:19:45.451 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.453 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:19:45.453 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 22:19:45.455 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.457 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:19:45.457 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 22:19:45.458 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.460 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:19:45.460 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:19:45.461 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.462 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:19:45.463 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:19:45.464 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.465 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:19:45.466 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 22:19:45.467 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.468 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:19:45.469 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 22:19:45.470 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.472 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:19:45.473 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 22:19:45.474 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.475 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:19:45.475 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 22:19:45.476 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 22:19:45.478 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:19:45.478 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 22:19:45.479 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.480 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:19:45.481 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 22:19:45.482 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.483 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:19:45.484 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 22:19:45.485 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.486 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:19:45.487 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 22:19:45.488 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.490 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:19:45.490 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 22:19:45.491 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.493 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:19:45.493 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 22:19:45.494 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 22:19:45.495 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:19:45.496 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 22:19:45.497 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.498 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:19:45.499 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 22:19:45.500 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:19:45.501 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 22:19:45.501 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：85
2020-04-19 22:19:45.507 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:19:45.510 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:19:45.512 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 85(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:19:45.518 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:22:01.772 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:22:01.772 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:22:01.772 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:22:01.772 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:22:01.773 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:22:01.774 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:22:01.775 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:22:01.776 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:22:01.777 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:22:01.778 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:01.779 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:22:01.781 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:01.782 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:01.782 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:22:01.783 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:01.785 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:01.785 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:22:01.787 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:01.788 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:01.788 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:22:01.789 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:01.790 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:01.790 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:22:01.791 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:01.792 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:01.792 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:22:01.794 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:01.795 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:01.795 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:22:01.796 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:01.797 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:22:01.798 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：26
2020-04-19 22:22:01.799 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:22:01.800 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:22:01.801 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 26(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:22:01.805 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:22:05.250 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:22:05.251 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:22:05.251 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:22:05.251 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:22:05.252 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:22:05.252 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:22:05.253 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:22:05.254 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:22:05.254 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:22:05.256 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:05.256 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:22:05.257 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:05.258 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:05.259 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:22:05.260 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:05.261 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:05.262 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:22:05.263 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:05.265 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:05.266 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:22:05.267 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:05.268 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:05.269 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:22:05.269 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:05.270 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:05.271 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:22:05.271 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:05.272 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:05.273 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:22:05.273 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:05.274 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:22:05.274 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：24
2020-04-19 22:22:05.274 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:22:05.275 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:22:05.276 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=7, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=2, name=java, isEnable=true, isDeleted=null, articleCount=6}, {id=3, name=mysql, isEnable=true, isDeleted=null, articleCount=2}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}, {id=6, name=vue, isEnable=true, isDeleted=null, articleCount=0}, {id=7, name=面试, isEnable=true, isDeleted=null, articleCount=0}], params={isRecommend=1}, sortColumn=null)](String), 1(Integer), POST(String), 24(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:22:05.280 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:22:13.407 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:22:13.407 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:22:13.407 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:22:13.407 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:22:13.408 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:22:13.409 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:22:13.410 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:22:13.411 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:22:13.411 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:22:13.412 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:13.413 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:22:13.413 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:13.414 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:13.415 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:22:13.416 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:13.416 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:13.417 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:22:13.418 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:13.419 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:13.419 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:22:13.420 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:13.421 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:13.422 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:22:13.422 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:13.423 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:13.424 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:22:13.425 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:13.426 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:13.427 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:22:13.428 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:13.428 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:22:13.428 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：21
2020-04-19 22:22:13.429 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:22:13.430 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:22:13.430 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=7, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=2, name=java, isEnable=true, isDeleted=null, articleCount=6}, {id=3, name=mysql, isEnable=true, isDeleted=null, articleCount=2}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}, {id=6, name=vue, isEnable=true, isDeleted=null, articleCount=0}, {id=7, name=面试, isEnable=true, isDeleted=null, articleCount=0}], params={isRecommend=0}, sortColumn=null)](String), 1(Integer), POST(String), 21(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:22:13.434 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:22:33.659 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:22:33.659 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:22:33.660 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:22:33.660 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:22:33.660 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:22:33.661 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? 
2020-04-19 22:22:33.662 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(String)
2020-04-19 22:22:33.663 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 22:22:33.663 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[],"pageSize":10,"params":{},"totalCount":0,"totalPage":0},"msg":"操作成功"}
2020-04-19 22:22:33.664 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:22:33.664 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=7, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=2, name=java, isEnable=true, isDeleted=null, articleCount=6}, {id=3, name=mysql, isEnable=true, isDeleted=null, articleCount=2}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}, {id=6, name=vue, isEnable=true, isDeleted=null, articleCount=0}, {id=7, name=面试, isEnable=true, isDeleted=null, articleCount=0}], params={isEnable=0}, sortColumn=null)](String), 1(Integer), POST(String), 4(Long), {"code":20000,"data":{"currPage":1,"list":[],"pageSize":10,"params":{},"totalCount":0,"totalPage":0},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:22:33.668 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:22:36.010 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:22:36.011 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:22:36.011 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:22:36.011 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:22:36.011 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:22:36.012 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? 
2020-04-19 22:22:36.013 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(String)
2020-04-19 22:22:36.014 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? LIMIT ?,? 
2020-04-19 22:22:36.014 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(String), 0(Long), 10(Long)
2020-04-19 22:22:36.015 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:36.016 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:22:36.017 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:36.018 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:36.019 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:22:36.021 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:36.022 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:36.022 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:22:36.023 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:36.024 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:36.025 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:22:36.026 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:36.027 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:36.028 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:22:36.028 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:36.029 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:36.030 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:22:36.031 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:36.031 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:22:36.032 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:22:36.033 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:22:36.033 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:22:36.034 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：24
2020-04-19 22:22:36.034 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:22:36.036 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:22:36.037 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=null)](String), 1(Integer), POST(String), 24(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:22:36.049 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:24:57.915 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:24:57.916 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:24:57.916 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:24:57.916 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:24:57.917 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:24:57.918 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:24:57.919 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:24:57.920 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:24:57.920 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:24:57.922 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:24:57.922 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:24:57.923 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:24:57.925 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:24:57.926 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:24:57.927 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:24:57.928 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:24:57.929 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:24:57.930 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:24:57.931 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:24:57.932 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:24:57.933 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:24:57.934 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:24:57.934 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:24:57.935 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:24:57.936 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:24:57.937 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:24:57.937 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:24:57.938 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:24:57.939 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:24:57.940 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:24:57.940 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:24:57.941 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：26
2020-04-19 22:24:57.942 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:24:57.943 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:24:57.944 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 26(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:24:57.948 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:26:19.348 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:26:19.348 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:26:19.348 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:26:19.349 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:26:19.349 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:26:19.351 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:26:19.352 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:26:19.353 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:26:19.354 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:26:19.356 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:19.356 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:26:19.357 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:19.358 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:19.358 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:26:19.359 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:19.360 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:19.360 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:26:19.361 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:19.362 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:19.363 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:26:19.364 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:19.365 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:19.365 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:26:19.366 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:19.368 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:19.369 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:26:19.370 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:19.371 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:19.371 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:26:19.372 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:19.372 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:26:19.373 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：25
2020-04-19 22:26:19.373 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:26:19.374 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:26:19.374 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$1940c0e7.getLoginInfo(<generated>)
(String), POST(String), 25(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:26:19.378 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:26:42.231 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 22:26:42.232 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:26:42.232 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:26:42.233 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 22:26:42.233 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:26:42.233 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 22:26:42.233 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 22:26:42.234 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:26:42.235 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:26:42.238 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:26:42.413 WARN  [http-nio-8088-exec-10]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:26:53.272 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 22:26:53.273 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:26:53.274 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:26:53.275 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 22:26:53.275 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:26:53.275 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-19 22:26:53.276 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 22:26:53.277 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:26:53.278 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:26:53.282 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:26:53.455 WARN  [http-nio-8088-exec-2]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:26:53.760 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:26:53.761 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:26:53.761 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:26:53.761 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:26:53.761 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:26:53.761 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:26:53.761 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:26:53.761 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:26:53.761 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:26:53.762 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:26:53.762 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:26:53.762 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:26:53.764 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:26:53.764 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 22:26:53.765 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:26:53.765 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:26:53.766 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:26:53.766 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:26:53.766 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:26:53.767 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:26:53.768 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:26:53.769 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:26:53.769 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:53.770 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:26:53.772 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:53.774 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:53.775 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:26:53.776 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:53.777 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:53.778 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:26:53.779 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:53.779 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:53.780 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:26:53.781 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:53.783 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:53.784 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:26:53.785 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:53.787 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:53.787 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:26:53.789 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:53.790 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:26:53.791 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:26:53.792 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:26:53.792 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:26:53.793 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：32
2020-04-19 22:26:53.793 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:26:53.794 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:26:53.794 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 32(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:26:53.797 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:27:21.708 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 22:27:21.709 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:27:21.710 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:27:21.710 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 22:27:21.710 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:27:21.711 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 22:27:21.711 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 22:27:21.713 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:27:21.715 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:27:21.719 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:27:21.900 WARN  [http-nio-8088-exec-5]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:27:22.207 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:27:22.208 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:27:22.208 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:27:22.208 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:27:22.209 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:27:22.210 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:27:22.210 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:27:22.211 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:27:22.211 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:27:22.211 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:27:22.211 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:27:22.211 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:27:22.212 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:27:22.213 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:27:22.214 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:27:22.214 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:27:22.216 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:27:22.216 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:27:22.217 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-19 22:27:22.217 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:27:22.217 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:27:22.218 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:27:22.219 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:27:22.220 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:27:22.220 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$1940c0e7.getLoginInfo(<generated>)
(String), GET(String), 7(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:27:22.220 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:27:22.222 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:27:22.223 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:27:22.223 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:27:22.224 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:27:22.225 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:27:22.227 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:27:22.227 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:27:22.228 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:27:22.230 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:27:22.231 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:27:22.233 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:27:22.235 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:27:22.236 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:27:22.237 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:27:22.237 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:27:22.238 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:27:22.239 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:27:22.239 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:27:22.239 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：32
2020-04-19 22:27:22.240 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:27:22.240 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:27:22.241 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 32(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:27:22.243 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:30:46.240 WARN  [http-nio-8088-exec-8]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:30:46.388 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:30:46.389 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:30:46.389 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:30:46.389 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:30:46.389 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:30:46.390 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:30:46.391 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:30:46.391 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:30:46.392 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 22:30:46.392 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:30:46.393 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:30:46.393 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:30:46.405 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:30:46.542 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:30:46.542 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:30:46.542 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:30:46.542 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:30:46.543 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:30:46.544 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:30:46.544 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:30:46.545 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:30:46.546 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:30:46.547 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:30:46.547 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:30:46.548 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:30:46.549 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:30:46.550 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:30:46.551 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:30:46.552 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:30:46.553 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:30:46.554 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:30:46.555 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:30:46.556 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:30:46.556 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:30:46.558 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:30:46.559 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:30:46.560 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:30:46.561 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:30:46.562 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:30:46.562 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:30:46.564 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:30:46.564 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:30:46.565 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:30:46.569 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:30:46.569 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：27
2020-04-19 22:30:46.570 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:30:46.571 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:30:46.572 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 27(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:30:46.576 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:31:18.228 WARN  [http-nio-8088-exec-2]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:31:18.396 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:31:18.396 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:31:18.396 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:31:18.397 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:31:18.397 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:31:18.398 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:31:18.398 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:31:18.400 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:31:18.400 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 22:31:18.401 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:31:18.402 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:31:18.402 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:31:18.406 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:31:18.527 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:31:18.527 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:31:18.527 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:31:18.528 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:31:18.528 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:31:18.529 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:31:18.529 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:31:18.530 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:31:18.531 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:31:18.532 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:31:18.533 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:31:18.533 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:31:18.534 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:31:18.535 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:31:18.536 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:31:18.536 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:31:18.537 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:31:18.538 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:31:18.539 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:31:18.540 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:31:18.541 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:31:18.543 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:31:18.543 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:31:18.544 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:31:18.545 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:31:18.546 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:31:18.547 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:31:18.548 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:31:18.548 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:31:18.549 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:31:18.550 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:31:18.550 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：23
2020-04-19 22:31:18.551 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:31:18.551 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:31:18.552 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 23(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:31:18.555 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:36:21.850 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 22:36:22.699 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 16492 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 22:36:22.701 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 22:36:22.701 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 22:36:23.044 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 22:36:24.615 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$f812ac7b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:24.780 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:24.794 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$d73173d7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:24.800 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:24.810 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:24.822 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$fe9c619e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:24.830 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$4cb90fec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:24.861 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:24.935 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:24.942 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:25.139 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 22:36:25.451 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 22:36:25.697 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:25.703 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:25.710 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:25.714 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:25.726 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:25.764 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:26.041 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:26.064 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 22:36:26.345 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 22:36:26.353 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 22:36:26.354 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 22:36:26.355 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 22:36:26.461 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 22:36:26.461 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3661 ms
2020-04-19 22:36:27.934 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 22:36:28.329 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 22:36:28.344 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 22:36:28.373 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 22:36:28.590 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 22:36:28.598 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 22:36:28.604 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 22:36:28.617 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 22:36:28.635 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 22:36:28.641 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 22:36:28.674 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 22:36:28.694 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 22:36:28.697 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.722 seconds (JVM running for 7.988)
2020-04-19 22:36:36.829 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 22:36:36.829 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 22:36:36.848 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 18 ms
2020-04-19 22:36:36.901 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:36:36.902 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:36:36.904 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:36:36.908 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:36:36.912 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:36:36.915 WARN  [http-nio-8088-exec-1]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:36:37.033 INFO  [http-nio-8088-exec-2]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 22:36:37.055 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:36:37.055 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:36:37.056 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:36:37.056 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:36:37.056 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:36:37.190 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:36:37.206 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:36:37.215 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:36:37.216 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:36:37.219 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:36:37.220 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：319
2020-04-19 22:36:37.222 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:36:37.223 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:36:37.227 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:36:37.228 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:36:37.230 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:36:37.231 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:36:37.232 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:36:37.234 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:36:37.236 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:36:37.237 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:36:37.238 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:36:37.240 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:36:37.241 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:36:37.243 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:36:37.245 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:36:37.246 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:36:37.247 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:36:37.249 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:36:37.249 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:36:37.251 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:36:37.253 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:36:37.254 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:36:37.256 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:36:37.257 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:36:37.258 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：203
2020-04-19 22:36:37.296 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:36:37.300 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:36:37.305 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:36:37.306 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:36:37.307 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 203(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:36:37.309 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 319(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:36:37.312 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:36:37.313 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:38:23.049 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:38:23.050 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:38:23.050 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:38:23.050 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:38:23.051 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:38:23.055 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:38:23.056 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:38:23.058 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:38:23.059 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:38:23.060 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:23.061 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:38:23.062 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:23.064 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:23.065 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:38:23.066 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:23.068 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:23.068 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:38:23.070 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:23.071 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:23.072 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:38:23.073 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:23.076 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:23.077 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:38:23.078 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:23.080 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:23.080 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:38:23.082 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:23.083 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:23.084 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:38:23.085 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:23.086 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:38:23.087 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：38
2020-04-19 22:38:23.087 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:38:23.088 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:38:23.089 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 38(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:38:23.094 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:38:25.576 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/1
2020-04-19 22:38:25.576 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:38:25.577 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:38:25.577 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getById
2020-04-19 22:38:25.577 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:38:25.578 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag WHERE id=? 
2020-04-19 22:38:25.579 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==> Parameters: 1(Integer)
2020-04-19 22:38:25.580 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 22:38:25.581 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-19 22:38:25.583 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},"msg":"操作成功"}
2020-04-19 22:38:25.584 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:38:25.585 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/1(String), [1](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:38:25.588 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:38:33.620 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 22:38:33.620 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:38:33.621 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:38:33.622 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 22:38:33.622 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:38:33.639 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:38:33.640 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 0(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$6dbc024d.getLoginInfo(<generated>)
(String), GET(String), 127.0.0.1(String)
2020-04-19 22:38:33.643 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:38:33.652 ERROR [http-nio-8088-exec-6]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$6dbc024d.getLoginInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 22:38:37.354 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/user/login
2020-04-19 22:38:37.354 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:38:37.355 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:38:37.355 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.sysLogin
2020-04-19 22:38:37.356 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:38:37.358 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==>  Preparing: select username,password from sys_user where username=? 
2020-04-19 22:38:37.359 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==> Parameters: admin(String)
2020-04-19 22:38:37.360 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -<==      Total: 1
2020-04-19 22:38:37.363 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 22:38:37.363 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"token":"B66D82C05DB7AB7CF6E1A8AB23ABECFE"},"msg":"操作成功"}
2020-04-19 22:38:37.365 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:38:37.366 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/user/login(String), [SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null, isDeleted=null)](String), 1(Integer), POST(String), 9(Long), {"code":20000,"data":{"token":"B66D82C05DB7AB7CF6E1A8AB23ABECFE"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:38:37.370 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:38:37.390 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 22:38:37.391 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:38:37.391 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:38:37.391 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 22:38:37.392 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:38:37.392 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 22:38:37.395 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 22:38:37.396 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:38:37.397 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:38:37.400 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:38:37.863 WARN  [http-nio-8088-exec-8]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:38:37.871 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:38:37.872 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:38:37.872 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:38:37.873 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:38:37.873 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:38:37.875 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:38:37.876 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:38:37.876 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:38:37.876 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:38:37.877 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:38:37.877 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:38:37.877 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:38:37.879 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:38:37.879 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:38:37.880 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:38:37.880 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:38:37.882 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:38:37.883 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:37.883 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-19 22:38:37.884 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:38:37.884 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:38:37.885 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:37.887 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:38:37.888 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:38:37.889 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:37.890 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:38:37.892 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:37.893 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:38:37.894 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:37.894 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:38:37.896 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:37.898 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:37.899 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:38:37.900 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:37.902 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:37.904 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:38:37.905 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:37.907 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:37.907 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:38:37.909 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:37.910 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:38:37.911 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:38:37.912 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:38:37.913 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:38:37.913 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：42
2020-04-19 22:38:37.914 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:38:37.915 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:38:37.916 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 42(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:38:37.918 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:38:39.924 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/1
2020-04-19 22:38:39.924 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:38:39.925 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:38:39.925 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getById
2020-04-19 22:38:39.925 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:38:39.926 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag WHERE id=? 
2020-04-19 22:38:39.927 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==> Parameters: 1(Integer)
2020-04-19 22:38:39.928 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 22:38:39.929 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-19 22:38:39.929 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},"msg":"操作成功"}
2020-04-19 22:38:39.930 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:38:39.931 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/1(String), [1](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"id":1,"isDeleted":false,"isEnable":true,"name":"spring"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:38:39.934 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:39:09.672 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/3
2020-04-19 22:39:09.673 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:39:09.673 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:39:09.673 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getById
2020-04-19 22:39:09.673 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:39:09.674 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag WHERE id=? 
2020-04-19 22:39:09.675 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==> Parameters: 3(Integer)
2020-04-19 22:39:09.677 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 22:39:09.678 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-19 22:39:09.678 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},"msg":"操作成功"}
2020-04-19 22:39:09.680 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:39:09.681 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/3(String), [3](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"id":3,"isDeleted":false,"isEnable":true,"name":"mysql"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:39:09.685 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:39:18.984 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/save
2020-04-19 22:39:18.985 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:39:18.985 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:39:18.985 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.saveTag
2020-04-19 22:39:18.986 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:39:18.988 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.insert.debug:143 -==>  Preparing: INSERT INTO tag ( name ) VALUES ( ? ) 
2020-04-19 22:39:18.988 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.insert.debug:143 -==> Parameters: sdfsdfsdfds(String)
2020-04-19 22:39:18.994 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:39:18.994 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-19 22:39:18.994 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"保存成功"}
2020-04-19 22:39:18.995 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:39:18.996 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/save(String), [Tag(id=null, name=sdfsdfsdfds, isEnable=null, isDeleted=null)](String), 1(Integer), POST(String), 10(Long), {"code":20000,"msg":"保存成功"}(String), 127.0.0.1(String)
2020-04-19 22:39:18.999 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:39:19.238 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:39:19.239 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:39:19.239 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:39:19.239 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:39:19.240 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:39:19.242 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:39:19.243 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:39:19.247 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:39:19.247 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:39:19.249 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:19.249 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:39:19.250 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:19.252 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:19.253 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:39:19.254 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:19.255 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:19.256 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:39:19.257 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:19.258 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:19.260 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:39:19.260 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:19.261 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:19.262 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:39:19.263 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:19.264 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:19.266 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:39:19.266 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:19.267 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:19.268 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:39:19.269 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:19.271 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:19.271 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 22:39:19.272 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:19.273 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 22:39:19.274 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：36
2020-04-19 22:39:19.275 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":true,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:39:19.276 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:39:19.277 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=7, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=2, name=java, isEnable=true, isDeleted=null, articleCount=6}, {id=3, name=mysql, isEnable=true, isDeleted=null, articleCount=2}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}, {id=6, name=vue, isEnable=true, isDeleted=null, articleCount=0}, {id=7, name=面试, isEnable=true, isDeleted=null, articleCount=0}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 36(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":true,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:39:19.281 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:39:23.659 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/8
2020-04-19 22:39:23.660 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:39:23.660 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:39:23.660 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getById
2020-04-19 22:39:23.661 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:39:23.661 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag WHERE id=? 
2020-04-19 22:39:23.662 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==> Parameters: 8(Integer)
2020-04-19 22:39:23.663 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 22:39:23.664 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-19 22:39:23.664 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"id":8,"isDeleted":false,"isEnable":true,"name":"sdfsdfsdfds"},"msg":"操作成功"}
2020-04-19 22:39:23.665 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:39:23.666 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/8(String), [8](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$6dbc024d.getLoginInfo(<generated>)
(String), GET(String), 5(Long), {"code":20000,"data":{"id":8,"isDeleted":false,"isEnable":true,"name":"sdfsdfsdfds"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:39:23.670 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:39:26.086 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/update
2020-04-19 22:39:26.087 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-19 22:39:26.087 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:39:26.087 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.updateTag
2020-04-19 22:39:26.088 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:39:26.091 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.updateById.debug:143 -==>  Preparing: UPDATE tag SET name=?, is_enable=?, is_deleted=? WHERE id=? 
2020-04-19 22:39:26.092 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.updateById.debug:143 -==> Parameters: sdfsdfsdfds(String), false(Boolean), false(Boolean), 8(Integer)
2020-04-19 22:39:26.097 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.updateById.debug:143 -<==    Updates: 1
2020-04-19 22:39:26.098 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-19 22:39:26.098 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"更新成功"}
2020-04-19 22:39:26.099 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:39:26.100 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/update(String), [Tag(id=8, name=sdfsdfsdfds, isEnable=false, isDeleted=false)](String), 1(Integer), PUT(String), 12(Long), {"code":20000,"msg":"更新成功"}(String), 127.0.0.1(String)
2020-04-19 22:39:26.102 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:39:26.565 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:39:26.565 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:39:26.565 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:39:26.565 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:39:26.566 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:39:26.567 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:39:26.568 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:39:26.569 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:39:26.569 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:39:26.575 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:26.576 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:39:26.577 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:26.579 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:26.579 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:39:26.580 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:26.582 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:26.582 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:39:26.583 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:26.584 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:26.585 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:39:26.586 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:26.587 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:26.588 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:39:26.590 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:26.591 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:26.592 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:39:26.593 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:26.594 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:26.595 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:39:26.596 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:26.597 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:39:26.597 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 22:39:26.598 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:39:26.599 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 22:39:26.600 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：36
2020-04-19 22:39:26.600 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:39:26.601 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:39:26.602 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=8, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=2, name=java, isEnable=true, isDeleted=null, articleCount=6}, {id=3, name=mysql, isEnable=true, isDeleted=null, articleCount=2}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}, {id=6, name=vue, isEnable=true, isDeleted=null, articleCount=0}, {id=7, name=面试, isEnable=true, isDeleted=null, articleCount=0}, {id=8, name=sdfsdfsdfds, isEnable=true, isDeleted=null, articleCount=0}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 36(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:39:26.606 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:39:41.364 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 22:39:41.364 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:39:41.365 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:39:41.365 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 22:39:41.366 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-19 22:39:41.366 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:39:41.366 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:39:41.367 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:39:41.368 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-19 22:39:41.368 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:39:41.368 WARN  [http-nio-8088-exec-1]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; nested exception is java.lang.NumberFormatException: For input string: "list"]
2020-04-19 22:39:41.380 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-19 22:39:41.381 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-19 22:39:41.384 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.385 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:39:41.387 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.389 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.390 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:39:41.391 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.392 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 22:39:41.393 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 22:39:41.393 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.394 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:39:41.394 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 22:39:41.395 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 22:39:41.396 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.397 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.398 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:39:41.400 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.401 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 2
2020-04-19 22:39:41.402 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：36
2020-04-19 22:39:41.404 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.406 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 22:39:41.408 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.410 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.411 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 22:39:41.412 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.414 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.415 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:39:41.418 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.419 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.420 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"},{"category":{"categoryName":"测试","id":1},"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","likeCount":0,"tagList":[{"id":2,"name":"java"}],"title":"test"}],"msg":"操作成功"}
2020-04-19 22:39:41.420 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:39:41.422 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.422 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:39:41.424 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.424 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 36(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"},{"category":{"categoryName":"测试","id":1},"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","likeCount":0,"tagList":[{"id":2,"name":"java"}],"title":"test"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:39:41.425 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 22:39:41.426 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.427 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:39:41.428 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.429 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 22:39:41.430 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.432 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.433 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:39:41.436 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.437 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.437 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:39:41.438 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.440 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.440 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 22:39:41.441 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.443 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.444 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 22:39:41.445 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.448 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.449 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 22:39:41.451 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.453 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.453 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 22:39:41.455 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 22:39:41.457 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.458 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 22:39:41.459 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.461 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.462 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 22:39:41.464 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.468 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.469 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 22:39:41.470 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.472 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.472 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 22:39:41.473 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.475 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.476 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 22:39:41.477 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.478 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.479 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 22:39:41.480 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 22:39:41.481 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:39:41.482 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 22:39:41.484 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.485 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:39:41.486 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 22:39:41.488 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:39:41.489 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 22:39:41.489 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：125
2020-04-19 22:39:41.493 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:39:41.496 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:39:41.499 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 125(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:39:41.512 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:39:41.672 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-19 22:39:41.673 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:39:41.674 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:39:41.674 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-19 22:39:41.674 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:39:41.681 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-19 22:39:41.681 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:39:41.685 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-19 22:39:41.686 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-19 22:39:41.688 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-19 22:39:41.689 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:39:41.689 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:39:41.692 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:41:04.965 WARN  [http-nio-8088-exec-3]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:42:15.488 WARN  [http-nio-8088-exec-4]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 22:44:08.680 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:44:08.681 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:44:08.681 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:44:08.681 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:44:08.681 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:44:08.683 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:44:08.684 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:44:08.686 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:44:08.686 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:44:08.688 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:44:08.689 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:44:08.690 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:44:08.691 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:44:08.692 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:44:08.693 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:44:08.694 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:44:08.694 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:44:08.695 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:44:08.696 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:44:08.697 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:44:08.698 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:44:08.699 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:44:08.699 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:44:08.700 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:44:08.702 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:44:08.703 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:44:08.704 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:44:08.705 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:44:08.706 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:44:08.707 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:44:08.708 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:44:08.708 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 22:44:08.709 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:44:08.709 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 22:44:08.709 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：29
2020-04-19 22:44:08.710 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:44:08.711 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:44:08.711 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 29(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:44:08.714 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:45:53.311 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:45:53.311 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:45:53.312 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:45:53.312 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:45:53.312 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:45:53.314 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:45:53.314 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:45:53.315 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:45:53.316 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 20(Long)
2020-04-19 22:45:53.317 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:45:53.317 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:45:53.318 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:45:53.319 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:45:53.320 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:45:53.321 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:45:53.322 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:45:53.322 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:45:53.323 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:45:53.324 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:45:53.324 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:45:53.325 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:45:53.326 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:45:53.327 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:45:53.327 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:45:53.328 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:45:53.329 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:45:53.330 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:45:53.331 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:45:53.331 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:45:53.332 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:45:53.333 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:45:53.334 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 22:45:53.335 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:45:53.335 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 22:45:53.336 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：25
2020-04-19 22:45:53.336 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":20,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:45:53.337 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:45:53.337 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$6dbc024d.getLoginInfo(<generated>)
(String), POST(String), 25(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":20,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:45:53.342 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:46:33.228 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:46:33.229 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:46:33.229 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:46:33.229 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:46:33.230 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:46:33.231 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? 
2020-04-19 22:46:33.231 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 22:46:33.232 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? LIMIT ?,? 
2020-04-19 22:46:33.233 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-19 22:46:33.234 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:33.235 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:46:33.236 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:33.237 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:33.237 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:46:33.238 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:33.239 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:33.240 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:46:33.241 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:33.242 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:33.242 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:46:33.243 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:33.245 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:33.245 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:46:33.246 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:33.247 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:33.247 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:46:33.248 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:33.249 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:33.249 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:46:33.250 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:33.250 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:46:33.251 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：23
2020-04-19 22:46:33.251 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:46:33.252 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:46:33.253 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 23(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:46:33.256 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:46:37.336 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 22:46:37.336 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:46:37.337 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:46:37.337 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:46:37.338 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 22:46:37.338 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:46:37.339 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:46:37.339 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:46:37.340 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:46:37.340 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:46:37.342 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? 
2020-04-19 22:46:37.343 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 22:46:37.344 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 22:46:37.344 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? LIMIT ?,? 
2020-04-19 22:46:37.345 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 22:46:37.345 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-19 22:46:37.346 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 22:46:37.347 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 22:46:37.347 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:37.347 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:46:37.348 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.349 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.350 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:37.350 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 22:46:37.351 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:46:37.351 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.352 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.352 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.353 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 22:46:37.353 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:37.355 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.355 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:46:37.356 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.357 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.358 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:37.358 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:46:37.359 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:46:37.360 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.360 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.362 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.362 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:37.362 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:46:37.362 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:46:37.363 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.363 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.365 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.365 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:37.365 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:46:37.365 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 22:46:37.366 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.367 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.368 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.368 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:46:37.368 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:46:37.368 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 22:46:37.369 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.369 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.370 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 22:46:37.372 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：35
2020-04-19 22:46:37.372 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:46:37.372 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.373 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:46:37.376 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:46:37.377 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.378 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 35(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:46:37.379 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.379 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:46:37.381 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.382 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:46:37.385 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.386 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 22:46:37.388 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.390 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.391 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 22:46:37.393 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.395 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.396 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 22:46:37.397 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.399 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.399 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 22:46:37.401 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 22:46:37.405 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.406 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 22:46:37.408 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.409 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.409 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 22:46:37.410 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.412 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.413 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 22:46:37.414 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.415 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.415 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 22:46:37.417 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.419 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.419 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 22:46:37.421 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.422 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.423 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 22:46:37.424 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 22:46:37.425 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.426 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 22:46:37.427 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.429 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.429 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 22:46:37.431 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.432 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 22:46:37.432 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：97
2020-04-19 22:46:37.435 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:46:37.440 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:46:37.441 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 97(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:46:37.447 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:46:37.641 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-19 22:46:37.641 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:46:37.642 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:46:37.642 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-19 22:46:37.642 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:46:37.643 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-19 22:46:37.644 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-19 22:46:37.644 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:46:37.644 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-19 22:46:37.644 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:46:37.645 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-19 22:46:37.645 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:46:37.646 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.646 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-19 22:46:37.646 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:46:37.646 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:46:37.647 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-19 22:46:37.647 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.647 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-19 22:46:37.648 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-19 22:46:37.648 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.648 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:46:37.648 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:46:37.649 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:46:37.649 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.651 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:46:37.651 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:46:37.652 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:46:37.652 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.654 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:46:37.655 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:46:37.656 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:46:37.657 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 2
2020-04-19 22:46:37.658 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：17
2020-04-19 22:46:37.659 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"},{"category":{"categoryName":"测试","id":1},"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","likeCount":0,"tagList":[{"id":2,"name":"java"}],"title":"test"}],"msg":"操作成功"}
2020-04-19 22:46:37.660 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:46:37.661 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 17(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"},{"category":{"categoryName":"测试","id":1},"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","likeCount":0,"tagList":[{"id":2,"name":"java"}],"title":"test"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:46:37.664 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:46:54.892 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:46:54.892 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:46:54.893 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:46:54.893 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:46:54.893 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:46:54.894 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:46:54.895 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:46:54.896 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:46:54.896 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 22:46:54.896 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:46:54.897 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:46:54.898 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:46:54.901 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:46:56.560 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-19 22:46:56.561 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:46:56.561 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:46:56.562 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-19 22:46:56.562 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:46:56.564 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-19 22:46:56.564 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-19 22:46:56.568 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-19 22:46:56.569 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-19 22:46:56.570 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-19 22:46:56.572 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-19 22:46:56.573 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-19 22:46:56.573 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-19 22:46:56.574 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-19 22:46:56.575 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：15
2020-04-19 22:46:56.581 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"asdasd"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的f"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-19 22:46:56.583 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:46:56.584 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 15(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"asdasd"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的f"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:46:56.587 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:47:00.310 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 22:47:00.311 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 22:47:00.311 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:47:00.311 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.listCategory
2020-04-19 22:47:00.311 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:47:00.312 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category 
2020-04-19 22:47:00.312 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 22:47:00.315 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectList.debug:143 -<==      Total: 5
2020-04-19 22:47:00.316 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-19 22:47:00.316 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}
2020-04-19 22:47:00.317 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:47:00.318 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":[{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"数据库","id":3,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"其他","id":4,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},{"categoryName":"转载","id":5,"isDeleted":false,"isEnable":true,"parentCategoryId":-1}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:47:00.322 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:47:00.840 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 22:47:00.840 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:47:00.840 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:47:00.841 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 22:47:00.841 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:47:00.845 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 22:47:00.846 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 22:47:00.847 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 22:47:00.848 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 22:47:00.851 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:47:00.851 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 22:47:00.852 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.853 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:47:00.854 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 22:47:00.855 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.856 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:47:00.856 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:47:00.857 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.858 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:47:00.858 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 22:47:00.859 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.861 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:47:00.861 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 22:47:00.862 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.863 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:47:00.864 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 22:47:00.866 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.868 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:47:00.868 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:47:00.869 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.870 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:47:00.870 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 22:47:00.871 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.872 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:47:00.872 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 22:47:00.873 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.874 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:47:00.875 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 22:47:00.876 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.877 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:47:00.877 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 22:47:00.878 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.879 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:47:00.879 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 22:47:00.880 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 22:47:00.882 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:47:00.883 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 22:47:00.884 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.885 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:47:00.885 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 22:47:00.886 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.887 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:47:00.888 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 22:47:00.888 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.889 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:47:00.890 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 22:47:00.890 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.892 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:47:00.892 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 22:47:00.893 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.894 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:47:00.894 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 22:47:00.895 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 22:47:00.896 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 22:47:00.897 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 22:47:00.899 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.901 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 22:47:00.901 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 22:47:00.902 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 22:47:00.903 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 22:47:00.903 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：63
2020-04-19 22:47:00.904 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:47:00.906 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:47:00.907 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 63(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:47:00.913 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:47:29.717 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:47:29.717 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:47:29.717 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:47:29.717 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:47:29.717 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:47:29.722 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE name LIKE CONCAT('%', ?, '%') 
2020-04-19 22:47:29.723 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: p(String)
2020-04-19 22:47:29.725 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE name like CONCAT('%',?,'%') LIMIT ?,? 
2020-04-19 22:47:29.726 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: p(String), 0(Long), 10(Long)
2020-04-19 22:47:29.727 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:29.727 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:47:29.728 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:29.729 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:29.729 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:47:29.730 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:29.731 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:29.732 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:47:29.732 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:29.733 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 3
2020-04-19 22:47:29.733 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：16
2020-04-19 22:47:29.734 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"}],"pageSize":10,"params":{},"totalCount":3,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:47:29.734 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:47:29.735 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=8, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=2, name=java, isEnable=true, isDeleted=null, articleCount=6}, {id=3, name=mysql, isEnable=true, isDeleted=null, articleCount=2}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}, {id=6, name=vue, isEnable=true, isDeleted=null, articleCount=0}, {id=7, name=面试, isEnable=true, isDeleted=null, articleCount=0}, {id=8, name=sdfsdfsdfds, isEnable=false, isDeleted=null, articleCount=0}], params={name=p}, sortColumn=null)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$6dbc024d.getLoginInfo(<generated>)
(String), POST(String), 16(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"}],"pageSize":10,"params":{},"totalCount":3,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:47:29.738 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:47:41.040 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:47:41.041 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:47:41.041 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:47:41.042 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:47:41.042 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:47:41.043 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? 
2020-04-19 22:47:41.044 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(String)
2020-04-19 22:47:41.045 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? LIMIT ?,? 
2020-04-19 22:47:41.045 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(String), 0(Long), 10(Long)
2020-04-19 22:47:41.046 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:41.047 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 22:47:41.048 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:41.048 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 1
2020-04-19 22:47:41.048 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-19 22:47:41.049 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":1,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:47:41.050 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:47:41.050 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=3, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}], params={isEnable=0}, sortColumn=null)](String), 1(Integer), POST(String), 8(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":1,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:47:41.055 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 22:47:44.706 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 22:47:44.707 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 22:47:44.707 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 22:47:44.707 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 22:47:44.707 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 22:47:44.708 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 22:47:44.709 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 22:47:44.710 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 22:47:44.710 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 22:47:44.711 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:44.712 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 22:47:44.713 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:44.713 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:44.714 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 22:47:44.715 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:44.716 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:44.717 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 22:47:44.718 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:44.719 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:44.719 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 22:47:44.720 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:44.721 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:44.721 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 22:47:44.722 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:44.723 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:44.724 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 22:47:44.725 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:44.726 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:44.726 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 22:47:44.727 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:44.728 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 22:47:44.728 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 22:47:44.729 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 22:47:44.729 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 22:47:44.730 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：24
2020-04-19 22:47:44.730 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 22:47:44.731 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 22:47:44.731 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=1, pageSize=10, totalPage=1, currPage=1, list=[{id=8, name=sdfsdfsdfds, isEnable=false, isDeleted=null, articleCount=0}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 24(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 22:47:44.735 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:00:58.538 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 23:00:59.182 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 17844 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 23:00:59.200 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 23:00:59.201 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 23:00:59.430 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 23:01:00.974 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$5a5d8dfa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:01.133 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:01.146 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$397c5556] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:01.151 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:01.164 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:01.177 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$60e7431d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:01.184 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$af03f16b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:01.221 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:01.288 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:01.294 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:01.553 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:01:01.624 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:01:02.065 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:01:02.312 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:02.322 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:02.328 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:02.332 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:02.349 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:02.387 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:02.723 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:02.745 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:01:03.144 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 23:01:03.155 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 23:01:03.156 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 23:01:03.156 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 23:01:03.274 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 23:01:03.274 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3984 ms
2020-04-19 23:01:04.805 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 23:01:05.234 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 23:01:05.255 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 23:01:05.290 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 23:01:05.477 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 23:01:05.512 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 23:01:05.521 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 23:01:05.527 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 23:01:05.538 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 23:01:05.555 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 23:01:05.562 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-19 23:01:05.597 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 23:01:05.618 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 23:01:05.621 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 7.022 seconds (JVM running for 8.201)
2020-04-19 23:01:40.187 INFO  [http-nio-8088-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 23:01:40.187 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 23:01:40.201 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 13 ms
2020-04-19 23:01:40.286 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:01:40.287 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:01:40.288 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 23:01:40.289 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:01:40.290 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 23:01:40.378 INFO  [http-nio-8088-exec-2]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 23:01:40.575 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:01:40.590 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:01:40.602 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:01:40.603 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:01:40.610 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:01:40.611 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:01:40.615 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:01:40.630 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:01:40.631 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 0(Integer), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property 'categoryName' of 'class cn.codexing.blog.vo.TagVO' with value '测试' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'categoryName' in 'class cn.codexing.blog.vo.TagVO'
	at cn.codexing.blog.service.impl.CategoryServiceImpl.listCategory(CategoryServiceImpl.java:34)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$FastClassBySpringCGLIB$$1637de9a.invoke(<generated>)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$EnhancerBySpringCGLIB$$a35f5176.listCategory(<generated>)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$FastClassBySpringCGLIB$$1637de9a.invoke(<generated>)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$EnhancerBySpringCGLIB$$2413d910.listCategory(<generated>)
	at cn.codexing.blog.controller.CategoryController.getByPage(CategoryController.java:55)
	at cn.codexing.blog.controller.CategoryController$$FastClassBySpringCGLIB$$c3a1a214.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.CategoryController$$EnhancerBySpringCGLIB$$2c2a9adc.getByPage(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: Could not set property 'categoryName' of 'class cn.codexing.blog.vo.TagVO' with value '测试' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'categoryName' in 'class cn.codexing.blog.vo.TagVO'
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'categoryName' in 'class cn.codexing.blog.vo.TagVO'
(String), POST(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 23:01:40.634 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:01:40.646 ERROR [http-nio-8088-exec-2]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property 'categoryName' of 'class cn.codexing.blog.vo.TagVO' with value '测试' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'categoryName' in 'class cn.codexing.blog.vo.TagVO'] with root cause
org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'categoryName' in 'class cn.codexing.blog.vo.TagVO'
	at org.apache.ibatis.reflection.Reflector.getSetInvoker(Reflector.java:365)
	at org.apache.ibatis.reflection.MetaClass.getSetInvoker(MetaClass.java:167)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.setBeanProperty(BeanWrapper.java:177)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.set(BeanWrapper.java:59)
	at org.apache.ibatis.reflection.MetaObject.setValue(MetaObject.java:140)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyPropertyMappings(DefaultResultSetHandler.java:455)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:404)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy164.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy163.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy95.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:177)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:78)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy113.getByPage(Unknown Source)
	at cn.codexing.blog.service.impl.CategoryServiceImpl.listCategory(CategoryServiceImpl.java:34)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$FastClassBySpringCGLIB$$1637de9a.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$EnhancerBySpringCGLIB$$a35f5176.listCategory(<generated>)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$FastClassBySpringCGLIB$$1637de9a.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$EnhancerBySpringCGLIB$$2413d910.listCategory(<generated>)
	at cn.codexing.blog.controller.CategoryController.getByPage(CategoryController.java:55)
	at cn.codexing.blog.controller.CategoryController$$FastClassBySpringCGLIB$$c3a1a214.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.CategoryController$$EnhancerBySpringCGLIB$$2c2a9adc.getByPage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 23:02:17.038 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:02:17.039 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:02:17.040 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 23:02:17.074 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:02:17.075 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 23:02:17.077 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:02:17.078 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:02:17.079 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:02:17.080 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:02:17.083 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:02:17.084 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:02:17.086 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:02:17.089 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:02:17.090 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 0(Integer), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property 'categoryName' of 'class cn.codexing.blog.vo.TagVO' with value '测试' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'categoryName' in 'class cn.codexing.blog.vo.TagVO'
	at cn.codexing.blog.service.impl.CategoryServiceImpl.listCategory(CategoryServiceImpl.java:34)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$FastClassBySpringCGLIB$$1637de9a.invoke(<generated>)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$EnhancerBySpringCGLIB$$a35f5176.listCategory(<generated>)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$FastClassBySpringCGLIB$$1637de9a.invoke(<generated>)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$EnhancerBySpringCGLIB$$2413d910.listCategory(<generated>)
	at cn.codexing.blog.controller.CategoryController.getByPage(CategoryController.java:55)
	at cn.codexing.blog.controller.CategoryController$$FastClassBySpringCGLIB$$c3a1a214.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.CategoryController$$EnhancerBySpringCGLIB$$2c2a9adc.getByPage(<generated>)
Caused by: org.apache.ibatis.reflection.ReflectionException: Could not set property 'categoryName' of 'class cn.codexing.blog.vo.TagVO' with value '测试' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'categoryName' in 'class cn.codexing.blog.vo.TagVO'
Caused by: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'categoryName' in 'class cn.codexing.blog.vo.TagVO'
(String), POST(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 23:02:17.094 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:02:17.096 ERROR [http-nio-8088-exec-4]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property 'categoryName' of 'class cn.codexing.blog.vo.TagVO' with value '测试' Cause: org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'categoryName' in 'class cn.codexing.blog.vo.TagVO'] with root cause
org.apache.ibatis.reflection.ReflectionException: There is no setter for property named 'categoryName' in 'class cn.codexing.blog.vo.TagVO'
	at org.apache.ibatis.reflection.Reflector.getSetInvoker(Reflector.java:365)
	at org.apache.ibatis.reflection.MetaClass.getSetInvoker(MetaClass.java:167)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.setBeanProperty(BeanWrapper.java:177)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.set(BeanWrapper.java:59)
	at org.apache.ibatis.reflection.MetaObject.setValue(MetaObject.java:140)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyPropertyMappings(DefaultResultSetHandler.java:455)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:404)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy164.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy163.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy95.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:177)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:78)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy113.getByPage(Unknown Source)
	at cn.codexing.blog.service.impl.CategoryServiceImpl.listCategory(CategoryServiceImpl.java:34)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$FastClassBySpringCGLIB$$1637de9a.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$EnhancerBySpringCGLIB$$a35f5176.listCategory(<generated>)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$FastClassBySpringCGLIB$$1637de9a.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.CategoryServiceImpl$$EnhancerBySpringCGLIB$$2413d910.listCategory(<generated>)
	at cn.codexing.blog.controller.CategoryController.getByPage(CategoryController.java:55)
	at cn.codexing.blog.controller.CategoryController$$FastClassBySpringCGLIB$$c3a1a214.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.CategoryController$$EnhancerBySpringCGLIB$$2c2a9adc.getByPage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 23:03:10.566 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 23:03:11.287 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 13372 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 23:03:11.288 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 23:03:11.289 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 23:03:11.606 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 23:03:12.975 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$3f48c4d5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:13.132 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:13.147 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$1e678c31] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:13.152 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:13.167 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:13.177 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$45d279f8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:13.188 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$93ef2846] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:13.230 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:13.308 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:13.315 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:13.529 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:03:13.593 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:03:13.880 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:03:14.232 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:14.239 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:14.248 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:14.253 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:14.269 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:14.331 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:14.721 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:14.768 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:03:15.150 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 23:03:15.159 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 23:03:15.160 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 23:03:15.160 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 23:03:15.278 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 23:03:15.279 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3915 ms
2020-04-19 23:03:16.798 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 23:03:17.188 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 23:03:17.202 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 23:03:17.230 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 23:03:17.392 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 23:03:17.427 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 23:03:17.434 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 23:03:17.440 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 23:03:17.451 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 23:03:17.468 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 23:03:17.475 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-19 23:03:17.504 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 23:03:17.524 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 23:03:17.526 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.89 seconds (JVM running for 8.122)
2020-04-19 23:03:21.408 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 23:03:21.409 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 23:03:21.423 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 14 ms
2020-04-19 23:03:21.511 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:03:21.512 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:03:21.513 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 23:03:21.515 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:03:21.515 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 23:03:21.601 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 23:03:21.782 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:03:21.801 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:03:21.815 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:03:21.817 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:03:21.822 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:03:21.823 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:03:21.825 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:03:21.826 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:03:21.828 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:03:21.829 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:03:21.831 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:03:21.832 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:03:21.833 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:03:21.834 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:03:21.835 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:03:21.836 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:03:21.837 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:03:21.838 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:03:21.839 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:03:21.840 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:03:21.841 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：330
2020-04-19 23:03:21.910 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:03:21.919 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:03:21.920 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 1(Integer), POST(String), 330(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 23:03:21.922 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:04:19.558 WARN  [http-nio-8088-exec-3]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:04:19.685 WARN  [http-nio-8088-exec-4]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:04:19.852 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 23:04:19.853 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:04:19.853 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:04:19.853 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 23:04:19.854 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:04:19.862 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 23:04:19.862 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:04:19.865 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 23:04:19.866 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:04:19.868 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:19.869 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:04:19.871 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:19.872 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:19.873 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:04:19.875 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:19.876 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:19.877 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:04:19.878 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:19.880 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:19.880 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:04:19.881 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:19.883 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:19.883 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:04:19.884 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:19.885 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:19.887 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:04:19.888 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:19.889 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:19.890 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 23:04:19.891 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:19.893 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:19.894 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 23:04:19.895 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:19.896 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 23:04:19.897 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：45
2020-04-19 23:04:19.899 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:04:19.901 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:04:19.902 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 45(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:04:19.904 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:04:33.439 WARN  [http-nio-8088-exec-7]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:04:33.589 WARN  [http-nio-8088-exec-8]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:04:33.742 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 23:04:33.743 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:04:33.743 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:04:33.743 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 23:04:33.743 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:04:33.745 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 23:04:33.746 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:04:33.747 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 23:04:33.748 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:04:33.750 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:33.751 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:04:33.752 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:33.753 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:33.754 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:04:33.755 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:33.757 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:33.757 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:04:33.758 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:33.760 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:33.760 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:04:33.761 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:33.762 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:33.763 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:04:33.764 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:33.765 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:33.766 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:04:33.767 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:33.768 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:33.769 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 23:04:33.770 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:33.772 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:04:33.772 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 23:04:33.773 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:04:33.775 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 23:04:33.775 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：33
2020-04-19 23:04:33.776 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:04:33.777 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:04:33.778 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 33(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:04:33.782 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:07:59.398 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:07:59.398 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:07:59.399 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:07:59.399 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:07:59.399 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:07:59.418 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:07:59.419 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 0(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d5bb04bf.getLoginInfo(<generated>)
(String), GET(String), 127.0.0.1(String)
2020-04-19 23:07:59.423 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:07:59.429 ERROR [http-nio-8088-exec-10]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d5bb04bf.getLoginInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 23:08:03.907 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/user/login
2020-04-19 23:08:03.908 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:08:03.908 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:08:03.909 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.sysLogin
2020-04-19 23:08:03.909 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:08:03.910 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==>  Preparing: select username,password from sys_user where username=? 
2020-04-19 23:08:03.911 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==> Parameters: admin(String)
2020-04-19 23:08:03.915 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -<==      Total: 1
2020-04-19 23:08:03.918 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：11
2020-04-19 23:08:03.919 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"token":"09713E9A42F6786A7100E389FAA32084"},"msg":"操作成功"}
2020-04-19 23:08:03.920 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:08:03.921 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/user/login(String), [SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null, isDeleted=null)](String), 1(Integer), POST(String), 11(Long), {"code":20000,"data":{"token":"09713E9A42F6786A7100E389FAA32084"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:08:03.924 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:08:04.152 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:08:04.152 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:08:04.153 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:08:04.153 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:08:04.153 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:08:04.154 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:08:04.160 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:08:04.164 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:08:04.166 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:08:04.170 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:08:04.315 WARN  [http-nio-8088-exec-3]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:08:04.618 WARN  [http-nio-8088-exec-4]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:08:04.618 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:08:04.619 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:08:04.619 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:08:04.619 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:08:04.620 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:08:04.624 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:08:04.625 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:08:04.627 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:08:04.628 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:08:04.631 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:08:04.632 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:08:04.634 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:08:04.636 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:08:04.637 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:08:04.638 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:08:04.640 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:08:04.641 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:08:04.643 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:08:04.645 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:08:04.646 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:08:04.647 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:08:04.648 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:08:04.649 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:08:04.650 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:08:04.651 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:08:04.652 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：34
2020-04-19 23:08:04.652 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:08:04.653 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:08:04.654 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 34(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:08:04.657 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:08:11.893 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/1
2020-04-19 23:08:11.893 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:08:11.894 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:08:11.894 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getById
2020-04-19 23:08:11.895 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:08:11.896 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category WHERE id=? 
2020-04-19 23:08:11.896 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:08:11.898 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 23:08:11.899 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-19 23:08:11.901 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}
2020-04-19 23:08:11.902 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:08:11.904 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/1(String), [1](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:08:11.907 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:08:35.512 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:08:35.512 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:08:35.513 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:08:35.513 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:08:35.513 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:08:35.518 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_enable = ? 
2020-04-19 23:08:35.519 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(String)
2020-04-19 23:08:35.521 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category WHERE is_enable = ? LIMIT ?,? 
2020-04-19 23:08:35.522 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(String), 0(Long), 10(Long)
2020-04-19 23:08:35.523 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:08:35.524 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:08:35.525 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:08:35.527 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:08:35.527 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:08:35.529 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:08:35.531 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:08:35.531 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:08:35.532 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:08:35.534 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:08:35.535 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:08:35.536 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:08:35.537 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:08:35.538 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:08:35.539 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:08:35.541 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:08:35.541 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：29
2020-04-19 23:08:35.542 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:08:35.543 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:08:35.544 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=5, pageSize=10, totalPage=1, currPage=1, list=[{id=1, categoryName=测试, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=6}, {id=2, categoryName=微服务, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=3}, {id=3, categoryName=数据库, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=1}, {id=4, categoryName=其他, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}, {id=5, categoryName=转载, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}], params={isEnable=1}, sortColumn=null)](String), 1(Integer), POST(String), 29(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:08:35.547 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:08:38.024 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:08:38.024 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:08:38.024 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:08:38.025 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:08:38.025 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:08:38.026 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_enable = ? 
2020-04-19 23:08:38.028 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(String)
2020-04-19 23:08:38.029 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-19 23:08:38.030 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[],"pageSize":10,"params":{},"totalCount":0,"totalPage":0},"msg":"操作成功"}
2020-04-19 23:08:38.031 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:08:38.032 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=5, pageSize=10, totalPage=1, currPage=1, list=[{id=1, categoryName=测试, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=6}, {id=2, categoryName=微服务, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=3}, {id=3, categoryName=数据库, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=1}, {id=4, categoryName=其他, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}, {id=5, categoryName=转载, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}], params={isEnable=0}, sortColumn=null)](String), 1(Integer), POST(String), 5(Long), {"code":20000,"data":{"currPage":1,"list":[],"pageSize":10,"params":{},"totalCount":0,"totalPage":0},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:08:38.034 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:09:29.142 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:09:29.142 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:09:29.143 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:09:29.143 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:09:29.143 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:09:29.146 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:09:29.148 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:09:29.149 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:09:29.150 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:09:29.153 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:09:29.153 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:09:29.155 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:09:29.157 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:09:29.158 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:09:29.160 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:09:29.162 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:09:29.163 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:09:29.165 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:09:29.166 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:09:29.167 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:09:29.168 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:09:29.169 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:09:29.169 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:09:29.170 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:09:29.171 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:09:29.172 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：30
2020-04-19 23:09:29.172 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:09:29.173 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:09:29.174 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 30(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:09:29.178 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:09:53.381 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:09:53.383 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:09:53.383 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:09:53.384 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:09:53.384 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:09:53.385 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 23:09:53.386 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:09:53.390 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:09:53.395 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d5bb04bf.getLoginInfo(<generated>)
(String), GET(String), 4(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:09:53.399 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:09:53.625 WARN  [http-nio-8088-exec-2]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:09:53.927 WARN  [http-nio-8088-exec-1]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:09:53.927 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:09:53.928 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:09:53.928 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:09:53.929 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:09:53.929 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:09:53.932 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:09:53.932 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:09:53.934 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:09:53.935 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:09:53.938 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:09:53.940 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:09:53.943 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:09:53.945 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:09:53.945 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:09:53.946 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:09:53.948 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:09:53.948 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:09:53.949 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:09:53.951 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:09:53.951 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:09:53.952 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:09:53.954 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:09:53.955 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:09:53.957 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:09:53.957 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:09:53.958 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：31
2020-04-19 23:09:53.958 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:09:53.959 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:09:53.960 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 31(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:09:53.962 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:10:53.498 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:10:53.499 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:10:53.499 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:10:53.499 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:10:53.500 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:10:53.500 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:10:53.500 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:10:53.501 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:10:53.502 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:10:53.505 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:10:54.177 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:10:54.177 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:10:54.177 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:10:54.177 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:10:54.178 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:10:54.192 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 23:10:54.194 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:10:54.195 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 23:10:54.196 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:10:54.204 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:10:54.205 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:10:54.206 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.208 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:10:54.209 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:10:54.210 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.212 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:10:54.212 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:10:54.213 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.215 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:10:54.215 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:10:54.216 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.219 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:10:54.220 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:10:54.221 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.222 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:10:54.223 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:10:54.224 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.226 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:10:54.226 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:10:54.228 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.229 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:10:54.229 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:10:54.230 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.232 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:10:54.232 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:10:54.233 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.235 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:10:54.236 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:10:54.237 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.239 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:10:54.240 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:10:54.241 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.242 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:10:54.243 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:10:54.245 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.246 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:10:54.247 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:10:54.248 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.249 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:10:54.249 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:10:54.278 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:10:54.279 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:10:54.280 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:10:54.281 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.282 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:10:54.283 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:10:54.284 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.286 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:10:54.287 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:10:54.288 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.289 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:10:54.289 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:10:54.290 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.292 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:10:54.293 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:10:54.294 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:10:54.295 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:10:54.295 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:10:54.296 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:10:54.297 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:10:54.298 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：122
2020-04-19 23:10:54.313 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 23:10:54.317 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:10:54.320 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=create_time)](String), 1(Integer), POST(String), 122(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:10:54.325 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:10:55.852 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:10:55.853 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:10:55.853 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:10:55.854 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:10:55.854 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:10:55.854 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:10:55.855 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:10:55.856 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:10:56.046 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:10:56.048 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:10:56.679 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:10:56.679 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:10:56.680 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:10:56.680 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:10:56.680 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:10:56.681 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:10:56.682 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:10:56.683 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:10:56.684 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:10:56.686 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:10:56.687 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:10:56.688 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:10:56.690 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:10:56.691 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:10:56.692 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:10:56.693 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:10:56.694 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:10:56.695 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:10:56.696 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:10:56.696 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:10:56.697 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:10:56.698 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:10:56.699 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:10:56.700 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:10:56.700 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:10:56.701 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-19 23:10:56.702 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:10:56.703 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:10:56.704 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 22(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:10:56.708 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:11:47.271 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:11:47.273 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:11:47.273 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:11:47.273 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:11:47.273 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:11:47.274 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:11:47.275 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:11:47.276 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:11:47.277 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:11:47.278 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:11:47.279 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:11:47.280 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:11:47.281 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:11:47.281 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:11:47.282 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:11:47.283 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:11:47.284 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:11:47.285 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:11:47.286 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:11:47.287 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:11:47.288 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:11:47.289 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:11:47.290 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:11:47.290 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:11:47.291 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:11:47.291 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：20
2020-04-19 23:11:47.292 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:11:47.293 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:11:47.293 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 20(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:11:47.295 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:11:56.119 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:11:56.119 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:11:56.120 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:11:56.120 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:11:56.121 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:11:56.123 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:11:56.123 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:11:56.125 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:11:56.125 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:11:56.127 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:11:56.127 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:11:56.128 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:11:56.130 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:11:56.130 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:11:56.131 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:11:56.133 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:11:56.134 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:11:56.135 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:11:56.136 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:11:56.137 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:11:56.138 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:11:56.138 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:11:56.138 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:11:56.139 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:11:56.140 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:11:56.140 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-19 23:11:56.140 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:11:56.141 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:11:56.141 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 22(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:11:56.145 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:12:10.243 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:12:10.243 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:12:10.243 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:12:10.243 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:12:10.244 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:12:10.246 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:12:10.246 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:12:10.247 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:12:10.248 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:12:10.250 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:10.251 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:12:10.252 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:10.253 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:10.253 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:12:10.254 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:10.255 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:10.255 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:12:10.256 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:10.257 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:10.257 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:12:10.258 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:10.259 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:10.260 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:12:10.261 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:10.262 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:12:10.262 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：19
2020-04-19 23:12:10.263 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:12:10.264 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:12:10.265 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d5bb04bf.getLoginInfo(<generated>)
(String), POST(String), 19(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:12:10.269 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:12:12.308 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:12:12.309 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:12:12.309 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:12:12.310 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:12:12.310 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:12:12.311 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-19 23:12:12.312 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:12:12.314 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:12:12.315 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:12:12.317 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:12:12.640 WARN  [http-nio-8088-exec-1]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:12:12.743 WARN  [http-nio-8088-exec-3]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:12:12.771 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:12:12.772 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:12:12.772 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:12:12.772 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:12:12.772 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:12:12.773 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:12:12.774 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:12:12.775 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:12:12.775 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:12:12.777 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:12.779 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:12:12.780 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:12.782 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:12.783 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:12:12.784 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:12.786 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:12.787 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:12:12.788 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:12.789 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:12.789 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:12:12.790 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:12.791 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:12.791 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:12:12.792 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:12.792 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:12:12.793 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-19 23:12:12.793 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:12:12.795 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:12:12.796 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 22(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:12:12.799 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:12:55.867 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:12:55.868 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:12:55.868 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:12:55.868 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:12:55.869 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:12:55.869 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:12:55.869 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:12:55.870 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:12:55.871 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:12:55.875 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:12:56.061 WARN  [http-nio-8088-exec-6]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:12:56.064 WARN  [http-nio-8088-exec-7]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:12:56.363 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:12:56.363 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:12:56.364 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:12:56.365 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:12:56.366 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:12:56.367 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:12:56.368 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:12:56.369 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:12:56.370 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:12:56.371 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:56.371 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:12:56.372 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:56.373 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:56.374 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:12:56.375 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:56.376 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:56.376 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:12:56.377 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:56.378 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:56.379 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:12:56.380 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:56.381 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:12:56.382 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:12:56.383 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:12:56.384 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:12:56.385 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-19 23:12:56.385 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:12:56.386 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:12:56.387 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 22(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:12:56.391 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:13:22.653 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:13:22.654 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:13:22.655 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-04-19 23:13:22.655 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:13:22.656 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：PostmanRuntime/7.24.1
2020-04-19 23:13:22.660 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:13:22.661 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:13:22.664 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:13:22.666 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:13:22.669 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:22.669 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:13:22.670 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:22.672 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:22.673 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:13:22.674 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:22.675 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:22.676 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:13:22.677 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:22.678 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:22.679 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:13:22.680 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:22.682 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:22.682 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:13:22.683 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:22.684 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:13:22.685 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：32
2020-04-19 23:13:22.685 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:13:22.687 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:13:22.687 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d5bb04bf.getLoginInfo(<generated>)
(String), POST(String), 32(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 0:0:0:0:0:0:0:1(String)
2020-04-19 23:13:22.689 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:13:42.726 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:13:42.727 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:13:42.727 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:13:42.727 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:13:42.727 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:13:42.728 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:13:42.729 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:13:42.730 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:13:42.731 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:13:42.732 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:42.733 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:13:42.734 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:42.736 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:42.737 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:13:42.738 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:42.739 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:42.740 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:13:42.741 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:42.742 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:42.743 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:13:42.744 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:42.745 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:42.746 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:13:42.747 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:42.748 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:13:42.748 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-19 23:13:42.749 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:13:42.750 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:13:42.751 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 22(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:13:42.754 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:13:47.584 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:13:47.585 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:13:47.585 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:13:47.586 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:13:47.586 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:13:47.587 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-19 23:13:47.587 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:13:47.588 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:13:47.589 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:13:47.592 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:13:47.748 WARN  [http-nio-8088-exec-3]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:13:48.051 WARN  [http-nio-8088-exec-4]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:13:48.055 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:13:48.056 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:13:48.057 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:13:48.057 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:13:48.058 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:13:48.060 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:13:48.061 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:13:48.062 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:13:48.063 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:13:48.066 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:48.067 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:13:48.069 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:48.071 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:48.071 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:13:48.073 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:48.074 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:48.075 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:13:48.076 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:48.077 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:48.078 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:13:48.079 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:48.080 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:13:48.080 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:13:48.082 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:13:48.083 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:13:48.083 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：28
2020-04-19 23:13:48.084 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:13:48.085 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:13:48.085 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 28(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:13:48.089 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:13:59.867 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/1
2020-04-19 23:13:59.867 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:13:59.867 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:13:59.868 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getById
2020-04-19 23:13:59.868 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:13:59.868 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category WHERE id=? 
2020-04-19 23:13:59.870 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:13:59.870 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 23:13:59.870 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-19 23:13:59.870 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}
2020-04-19 23:13:59.871 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:13:59.872 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/1(String), [1](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:13:59.875 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:14:30.996 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/2
2020-04-19 23:14:30.996 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:14:30.997 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:14:30.997 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getById
2020-04-19 23:14:30.997 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:14:30.998 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category WHERE id=? 
2020-04-19 23:14:30.998 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==> Parameters: 2(Integer)
2020-04-19 23:14:30.999 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 23:14:31.000 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 23:14:31.000 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}
2020-04-19 23:14:31.001 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:14:31.002 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/2(String), [2](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:14:31.005 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:14:39.880 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:14:39.881 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:14:39.882 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:14:39.882 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:14:39.883 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:14:39.884 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 23:14:39.884 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:14:39.885 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:14:39.885 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:14:39.889 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:14:40.528 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 23:14:40.528 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:14:40.528 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:14:40.529 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 23:14:40.529 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:14:40.530 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 23:14:40.530 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:14:40.532 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 23:14:40.533 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:14:40.534 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:40.535 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:14:40.536 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:14:40.537 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:40.538 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:14:40.540 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:14:40.541 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:40.541 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:14:40.542 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:14:40.543 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:40.543 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:14:40.544 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:14:40.545 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:40.545 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:14:40.546 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:14:40.547 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:40.548 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:14:40.549 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:14:40.550 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:40.551 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 23:14:40.552 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:14:40.553 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:40.554 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 23:14:40.555 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:14:40.555 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 23:14:40.556 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：28
2020-04-19 23:14:40.556 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:14:40.557 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:14:40.557 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d5bb04bf.getLoginInfo(<generated>)
(String), POST(String), 28(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:14:40.561 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:14:43.546 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/2
2020-04-19 23:14:43.547 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:14:43.548 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:14:43.548 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getById
2020-04-19 23:14:43.548 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:14:43.549 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag WHERE id=? 
2020-04-19 23:14:43.551 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==> Parameters: 2(Integer)
2020-04-19 23:14:43.552 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 23:14:43.552 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-19 23:14:43.552 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},"msg":"操作成功"}
2020-04-19 23:14:43.553 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:14:43.554 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/2(String), [2](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"id":2,"isDeleted":false,"isEnable":true,"name":"java"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:14:43.558 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:14:53.718 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:14:53.719 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:14:53.719 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:14:53.720 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:14:53.720 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:14:53.720 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:14:53.721 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:14:53.722 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:14:53.722 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:14:53.726 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:14:54.640 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:14:54.640 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:14:54.640 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:14:54.640 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:14:54.640 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:14:54.641 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:14:54.641 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:14:54.642 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:14:54.643 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:14:54.645 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:54.647 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:14:54.647 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:14:54.647 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:54.648 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:14:54.649 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:14:54.650 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:54.650 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:14:54.651 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:14:54.652 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:54.652 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:14:54.653 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:14:54.654 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:14:54.654 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:14:54.655 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:14:54.656 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:14:54.656 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：16
2020-04-19 23:14:54.657 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:14:54.657 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:14:54.658 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 16(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:14:54.662 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:14:57.148 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/1
2020-04-19 23:14:57.148 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:14:57.149 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:14:57.149 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getById
2020-04-19 23:14:57.149 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:14:57.150 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category WHERE id=? 
2020-04-19 23:14:57.150 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:14:57.151 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 23:14:57.152 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 23:14:57.152 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}
2020-04-19 23:14:57.152 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:14:57.153 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/1(String), [1](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:14:57.156 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:15:00.273 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:15:00.274 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:15:00.274 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:15:00.274 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:15:00.275 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:15:00.275 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:15:00.276 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:15:00.277 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:15:00.278 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:15:00.282 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:15:00.445 WARN  [http-nio-8088-exec-6]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:15:00.445 WARN  [http-nio-8088-exec-7]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:15:00.748 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:15:00.748 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:15:00.749 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:15:00.749 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:15:00.749 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:15:00.750 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:15:00.750 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:15:00.751 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:15:00.752 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:15:00.753 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:15:00.754 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:15:00.754 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:15:00.756 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:15:00.756 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:15:00.757 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:15:00.759 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:15:00.760 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:15:00.762 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:15:00.763 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:15:00.764 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:15:00.765 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:15:00.767 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:15:00.767 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:15:00.768 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:15:00.769 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:15:00.769 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：21
2020-04-19 23:15:00.770 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:15:00.771 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:15:00.771 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 21(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:15:00.776 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:15:02.619 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/1
2020-04-19 23:15:02.619 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:15:02.620 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:15:02.620 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getById
2020-04-19 23:15:02.620 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:15:02.621 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category WHERE id=? 
2020-04-19 23:15:02.621 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:15:02.622 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 23:15:02.623 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 23:15:02.623 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}
2020-04-19 23:15:02.624 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:15:02.624 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/1(String), [1](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"categoryName":"测试","id":1,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:15:02.628 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:16:03.838 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:16:03.839 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:16:03.841 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:16:03.841 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:16:03.842 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:16:03.842 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-19 23:16:03.843 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:16:03.845 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:16:03.846 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d5bb04bf.getLoginInfo(<generated>)
(String), GET(String), 4(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:16:03.848 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:16:04.012 WARN  [http-nio-8088-exec-2]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:16:04.315 WARN  [http-nio-8088-exec-1]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:16:04.318 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:16:04.319 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:16:04.320 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:16:04.320 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:16:04.321 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:16:04.324 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:16:04.326 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:16:04.328 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:16:04.328 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:16:04.330 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:04.331 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:16:04.332 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:04.334 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:04.334 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:16:04.335 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:04.336 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:04.336 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:16:04.337 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:04.338 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:04.338 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:16:04.341 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:04.342 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:04.343 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:16:04.344 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:04.345 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:16:04.345 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：27
2020-04-19 23:16:04.345 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:16:04.346 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:16:04.346 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 27(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:16:04.348 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:16:06.787 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/2
2020-04-19 23:16:06.787 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:16:06.788 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:16:06.788 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getById
2020-04-19 23:16:06.789 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:16:06.790 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category WHERE id=? 
2020-04-19 23:16:06.790 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==> Parameters: 2(Integer)
2020-04-19 23:16:06.792 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 23:16:06.793 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-19 23:16:06.793 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}
2020-04-19 23:16:06.794 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:16:06.794 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/2(String), [2](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"categoryName":"微服务","id":2,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:16:06.797 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:16:14.849 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/save
2020-04-19 23:16:14.849 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:16:14.849 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:16:14.849 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.saveCategory
2020-04-19 23:16:14.850 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:16:14.851 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.insert.debug:143 -==>  Preparing: INSERT INTO category ( category_name ) VALUES ( ? ) 
2020-04-19 23:16:14.852 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.insert.debug:143 -==> Parameters: sdfvdf sdfedfg(String)
2020-04-19 23:16:14.856 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:16:14.856 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-19 23:16:14.857 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"保存成功"}
2020-04-19 23:16:14.857 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:16:14.858 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/save(String), [Category(id=null, categoryName=sdfvdf sdfedfg, parentCategoryId=null, isEnable=null, isDeleted=null)](String), 1(Integer), POST(String), 7(Long), {"code":20000,"msg":"保存成功"}(String), 127.0.0.1(String)
2020-04-19 23:16:14.860 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:16:15.099 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:16:15.100 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:16:15.100 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:16:15.100 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:16:15.101 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:16:15.102 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:16:15.102 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:16:15.104 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:16:15.104 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:16:15.105 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:15.106 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:16:15.107 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:15.108 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:15.108 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:16:15.109 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:15.110 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:15.110 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:16:15.111 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:15.112 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:15.112 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:16:15.113 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:15.114 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:15.114 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:16:15.115 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:15.116 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:15.117 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:16:15.117 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:15.118 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 6
2020-04-19 23:16:15.119 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：20
2020-04-19 23:16:15.119 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":true}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:16:15.120 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:16:15.121 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=5, pageSize=10, totalPage=1, currPage=1, list=[{id=1, categoryName=测试, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=6}, {id=2, categoryName=微服务, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=3}, {id=3, categoryName=数据库, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=1}, {id=4, categoryName=其他, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}, {id=5, categoryName=转载, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 20(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":true}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:16:15.126 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:16:18.667 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/6
2020-04-19 23:16:18.667 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:16:18.668 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:16:18.668 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getById
2020-04-19 23:16:18.668 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:16:18.669 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==>  Preparing: SELECT id,category_name,parent_category_id,is_enable,is_deleted FROM category WHERE id=? 
2020-04-19 23:16:18.670 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -==> Parameters: 6(Integer)
2020-04-19 23:16:18.671 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 23:16:18.672 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-19 23:16:18.672 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"categoryName":"sdfvdf sdfedfg","id":6,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}
2020-04-19 23:16:18.673 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:16:18.673 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/6(String), [6](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"categoryName":"sdfvdf sdfedfg","id":6,"isDeleted":false,"isEnable":true,"parentCategoryId":-1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:16:18.677 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:16:20.584 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/update
2020-04-19 23:16:20.584 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-19 23:16:20.584 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:16:20.585 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.updateCategory
2020-04-19 23:16:20.585 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:16:20.589 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.updateById.debug:143 -==>  Preparing: UPDATE category SET category_name=?, parent_category_id=?, is_enable=?, is_deleted=? WHERE id=? 
2020-04-19 23:16:20.590 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.updateById.debug:143 -==> Parameters: sdfvdf sdfedfg(String), -1(Long), false(Boolean), false(Boolean), 6(Integer)
2020-04-19 23:16:20.593 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.updateById.debug:143 -<==    Updates: 1
2020-04-19 23:16:20.594 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-19 23:16:20.594 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"修改成功"}
2020-04-19 23:16:20.595 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:16:20.596 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/update(String), [Category(id=6, categoryName=sdfvdf sdfedfg, parentCategoryId=-1, isEnable=false, isDeleted=false)](String), 1(Integer), PUT(String), 10(Long), {"code":20000,"msg":"修改成功"}(String), 127.0.0.1(String)
2020-04-19 23:16:20.598 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:16:20.837 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:16:20.838 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:16:20.838 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:16:20.838 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:16:20.838 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:16:20.839 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:16:20.840 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:16:20.841 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:16:20.841 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:16:20.842 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:20.843 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:16:20.844 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:20.845 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:20.845 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:16:20.846 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:20.847 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:20.847 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:16:20.848 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:20.849 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:20.849 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:16:20.850 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:20.852 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:20.852 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:16:20.853 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:20.854 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:20.855 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:16:20.856 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:20.856 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 6
2020-04-19 23:16:20.857 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：20
2020-04-19 23:16:20.857 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:16:20.858 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:16:20.858 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=6, pageSize=10, totalPage=1, currPage=1, list=[{id=1, categoryName=测试, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=6}, {id=2, categoryName=微服务, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=3}, {id=3, categoryName=数据库, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=1}, {id=4, categoryName=其他, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}, {id=5, categoryName=转载, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}, {id=6, categoryName=sdfvdf sdfedfg, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 20(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:16:20.861 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:16:47.752 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:16:47.753 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:16:47.753 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:16:47.753 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:16:47.754 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:16:47.755 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:16:47.755 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:16:47.756 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:16:47.756 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:16:47.758 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:47.759 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:16:47.760 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:47.761 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:47.761 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:16:47.762 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:47.764 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:47.764 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:16:47.765 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:47.766 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:47.767 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:16:47.768 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:47.768 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:47.769 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:16:47.770 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:47.771 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:16:47.771 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:16:47.772 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:16:47.773 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 6
2020-04-19 23:16:47.773 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：21
2020-04-19 23:16:47.773 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:16:47.774 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:16:47.774 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d5bb04bf.getLoginInfo(<generated>)
(String), POST(String), 21(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:16:47.776 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:17:11.956 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:17:11.957 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:17:11.958 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:17:11.958 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:17:11.958 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:17:11.959 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:17:11.960 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:17:11.961 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:17:11.962 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:17:11.963 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:17:11.963 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:17:11.964 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:17:11.965 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:17:11.966 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:17:11.966 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:17:11.968 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:17:11.968 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:17:11.969 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:17:11.970 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:17:11.971 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:17:11.972 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:17:11.973 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:17:11.974 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:17:11.975 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:17:11.976 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:17:11.976 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:17:11.977 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:17:11.977 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 6
2020-04-19 23:17:11.978 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-19 23:17:11.978 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:17:11.979 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:17:11.979 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 22(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:17:11.983 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:17:18.746 WARN  [http-nio-8088-exec-1]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'PUT' not supported]
2020-04-19 23:17:59.766 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 23:18:00.382 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 15516 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 23:18:00.383 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 23:18:00.383 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 23:18:00.615 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 23:18:01.902 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$ebb6b4f2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.051 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.066 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$cad57c4e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.071 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.081 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.091 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$f2406a15] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.098 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$405d1863] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.130 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.196 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.203 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.396 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:18:02.454 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:18:02.707 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:18:02.961 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.968 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.976 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.980 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:02.992 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:03.030 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:03.292 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:03.315 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:18:03.597 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 23:18:03.606 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 23:18:03.607 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 23:18:03.607 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 23:18:03.704 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 23:18:03.704 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3264 ms
2020-04-19 23:18:05.176 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 23:18:05.554 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 23:18:05.569 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 23:18:05.596 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 23:18:05.764 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 23:18:05.801 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 23:18:05.808 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 23:18:05.814 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 23:18:05.825 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 23:18:05.845 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 23:18:05.852 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-19 23:18:05.888 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 23:18:05.923 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 23:18:05.926 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.101 seconds (JVM running for 7.468)
2020-04-19 23:18:10.456 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 23:18:10.456 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 23:18:10.469 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 12 ms
2020-04-19 23:18:10.503 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:18:10.504 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:18:10.505 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:18:10.506 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:18:10.507 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:18:10.588 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 23:18:10.739 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:18:10.753 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 0(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$2e02091e.getLoginInfo(<generated>)
(String), GET(String), 127.0.0.1(String)
2020-04-19 23:18:10.757 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:18:10.771 ERROR [http-nio-8088-exec-1]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$2e02091e.getLoginInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 23:18:16.312 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/user/login
2020-04-19 23:18:16.313 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:18:16.313 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:18:16.314 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.sysLogin
2020-04-19 23:18:16.314 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:18:16.318 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==>  Preparing: select username,password from sys_user where username=? 
2020-04-19 23:18:16.319 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==> Parameters: admin(String)
2020-04-19 23:18:16.327 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -<==      Total: 1
2020-04-19 23:18:16.330 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：18
2020-04-19 23:18:16.389 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"token":"0EF2BCEC94A5F2502FC72A3B8A8060B0"},"msg":"操作成功"}
2020-04-19 23:18:16.390 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:18:16.391 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/user/login(String), [SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null, isDeleted=null)](String), 1(Integer), POST(String), 18(Long), {"code":20000,"data":{"token":"0EF2BCEC94A5F2502FC72A3B8A8060B0"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:18:16.395 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:18:16.726 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:18:16.727 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:18:16.727 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:18:16.727 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:18:16.727 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:18:16.727 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：1
2020-04-19 23:18:16.734 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:18:16.735 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:18:16.737 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 1(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:18:16.741 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:18:16.977 WARN  [http-nio-8088-exec-4]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:18:17.202 WARN  [http-nio-8088-exec-5]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:18:17.228 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:18:17.229 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:18:17.229 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:18:17.229 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:18:17.229 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:18:17.275 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:18:17.276 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:18:17.280 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:18:17.281 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:18:17.285 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:17.286 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:18:17.290 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:17.292 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:17.293 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:18:17.294 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:17.295 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:17.295 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:18:17.296 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:17.298 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:17.300 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:18:17.301 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:17.303 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:17.303 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:18:17.304 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:17.306 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:17.307 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:18:17.308 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:17.308 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 6
2020-04-19 23:18:17.309 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：81
2020-04-19 23:18:17.313 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:18:17.316 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:18:17.317 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 81(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:18:17.319 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:18:20.695 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/delete/6
2020-04-19 23:18:20.696 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-19 23:18:20.697 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:18:20.697 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.deleteCategory
2020-04-19 23:18:20.698 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:18:20.699 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.deleteById.debug:143 -==>  Preparing: update category set is_deleted = 1 where id = ? 
2020-04-19 23:18:20.700 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.deleteById.debug:143 -==> Parameters: 6(Integer)
2020-04-19 23:18:20.703 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.deleteById.debug:143 -<==    Updates: 1
2020-04-19 23:18:20.704 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 23:18:20.704 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"删除成功"}
2020-04-19 23:18:20.705 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:18:20.706 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/delete/6(String), [6](String), 1(Integer), PUT(String), 9(Long), {"code":20000,"msg":"删除成功"}(String), 127.0.0.1(String)
2020-04-19 23:18:20.709 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:18:20.723 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:18:20.723 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:18:20.723 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:18:20.724 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:18:20.724 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:18:20.726 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:18:20.727 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:18:20.728 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:18:20.729 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:18:20.732 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:20.733 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:18:20.735 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:20.737 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:20.737 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:18:20.739 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:20.741 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:20.741 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:18:20.742 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:20.743 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:20.744 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:18:20.745 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:20.747 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:20.748 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:18:20.750 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:20.751 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:20.752 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:18:20.753 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:20.755 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 6
2020-04-19 23:18:20.755 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：32
2020-04-19 23:18:20.755 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:18:20.757 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:18:20.758 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=6, pageSize=10, totalPage=1, currPage=1, list=[{id=1, categoryName=测试, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=6}, {id=2, categoryName=微服务, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=3}, {id=3, categoryName=数据库, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=1}, {id=4, categoryName=其他, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}, {id=5, categoryName=转载, parentCategoryId=null, isEnable=true, isDeleted=null, articleCount=0}, {id=6, categoryName=sdfvdf sdfedfg, parentCategoryId=null, isEnable=false, isDeleted=null, articleCount=0}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 32(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:18:20.760 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:18:45.167 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:18:45.167 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:18:45.167 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:18:45.167 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:18:45.168 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:18:45.168 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：1
2020-04-19 23:18:45.169 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:18:45.170 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:18:45.173 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 1(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:18:45.179 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:18:45.382 WARN  [http-nio-8088-exec-10]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:18:45.388 WARN  [http-nio-8088-exec-1]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:18:45.685 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:18:45.685 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:18:45.685 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:18:45.685 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:18:45.686 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:18:45.687 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category 
2020-04-19 23:18:45.687 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:18:45.690 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category LIMIT ?,? 
2020-04-19 23:18:45.691 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:18:45.694 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:45.695 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:18:45.697 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:45.698 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:45.699 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:18:45.700 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:45.701 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:45.701 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:18:45.702 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:45.704 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:45.705 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:18:45.708 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:45.711 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:45.712 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:18:45.714 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:45.716 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:18:45.716 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:18:45.717 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:18:45.718 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 6
2020-04-19 23:18:45.719 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：34
2020-04-19 23:18:45.719 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:18:45.720 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:18:45.721 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 34(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true},{"articleCount":"0","categoryName":"sdfvdf sdfedfg","id":6,"isEnable":false}],"pageSize":10,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:18:45.725 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:20:10.570 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:20:10.570 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:20:10.571 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:20:10.571 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:20:10.571 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:20:10.572 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:20:10.572 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:20:10.576 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:20:10.577 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:20:10.582 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:20:11.231 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 23:20:11.231 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:20:11.231 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:20:11.231 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 23:20:11.231 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:20:11.240 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 23:20:11.240 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:20:11.244 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 23:20:11.245 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:20:11.247 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:11.248 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:20:11.250 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:11.251 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:11.252 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:20:11.254 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:11.255 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:11.256 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:20:11.257 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:11.258 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:11.259 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:20:11.260 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:11.261 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:11.262 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:20:11.263 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:11.265 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:11.266 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:20:11.268 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:11.269 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:11.270 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 23:20:11.271 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:11.272 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:11.273 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 23:20:11.274 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:11.275 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 23:20:11.276 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：45
2020-04-19 23:20:11.278 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:20:11.280 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:20:11.281 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 45(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:20:11.283 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:20:15.323 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/delete/8
2020-04-19 23:20:15.323 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-19 23:20:15.324 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:20:15.324 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.deleteTag
2020-04-19 23:20:15.324 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:20:15.325 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.deleteById.debug:143 -==>  Preparing: update tag set is_deleted = 1 where id = ? 
2020-04-19 23:20:15.326 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.deleteById.debug:143 -==> Parameters: 8(Integer)
2020-04-19 23:20:15.331 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.deleteById.debug:143 -<==    Updates: 1
2020-04-19 23:20:15.332 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 23:20:15.332 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"删除成功"}
2020-04-19 23:20:15.333 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:20:15.334 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/delete/8(String), [8](String), 1(Integer), PUT(String), 9(Long), {"code":20000,"msg":"删除成功"}(String), 127.0.0.1(String)
2020-04-19 23:20:15.337 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:20:15.575 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 23:20:15.575 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:20:15.575 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:20:15.576 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 23:20:15.576 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:20:15.577 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag 
2020-04-19 23:20:15.578 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:20:15.580 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag LIMIT ?,? 
2020-04-19 23:20:15.581 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:20:15.583 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:15.583 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:20:15.585 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:15.587 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:15.587 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:20:15.588 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:15.590 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:15.590 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:20:15.591 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:15.593 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:15.594 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:20:15.596 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:15.598 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:15.599 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:20:15.600 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:15.602 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:15.602 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:20:15.603 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:15.605 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:15.605 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 23:20:15.606 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:15.608 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:20:15.608 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 8(Integer)
2020-04-19 23:20:15.609 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:20:15.611 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 23:20:15.612 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：37
2020-04-19 23:20:15.612 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:20:15.614 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:20:15.615 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=8, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=2, name=java, isEnable=true, isDeleted=null, articleCount=6}, {id=3, name=mysql, isEnable=true, isDeleted=null, articleCount=2}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}, {id=6, name=vue, isEnable=true, isDeleted=null, articleCount=0}, {id=7, name=面试, isEnable=true, isDeleted=null, articleCount=0}, {id=8, name=sdfsdfsdfds, isEnable=false, isDeleted=null, articleCount=0}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 37(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":8,"isEnable":false,"name":"sdfsdfsdfds"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:20:15.618 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:03.578 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-19 23:21:04.418 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 17908 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-19 23:21:04.420 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-19 23:21:04.421 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-19 23:21:04.878 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-19 23:21:05.983 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [cn.codexing.blog.common.config.ShiroConfig$$EnhancerBySpringCGLIB$$26bd3eef] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:06.165 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:06.178 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatisPlusConfig' of type [cn.codexing.blog.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$5dc064b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:06.184 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:06.195 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'optimisticLockerInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:06.204 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$2d46f412] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:06.211 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidConfig' of type [cn.codexing.blog.common.config.DruidConfig$$EnhancerBySpringCGLIB$$7b63a260] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:06.244 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'druidDataSource' of type [com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:06.315 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:06.321 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:06.547 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:21:06.693 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:21:06.855 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-19 23:21:07.127 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:07.134 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:07.141 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:07.145 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserMapper' of type [com.sun.proxy.$Proxy96] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:07.157 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sysUserServiceImpl' of type [cn.codexing.blog.service.impl.SysUserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:07.193 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userRealm' of type [cn.codexing.blog.realm.UserRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:07.475 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:07.506 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-19 23:21:07.828 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-19 23:21:07.837 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-19 23:21:07.837 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-19 23:21:07.837 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-19 23:21:07.931 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-19 23:21:07.931 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3409 ms
2020-04-19 23:21:09.584 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-19 23:21:10.051 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-19 23:21:10.066 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-19 23:21:10.100 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-19 23:21:10.292 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-19 23:21:10.336 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-19 23:21:10.343 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-19 23:21:10.351 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-19 23:21:10.365 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-19 23:21:10.384 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-19 23:21:10.391 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-19 23:21:10.425 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-19 23:21:10.449 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-19 23:21:10.452 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.812 seconds (JVM running for 8.013)
2020-04-19 23:21:25.158 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-19 23:21:25.158 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-19 23:21:25.171 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 13 ms
2020-04-19 23:21:25.205 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:21:25.206 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:21:25.207 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:25.209 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:21:25.209 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:25.292 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-19 23:21:25.447 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:25.461 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 0(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d02b7a14.getLoginInfo(<generated>)
(String), GET(String), 127.0.0.1(String)
2020-04-19 23:21:25.467 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:25.482 ERROR [http-nio-8088-exec-1]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d02b7a14.getLoginInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 23:21:30.441 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/user/login
2020-04-19 23:21:30.442 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:21:30.442 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:30.443 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.sysLogin
2020-04-19 23:21:30.443 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:30.446 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==>  Preparing: select username,password from sys_user where username=? 
2020-04-19 23:21:30.447 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -==> Parameters: admin(String)
2020-04-19 23:21:30.460 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserByName.debug:143 -<==      Total: 1
2020-04-19 23:21:30.463 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-19 23:21:30.522 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"token":"9F267EF0190CE8AF63242C7F662E3AA5"},"msg":"操作成功"}
2020-04-19 23:21:30.524 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:30.525 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/user/login(String), [SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null, isDeleted=null)](String), 1(Integer), POST(String), 22(Long), {"code":20000,"data":{"token":"9F267EF0190CE8AF63242C7F662E3AA5"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:30.529 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:30.559 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:21:30.560 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:21:30.560 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:30.560 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:21:30.560 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:30.561 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:21:30.567 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:21:30.569 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:30.570 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:30.574 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:31.045 WARN  [http-nio-8088-exec-4]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:21:31.057 WARN  [http-nio-8088-exec-5]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:21:31.085 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 23:21:31.085 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:21:31.086 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:31.086 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 23:21:31.086 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:31.132 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_deleted = 0 
2020-04-19 23:21:31.133 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:21:31.137 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_deleted = 0 LIMIT ?,? 
2020-04-19 23:21:31.138 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:21:31.142 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:31.143 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:21:31.145 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:31.146 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:31.147 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:21:31.149 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:31.150 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:31.151 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:21:31.151 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:31.153 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:31.153 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:21:31.155 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:31.158 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:31.158 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:21:31.159 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:31.161 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:31.162 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:21:31.163 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:31.164 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:31.165 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 23:21:31.166 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:31.167 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 23:21:31.168 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：83
2020-04-19 23:21:31.173 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:21:31.175 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:31.176 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 83(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:31.178 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:36.293 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/save
2020-04-19 23:21:36.294 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:21:36.294 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:36.294 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.saveTag
2020-04-19 23:21:36.294 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:36.296 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.insert.debug:143 -==>  Preparing: INSERT INTO tag ( name ) VALUES ( ? ) 
2020-04-19 23:21:36.297 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.insert.debug:143 -==> Parameters: sdfdsf(String)
2020-04-19 23:21:36.302 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:36.303 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-19 23:21:36.304 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"保存成功"}
2020-04-19 23:21:36.306 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:36.308 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/save(String), [Tag(id=null, name=sdfdsf, isEnable=null, isDeleted=null)](String), 1(Integer), POST(String), 10(Long), {"code":20000,"msg":"保存成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:36.311 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:36.638 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 23:21:36.638 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:21:36.639 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:36.640 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 23:21:36.640 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:36.642 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_deleted = 0 
2020-04-19 23:21:36.642 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:21:36.644 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_deleted = 0 LIMIT ?,? 
2020-04-19 23:21:36.645 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:21:36.646 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:36.647 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:21:36.648 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:36.650 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:36.650 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:21:36.651 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:36.653 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:36.654 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:21:36.656 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:36.657 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:36.658 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:21:36.660 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:36.661 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:36.662 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:21:36.663 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:36.665 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:36.666 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:21:36.667 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:36.668 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:36.669 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 23:21:36.671 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:36.673 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:36.674 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 9(Integer)
2020-04-19 23:21:36.674 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:36.676 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 23:21:36.676 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：38
2020-04-19 23:21:36.676 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":9,"isEnable":true,"name":"sdfdsf"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:21:36.678 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:36.679 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=7, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=2, name=java, isEnable=true, isDeleted=null, articleCount=6}, {id=3, name=mysql, isEnable=true, isDeleted=null, articleCount=2}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}, {id=6, name=vue, isEnable=true, isDeleted=null, articleCount=0}, {id=7, name=面试, isEnable=true, isDeleted=null, articleCount=0}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 38(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":9,"isEnable":true,"name":"sdfdsf"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:36.684 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:39.089 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/9
2020-04-19 23:21:39.090 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:21:39.090 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:39.090 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getById
2020-04-19 23:21:39.090 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:39.092 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==>  Preparing: SELECT id,name,is_enable,is_deleted FROM tag WHERE id=? 
2020-04-19 23:21:39.093 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -==> Parameters: 9(Integer)
2020-04-19 23:21:39.095 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.selectById.debug:143 -<==      Total: 1
2020-04-19 23:21:39.096 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-19 23:21:39.098 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"id":9,"isDeleted":false,"isEnable":true,"name":"sdfdsf"},"msg":"操作成功"}
2020-04-19 23:21:39.099 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:39.100 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/9(String), [9](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":{"id":9,"isDeleted":false,"isEnable":true,"name":"sdfdsf"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:39.104 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:40.888 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/update
2020-04-19 23:21:40.888 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-19 23:21:40.888 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:40.889 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.updateTag
2020-04-19 23:21:40.889 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:40.892 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.updateById.debug:143 -==>  Preparing: UPDATE tag SET name=?, is_enable=?, is_deleted=? WHERE id=? 
2020-04-19 23:21:40.893 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.updateById.debug:143 -==> Parameters: sdfdsf(String), false(Boolean), false(Boolean), 9(Integer)
2020-04-19 23:21:40.896 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.updateById.debug:143 -<==    Updates: 1
2020-04-19 23:21:40.897 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 23:21:40.897 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"更新成功"}
2020-04-19 23:21:40.898 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:40.899 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/update(String), [Tag(id=9, name=sdfdsf, isEnable=false, isDeleted=false)](String), 1(Integer), PUT(String), 9(Long), {"code":20000,"msg":"更新成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:40.902 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:41.141 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 23:21:41.141 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:21:41.141 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:41.141 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 23:21:41.142 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:41.143 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_deleted = 0 
2020-04-19 23:21:41.143 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:21:41.145 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_deleted = 0 LIMIT ?,? 
2020-04-19 23:21:41.145 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:21:41.148 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:41.148 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:21:41.149 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:41.152 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:41.153 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:21:41.155 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:41.156 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:41.157 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:21:41.159 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:41.160 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:41.161 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:21:41.162 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:41.164 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:41.164 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:21:41.166 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:41.167 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:41.169 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:21:41.170 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:41.171 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:41.172 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 23:21:41.173 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:41.175 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:41.175 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 9(Integer)
2020-04-19 23:21:41.176 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:41.177 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 8
2020-04-19 23:21:41.178 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：37
2020-04-19 23:21:41.178 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":9,"isEnable":false,"name":"sdfdsf"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:21:41.179 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:41.180 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=8, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=2, name=java, isEnable=true, isDeleted=null, articleCount=6}, {id=3, name=mysql, isEnable=true, isDeleted=null, articleCount=2}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}, {id=6, name=vue, isEnable=true, isDeleted=null, articleCount=0}, {id=7, name=面试, isEnable=true, isDeleted=null, articleCount=0}, {id=9, name=sdfdsf, isEnable=true, isDeleted=null, articleCount=0}], params={}, sortColumn=null)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d02b7a14.getLoginInfo(<generated>)
(String), POST(String), 37(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"},{"articleCount":"0","id":9,"isEnable":false,"name":"sdfdsf"}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:41.186 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:48.248 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/delete/9
2020-04-19 23:21:48.250 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-19 23:21:48.251 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:48.253 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.deleteTag
2020-04-19 23:21:48.254 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:48.259 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.deleteById.debug:143 -==>  Preparing: update tag set is_deleted = 1 where id = ? 
2020-04-19 23:21:48.260 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.deleteById.debug:143 -==> Parameters: 9(Integer)
2020-04-19 23:21:48.265 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.deleteById.debug:143 -<==    Updates: 1
2020-04-19 23:21:48.266 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：18
2020-04-19 23:21:48.266 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"删除成功"}
2020-04-19 23:21:48.268 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:48.269 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/delete/9(String), [9](String), 1(Integer), PUT(String), 18(Long), {"code":20000,"msg":"删除成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:48.272 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:48.593 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 23:21:48.594 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:21:48.594 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:48.595 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 23:21:48.595 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:48.597 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_deleted = 0 
2020-04-19 23:21:48.599 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:21:48.602 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_deleted = 0 LIMIT ?,? 
2020-04-19 23:21:48.604 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:21:48.606 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:48.606 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:21:48.608 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:48.609 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:48.610 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:21:48.611 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:48.612 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:48.613 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:21:48.614 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:48.615 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:48.616 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:21:48.618 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:48.620 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:48.621 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:21:48.622 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:48.623 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:48.624 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:21:48.625 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:48.626 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:48.627 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 23:21:48.628 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:21:48.628 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 23:21:48.629 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：36
2020-04-19 23:21:48.629 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:21:48.630 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:48.631 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=8, pageSize=10, totalPage=1, currPage=1, list=[{id=1, name=spring, isEnable=true, isDeleted=null, articleCount=4}, {id=2, name=java, isEnable=true, isDeleted=null, articleCount=6}, {id=3, name=mysql, isEnable=true, isDeleted=null, articleCount=2}, {id=4, name=javascript, isEnable=true, isDeleted=null, articleCount=0}, {id=5, name=Python, isEnable=true, isDeleted=null, articleCount=0}, {id=6, name=vue, isEnable=true, isDeleted=null, articleCount=0}, {id=7, name=面试, isEnable=true, isDeleted=null, articleCount=0}, {id=9, name=sdfdsf, isEnable=false, isDeleted=null, articleCount=0}], params={}, sortColumn=null)](String), 1(Integer), POST(String), 36(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:48.634 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:50.508 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:21:50.508 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:21:50.509 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:50.509 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:21:50.509 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:50.510 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:21:50.510 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:21:50.511 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:50.512 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:50.516 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:21:51.443 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:21:51.444 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:21:51.444 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:21:51.444 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:21:51.445 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:21:51.453 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_deleted = 0 
2020-04-19 23:21:51.454 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:21:51.455 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category WHERE is_deleted = 0 LIMIT ?,? 
2020-04-19 23:21:51.456 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:21:51.458 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:51.458 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:21:51.460 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:21:51.461 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:51.461 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:21:51.462 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:21:51.464 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:51.465 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:21:51.466 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:21:51.468 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:51.468 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:21:51.470 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:21:51.471 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:21:51.471 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:21:51.472 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:21:51.473 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:21:51.473 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：30
2020-04-19 23:21:51.475 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:21:51.476 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:21:51.477 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 30(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":10,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:21:51.482 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:22:01.148 WARN  [http-nio-8088-exec-6]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; nested exception is java.lang.NumberFormatException: For input string: "list"]
2020-04-19 23:22:53.108 WARN  [http-nio-8088-exec-7]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; nested exception is java.lang.NumberFormatException: For input string: "list"]
2020-04-19 23:23:34.507 WARN  [http-nio-8088-exec-8]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:24:29.290 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:24:29.291 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:24:29.292 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:24:29.292 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:24:29.292 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:24:29.298 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:24:29.299 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:24:29.301 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-19 23:24:29.301 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-19 23:24:29.303 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:24:29.304 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:24:29.305 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:24:29.306 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:24:29.307 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:24:29.308 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:24:29.309 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:24:29.310 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:24:29.311 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:24:29.312 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:24:29.312 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:24:29.313 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:24:29.314 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:24:29.315 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:24:29.316 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:24:29.317 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:24:29.317 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：27
2020-04-19 23:24:29.318 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:24:29.319 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:24:29.319 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 27(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:24:29.321 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:24:43.881 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:24:43.881 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:24:43.882 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:24:43.882 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:24:43.882 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:24:43.893 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:24:43.894 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:24:43.899 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 23:24:43.900 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 23:24:43.903 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:43.903 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:24:43.904 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:43.905 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:43.906 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:24:43.908 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:43.910 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:43.911 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:24:43.912 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:43.914 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:43.914 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:24:43.915 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:43.917 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:43.917 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:24:43.918 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:43.919 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:43.920 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:24:43.921 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:43.923 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:43.923 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:24:43.924 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:43.926 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:43.926 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:24:43.928 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:43.931 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:43.932 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:24:43.933 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:43.934 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:43.935 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:24:43.936 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:43.938 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:43.938 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:24:44.132 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:44.133 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:44.134 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:24:44.135 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:24:44.136 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:44.137 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:24:44.137 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:44.138 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:44.139 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:24:44.140 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:44.142 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:44.142 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:24:44.145 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:44.146 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:44.148 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:24:44.149 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:44.150 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:44.151 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:24:44.152 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:44.153 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:44.153 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:24:44.154 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:24:44.156 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:44.157 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:24:44.158 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:44.159 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:44.160 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:24:44.161 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:44.163 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:24:44.164 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：283
2020-04-19 23:24:44.176 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:24:44.181 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:24:44.183 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 283(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:24:44.189 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:24:49.155 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-19 23:24:49.155 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:24:49.156 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:24:49.156 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-19 23:24:49.156 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:24:49.157 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-19 23:24:49.158 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-19 23:24:49.161 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-19 23:24:49.163 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-19 23:24:49.165 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-19 23:24:49.169 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-19 23:24:49.170 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-19 23:24:49.170 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-19 23:24:49.171 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-19 23:24:49.172 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：17
2020-04-19 23:24:49.179 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"asdasd"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的f"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-19 23:24:49.181 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:24:49.182 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d02b7a14.getLoginInfo(<generated>)
(String), GET(String), 17(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"asdasd"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的f"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:24:49.185 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:24:57.155 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:24:57.155 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:24:57.156 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:24:57.157 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:24:57.157 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:24:57.159 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:24:57.160 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:24:57.161 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-19 23:24:57.161 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-19 23:24:57.163 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:24:57.163 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:24:57.164 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.166 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:24:57.166 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:24:57.167 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.168 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:24:57.169 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:24:57.170 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.171 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:24:57.171 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:24:57.172 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.174 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:24:57.175 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:24:57.176 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.177 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:24:57.177 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-19 23:24:57.178 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:24:57.179 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:24:57.180 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 22(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:24:57.184 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:24:57.537 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:24:57.537 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:24:57.537 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:24:57.537 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:24:57.538 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:24:57.543 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:24:57.544 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:24:57.545 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 23:24:57.546 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 23:24:57.548 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:57.549 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:24:57.550 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.551 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:57.551 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:24:57.552 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.554 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:57.554 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:24:57.555 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.556 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:57.557 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:24:57.558 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.561 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:57.561 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:24:57.562 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.563 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:57.564 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:24:57.565 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.566 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:57.566 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:24:57.567 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.568 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:57.569 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:24:57.570 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.571 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:57.571 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:24:57.572 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.573 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:57.574 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:24:57.575 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.577 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:57.578 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:24:57.579 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.580 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:57.581 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:24:57.582 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:24:57.584 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:57.584 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:24:57.585 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.586 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:57.586 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:24:57.587 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.589 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:57.589 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:24:57.590 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.592 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:57.592 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:24:57.594 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.595 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:57.595 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:24:57.596 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.597 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:57.598 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:24:57.598 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:24:57.599 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:24:57.600 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:24:57.601 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.602 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:24:57.602 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:24:57.603 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:24:57.604 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:24:57.604 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：67
2020-04-19 23:24:57.605 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:24:57.608 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:24:57.610 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 67(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:24:57.616 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:25:20.013 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:25:20.014 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:25:20.014 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:25:20.014 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:25:20.014 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:25:20.016 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:25:20.017 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:25:20.019 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-19 23:25:20.019 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-19 23:25:20.021 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:20.021 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:25:20.022 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:20.024 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:20.024 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:25:20.025 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:20.026 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:20.026 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:25:20.027 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:20.028 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:20.029 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:25:20.030 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:20.031 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:20.031 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:25:20.032 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:20.033 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:25:20.034 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：21
2020-04-19 23:25:20.034 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:25:20.035 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:25:20.035 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 21(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:25:20.039 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:25:21.419 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-19 23:25:21.419 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:25:21.420 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:25:21.420 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-19 23:25:21.421 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:25:21.423 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-19 23:25:21.423 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-19 23:25:21.424 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-19 23:25:21.426 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-19 23:25:21.426 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-19 23:25:21.429 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-19 23:25:21.430 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-19 23:25:21.431 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-19 23:25:21.434 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-19 23:25:21.434 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：15
2020-04-19 23:25:21.435 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"asdasd"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的f"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-19 23:25:21.437 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:25:21.437 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 15(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"asdasd"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的f"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:25:21.447 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:25:23.695 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:25:23.695 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:25:23.696 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:25:23.696 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:25:23.696 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:25:23.697 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:25:23.698 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:25:23.699 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-19 23:25:23.700 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-19 23:25:23.701 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:23.701 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:25:23.702 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:23.703 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:23.704 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:25:23.705 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:23.706 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:23.706 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:25:23.707 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:23.708 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:23.709 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:25:23.710 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:23.711 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:23.711 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:25:23.712 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:23.712 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:25:23.713 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：18
2020-04-19 23:25:23.713 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:25:23.714 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:25:23.714 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 18(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:25:23.718 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:25:44.670 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:25:44.671 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:25:44.671 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:25:44.671 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:25:44.672 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:25:44.674 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:25:44.674 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:25:44.677 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 23:25:44.678 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 23:25:44.680 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:44.680 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:25:44.681 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.682 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:44.683 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:25:44.684 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.685 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:44.685 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:25:44.686 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.687 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:44.687 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:25:44.688 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.689 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:44.690 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:25:44.691 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.692 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:44.693 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:25:44.694 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.696 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:44.696 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:25:44.697 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.698 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:44.698 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:25:44.699 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.700 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:44.701 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:25:44.702 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.702 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:44.703 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:25:44.704 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.705 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:44.705 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:25:44.706 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.707 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:44.707 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:25:44.709 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:25:44.710 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:44.711 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:25:44.713 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.714 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:44.714 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:25:44.715 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.716 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:44.717 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:25:44.717 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.718 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:44.719 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:25:44.720 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.721 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:44.721 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:25:44.722 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.723 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:44.724 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:25:44.725 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:25:44.727 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:44.727 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:25:44.729 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.729 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:44.730 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:25:44.731 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:44.731 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:25:44.732 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：62
2020-04-19 23:25:44.733 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:25:44.735 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:25:44.735 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 62(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:25:44.742 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:25:46.449 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-19 23:25:46.446 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:25:46.450 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:25:46.450 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:25:46.450 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:25:46.451 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-19 23:25:46.451 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:25:46.451 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:25:46.451 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:25:46.453 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:25:46.453 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:25:46.454 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:25:46.456 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-19 23:25:46.456 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-19 23:25:46.459 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:46.460 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:25:46.461 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.463 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:46.464 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:25:46.466 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.466 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:25:46.467 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:25:46.467 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:46.468 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:25:46.469 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.471 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:46.471 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 23:25:46.471 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 23:25:46.471 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:25:46.472 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.473 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.474 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:46.474 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:25:46.474 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:25:46.476 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.477 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.477 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:46.478 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-19 23:25:46.478 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.479 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:25:46.479 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.480 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.481 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:46.481 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-19 23:25:46.482 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.482 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.482 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:25:46.484 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-19 23:25:46.485 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.486 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：37
2020-04-19 23:25:46.486 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.487 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:25:46.486 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:25:46.489 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.491 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.492 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:25:46.493 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.495 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.490 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:25:46.496 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:25:46.498 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 37(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"4","id":1,"isEnable":true,"name":"spring"},{"articleCount":"6","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:25:46.498 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.500 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.501 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:25:46.503 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:25:46.506 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.507 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.508 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:25:46.510 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.512 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.513 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:25:46.514 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.516 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.517 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:25:46.518 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.519 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.520 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:25:46.520 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.521 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.522 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:25:46.523 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:25:46.525 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.526 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:25:46.527 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.529 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.530 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:25:46.531 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.532 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.533 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:25:46.535 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.536 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.536 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:25:46.537 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.539 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.540 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:25:46.542 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.543 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.544 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:25:46.546 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:25:46.548 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.548 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:25:46.549 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.551 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.552 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:25:46.553 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.555 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:25:46.556 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：110
2020-04-19 23:25:46.558 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:25:46.561 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:25:46.563 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 110(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:25:46.570 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:25:46.694 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-19 23:25:46.694 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:25:46.694 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:25:46.694 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-19 23:25:46.695 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:25:46.695 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-19 23:25:46.696 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-19 23:25:46.698 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.699 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:25:46.700 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.701 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.702 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:25:46.703 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.704 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:25:46.704 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:25:46.705 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.706 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:25:46.706 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:25:46.707 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:25:46.708 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 2
2020-04-19 23:25:46.709 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：15
2020-04-19 23:25:46.710 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"},{"category":{"categoryName":"测试","id":1},"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","likeCount":0,"tagList":[{"id":2,"name":"java"}],"title":"test"}],"msg":"操作成功"}
2020-04-19 23:25:46.711 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:25:46.712 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 15(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"},{"category":{"categoryName":"测试","id":1},"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","likeCount":0,"tagList":[{"id":2,"name":"java"}],"title":"test"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:25:46.715 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:25:46.753 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-19 23:25:46.754 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:25:46.754 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:25:46.754 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-19 23:25:46.755 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:25:46.783 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-19 23:25:46.784 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-19 23:25:46.785 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-19 23:25:46.786 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：33
2020-04-19 23:25:46.787 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-19 23:25:46.788 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:25:46.789 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d02b7a14.getLoginInfo(<generated>)
(String), GET(String), 33(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:25:46.791 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:25:48.717 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:25:48.718 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:25:48.718 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:25:48.718 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:25:48.718 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:25:48.720 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:25:48.720 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:25:48.722 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-19 23:25:48.722 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-19 23:25:48.725 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:48.725 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:25:48.726 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:48.728 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:48.728 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:25:48.729 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:48.730 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:48.731 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:25:48.732 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:48.733 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:48.734 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:25:48.735 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:48.736 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:25:48.736 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:25:48.737 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:25:48.738 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:25:48.739 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-19 23:25:48.739 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:25:48.740 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:25:48.740 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 22(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:25:48.787 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:26:06.201 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:26:06.202 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:26:06.203 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:26:06.204 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:26:06.204 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:26:06.206 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:26:06.207 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:26:06.208 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 23:26:06.209 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 23:26:06.210 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:06.210 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:26:06.211 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.212 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:06.213 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:26:06.214 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.215 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:06.215 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:26:06.216 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.216 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:06.217 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:26:06.218 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.220 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:06.220 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:26:06.221 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.222 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:06.223 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:26:06.223 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.224 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:06.225 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:26:06.226 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.226 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:06.227 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:26:06.228 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.229 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:06.229 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:26:06.230 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.231 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:06.231 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:26:06.232 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.233 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:06.233 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:26:06.234 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.235 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:06.236 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:26:06.237 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:26:06.238 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:06.239 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:26:06.240 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.240 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:06.241 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:26:06.242 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.243 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:06.243 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:26:06.244 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.245 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:06.245 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:26:06.246 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.247 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:06.247 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:26:06.248 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.249 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:06.250 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:26:06.251 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:26:06.253 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:06.254 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:26:06.255 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.256 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:06.257 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:26:06.258 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:06.258 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:26:06.259 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：58
2020-04-19 23:26:06.259 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:26:06.261 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:26:06.262 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 58(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:26:06.268 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:26:36.110 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:26:36.111 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:26:36.112 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:26:36.112 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:26:36.112 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:26:36.115 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 23:26:36.115 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:26:36.117 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, like_count desc LIMIT ?,? 
2020-04-19 23:26:36.118 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:26:36.119 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:36.120 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:26:36.121 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.121 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:36.122 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:26:36.123 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.124 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:36.125 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:26:36.125 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.126 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:36.127 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:26:36.128 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.130 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:36.131 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:26:36.132 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.133 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:36.133 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:26:36.134 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:26:36.135 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:36.135 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:26:36.136 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.137 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:36.138 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:26:36.139 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.140 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:36.140 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:26:36.141 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.142 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:36.143 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:26:36.144 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.146 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:36.147 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:26:36.148 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.149 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:36.150 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:26:36.151 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.152 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:36.152 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:26:36.153 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.154 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:36.155 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:26:36.156 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:26:36.157 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:36.157 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:26:36.158 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.159 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:36.159 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:26:36.161 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.162 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:36.163 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:26:36.164 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.165 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:36.166 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:26:36.167 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.167 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:36.168 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:26:36.169 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.169 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:36.170 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:26:36.171 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:36.171 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:26:36.172 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：62
2020-04-19 23:26:36.172 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 23:26:36.173 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:26:36.174 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=10, pageSize=10, totalPage=1, currPage=1, list=[{id=4, author=3, title=这是置顶的文章哇, content=save, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=1128, commentCount=12, likeCount=12, isTop=true, isRecommend=false, createTime=[2019, 6, 14, 12, 21, 50], updateTime=[2020, 4, 19, 20, 1, 15], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251780392676016129, author=xing, title=mysql练习题, content=### 建表

- 学生表

```mysql
CREATE TABLE `Student`(
`s_id` VARCHAR(20),
`s_name` VARCHAR(20) NOT NULL DEFAULT '',
`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
PRIMARY KEY(`s_id`)
);
```

- 课程表

```mysql
CREATE TABLE `Course`(
`c_id`  VARCHAR(20),
`c_name` VARCHAR(20) NOT NULL DEFAULT '',
`t_id` VARCHAR(20) NOT NULL,
PRIMARY KEY(`c_id`)
);
```

- 教师表

```mysql
CREATE TABLE `Teacher`(
`t_id` VARCHAR(20),
`t_name` VARCHAR(20) NOT NULL DEFAULT '',
PRIMARY KEY(`t_id`)
);
```

- 成绩表

```mysql
CREATE TABLE `Score`(
`s_id` VARCHAR(20),
`c_id`  VARCHAR(20),
`s_score` INT(3),
PRIMARY KEY(`s_id`,`c_id`)
);
```

- 插入学生表测试数据

```mysql
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
```

- 课程表测试数据

```mysql
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');
```

- 教师表测试数据

```mysql
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');
```

- 成绩表测试数据

```mysql
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);
```

### 练习题和sql语句

1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数

```mysql
select a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c 
where a.s_id=b.s_id 
and a.s_id=c.s_id 
and b.c_id='01' 
and c.c_id='02' 
and b.s_score>c.s_score
```

2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数

```mysql
select a.* ,b.s_score as 01_score,c.s_score as 02_score from 
student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL 
join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score
```

3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score >=60;
```

4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
left join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score <60
union
select a.s_id,a.s_name,0 as avg_score from 
student a 
where a.s_id not in (
select distinct s_id from score);
```

5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩

```mysql
select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from 
student a 
left join score b on a.s_id=b.s_id
GROUP BY a.s_id,a.s_name;
```

6. 查询"李"姓老师的数量 

```mysql
select count(t_id) from teacher where t_name like '李%';
```

7. 查询学过"张三"老师授课的同学的信息 

```mysql
select a.* from 
student a 
join score b on a.s_id=b.s_id where b.c_id in(
select c_id from course where t_id =(
select t_id from teacher where t_name = '张三'));
```



8. 查询没学过"张三"老师授课的同学的信息 

```mysql
select * from 
    student c 
    where c.s_id not in(
        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(
        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));
```



9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a,score b,score c 
where a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';
```

10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a 
where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')
```

11. 查询没有学全所有课程的同学的信息 

```mysql
--@wendiepei的写法
select s.* from student s 
left join Score s1 on s1.s_id=s.s_id
group by s.s_id having count(s1.c_id)<(select count(*) from course)	
--@k1051785839的写法
select *
from student
where s_id not in(
select s_id from score t1  
group by s_id having count(*) =(select count(distinct c_id)  from course)) 
```

12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 

```mysql
select * from student where s_id in(
select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')
);
```

13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 

```mysql
--@ouyang_1993的写法
SELECT
 Student.*
FROM
 Student
WHERE
 s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (
    #下面的语句是找到'01'同学学习的课程数
    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'
   )
 )
AND s_id NOT IN (
 #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们
 SELECT s_id FROM Score
 WHERE c_id IN(
   #下面的语句是找到‘01’同学没学过的课程
   SELECT DISTINCT c_id FROM Score
   WHERE c_id NOT IN (
     #下面的语句是找出‘01’同学学习的课程
     SELECT c_id FROM Score WHERE s_id = '01'
    )
  ) GROUP BY s_id
) #下面的条件是排除01同学
AND s_id NOT IN ('01')
--@k1051785839的写法
SELECT
 t3.*
FROM
 (
  SELECT
   s_id,
   group_concat(c_id ORDER BY c_id) group1
  FROM
   score
  WHERE
   s_id &lt;> '01'
  GROUP BY
   s_id
 ) t1
INNER JOIN (
 SELECT
  group_concat(c_id ORDER BY c_id) group2
 FROM
  score
 WHERE
  s_id = '01'
 GROUP BY
  s_id
) t2 ON t1.group1 = t2.group2
INNER JOIN student t3 ON t1.s_id = t3.s_id
```

14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 

```mysql
select a.s_name from student a where a.s_id not in (
select s_id from score where c_id = 
(select c_id from course where t_id =(
select t_id from teacher where t_name = '张三')));
```

15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 

```mysql
select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from 
student a 
left join score b on a.s_id = b.s_id
where a.s_id in(
select s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)
GROUP BY a.s_id,a.s_name
```

16. 检索"01"课程分数小于60，按分数降序排列的学生信息

```mysql
select a.*,b.c_id,b.s_score from 
student a,score b 
where a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;
```

17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

```mysql
select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,
(select s_score from score where s_id=a.s_id and c_id='02') as 数学,
(select s_score from score where s_id=a.s_id and c_id='03') as 英语,
round(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;
--@喝完这杯还有一箱的写法
SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, 
MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, 
MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, 
avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC
```

18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

```mysql
select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),
ROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,
ROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,
ROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,
ROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率
from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name
```

19. 按各科成绩进行排序，并显示排名

```mysql
-- mysql没有rank函数
select a.s_id,a.c_id,
        @i:=@i +1 as i保留排名,
        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,
        @score:=a.s_score as score
    from (
        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC
    )a,(select @k:=0,@i:=0,@score:=0)s
--@k1051785839的写法
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank
                FROM score t1 where t1.c_id='01'
                order by t1.s_score desc) t1)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank
                FROM score t1 where t1.c_id='02'
                order by t1.s_score desc) t2)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank
                FROM score t1 where t1.c_id='03'
                order by t1.s_score desc) t3)
```

20. 查询学生的总成绩并进行排名

```mysql
select a.s_id,
@i:=@i+1 as i,
@k:=(case when @score=a.sum_score then @k else @i end) as rank,
@score:=a.sum_score as score
from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,
(select @k:=0,@i:=0,@score:=0)s
```

21. 查询不同老师所教不同课程平均分从高到低显示 

```mysql
select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a
left join score b on a.c_id=b.c_id 
left join teacher c on a.t_id=c.t_id
GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;
```

22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩

```mysql
select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  
ORDER BY a.s_score DESC  
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' 
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3;
```

23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比

```mysql
select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a
left join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,
ROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)b on a.c_id=b.c_id
left join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,
ROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)c on a.c_id=c.c_id
left join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,
ROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)d on a.c_id=d.c_id
left join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,
ROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)e on a.c_id=e.c_id
left join course f on a.c_id = f.c_id
```

24. 查询学生平均成绩及其名次 

```mysql
select a.s_id,
@i:=@i+1 as '不保留空缺排名',
@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',
@avg_score:=avg_s as '平均分'
from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;
```

25. 查询各科成绩前三名的记录

```mysql
-- 1.选出b表比a表成绩大的所有组
-- 2.选出比当前id成绩大的 小于三个的
select a.s_id,a.c_id,a.s_score from score a 
left join score b on a.c_id = b.c_id and a.s_score<b.s_score
group by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3
ORDER BY a.c_id,a.s_score DESC
```

26. 查询每门课程被选修的学生数 

```mysql
select c_id,count(s_id) from score a GROUP BY c_id
```

27. 查询出只有两门课程的全部学生的学号和姓名 

```mysql
select s_id,s_name from student where s_id in(
select s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);
```

28. 查询男生、女生人数 

```mysql
select s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex
```

29. 查询名字中含有"风"字的学生信息

```mysql
select * from student where s_name like '%风%';
```

30. 查询同名同性学生名单，并统计同名人数 		

```mysql
select a.s_name,a.s_sex,count(*) from student a  JOIN 
student b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex
GROUP BY a.s_name,a.s_sex
```

31. 查询1990年出生的学生名单

```mysql
select s_name from student where s_birth like '1990%'
```

32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 

```mysql
select c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC
```

33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 

```mysql
select a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a
left join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85
```

34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 	

```mysql
select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(
select c_id from course where c_name ='数学') and b.s_score<60
```

35. 查询所有学生的课程及分数情况；

```mysql
select a.s_id,a.s_name,
SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',
SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',
SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',
SUM(b.s_score) as  '总分'
from student a left join score b on a.s_id = b.s_id 
left join course c on b.c_id = c.c_id 
GROUP BY a.s_id,a.s_name
```

36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； 

```mysql
select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id
left join student a on a.s_id=c.s_id where c.s_score>=70
```

37. 查询不及格的课程

```mysql
select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id
where a.s_score<60 
```

38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； 

```mysql
select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id
where a.c_id = '01'and a.s_score>80
```

39. 求每门课程的学生人数 

```mysql
select count(*) from score GROUP BY c_id;
```

40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩

```mysql
-- 查询老师id	
select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'
-- 查询最高分（可能有相同分数）
select MAX(s_score) from score where c_id='02'
-- 查询信息
select a.*,b.s_score,b.c_id,c.c_name from student a
LEFT JOIN score b on a.s_id = b.s_id
LEFT JOIN course c on b.c_id=c.c_id
where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')
and b.s_score in (select MAX(s_score) from score where c_id='02')
```

41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 

```mysql
select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score
```

42. 查询每门功成绩最好的前两名 

```mysql
select a.s_id,a.c_id,a.s_score from score a
where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id
```

43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  

```mysql
select c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC
```

44. 检索至少选修两门课程的学生学号 

```mysql
select s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2
```

45. 查询选修了全部课程的学生信息 

```mysql
select * from student where s_id in(		
select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))
```

46. 查询各学生的年龄

```mysql
# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - 
(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age
from student;
```

47. 查询本周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)
select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
	
select WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
```

48. 查询下周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)
```

49. 查询本月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)
```

50. 查询下月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)
```

, summary=MySQL练习题, cover=null, views=4, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 51, 17], updateTime=[2020, 4, 19, 21, 31, 59], isEnable=true, isDeleted=null, version=null, category={id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=asdf, title=asdasd, content=<p>### asdkfhjajlkhdfkashdfki</p>, summary=asdasd, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 36, 25], updateTime=[2020, 4, 19, 20, 20, 22], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251770557519675394, author=test, title=test, content=<blockquote>
<p>yhjktykj</p>
</blockquote>
<p><span style="background-color: #00ff00;">fgdfgfdgd</span></p>
<p>&nbsp;</p>
<pre class="language-java"><code>public class Hello{
public sstatic void main(String args[]){
Sysout.print.out("hello");
}</code></pre>, summary=test, cover=null, views=3, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 12, 12], updateTime=[2020, 4, 19, 15, 14, 35], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 52, 57], updateTime=[2020, 4, 19, 20, 15, 29], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251726075243896833, author=sdfsdfsdfsdf, title=sdfsdf, content=<p>zxcxzc</p>, summary=sdfsdfs, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 15, 26], updateTime=[2020, 4, 19, 20, 17, 43], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725884101074946, author=sdf, title=sdf, content=<p>sdfsdfsdf</p>, summary=sdf, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 14, 41], updateTime=[2020, 4, 19, 12, 14, 41], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的f, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 11, 56], updateTime=[2020, 4, 19, 12, 11, 56], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=126, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=[2020, 3, 23, 15, 55, 15], updateTime=[2020, 4, 14, 11, 58, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=3, author=1, title=岁的法国士大夫, content=3123123123, summary=123124312414, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2019, 6, 17, 23, 48, 4], updateTime=[2020, 4, 17, 23, 48, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}], params={}, sortColumn=like_count)](String), 1(Integer), POST(String), 62(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:26:36.180 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:26:37.047 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:26:37.047 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:26:37.047 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:26:37.048 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:26:37.048 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:26:37.049 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 23:26:37.050 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:26:37.051 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, views desc LIMIT ?,? 
2020-04-19 23:26:37.052 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:26:37.054 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:37.054 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:26:37.055 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.056 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:37.057 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:26:37.058 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.059 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:37.059 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:26:37.060 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.062 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:37.062 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:26:37.063 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:26:37.064 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:37.064 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:26:37.065 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.066 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:37.067 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:26:37.067 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.068 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:37.069 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:26:37.070 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.070 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:37.071 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:26:37.072 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.073 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:37.073 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:26:37.074 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.075 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:37.076 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:26:37.077 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.079 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:37.079 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:26:37.080 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.081 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:37.081 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:26:37.082 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.083 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:37.083 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:26:37.084 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.085 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:37.085 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:26:37.086 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:26:37.087 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:37.087 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:26:37.088 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.089 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:37.089 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:26:37.090 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.091 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:37.092 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:26:37.093 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.094 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:37.095 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:26:37.096 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.096 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:37.097 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:26:37.098 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.099 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:37.099 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:26:37.100 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:37.101 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:26:37.101 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：54
2020-04-19 23:26:37.102 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 23:26:37.103 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:26:37.104 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=11, pageSize=10, totalPage=2, currPage=1, list=[{id=4, author=3, title=这是置顶的文章哇, content=save, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=1128, commentCount=12, likeCount=12, isTop=true, isRecommend=false, createTime=[2019, 6, 14, 12, 21, 50], updateTime=[2020, 4, 19, 20, 1, 15], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251752142763507713, author=_江南一点雨, title=离职半年了，老东家又发 offer，回不回？, content=```
代码块
```
asdasd, summary=有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？, cover=null, views=12, commentCount=0, likeCount=123, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 59, 1], updateTime=[2020, 4, 19, 21, 29, 41], isEnable=false, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=126, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=[2020, 3, 23, 15, 55, 15], updateTime=[2020, 4, 14, 11, 58, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=3, author=1, title=岁的法国士大夫, content=3123123123, summary=123124312414, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2019, 6, 17, 23, 48, 4], updateTime=[2020, 4, 17, 23, 48, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的f, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 11, 56], updateTime=[2020, 4, 19, 12, 11, 56], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725884101074946, author=sdf, title=sdf, content=<p>sdfsdfsdf</p>, summary=sdf, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 14, 41], updateTime=[2020, 4, 19, 12, 14, 41], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251726075243896833, author=sdfsdfsdfsdf, title=sdfsdf, content=<p>zxcxzc</p>, summary=sdfsdfs, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 15, 26], updateTime=[2020, 4, 19, 20, 17, 43], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 52, 57], updateTime=[2020, 4, 19, 20, 15, 29], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251770557519675394, author=test, title=test, content=<blockquote>
<p>yhjktykj</p>
</blockquote>
<p><span style="background-color: #00ff00;">fgdfgfdgd</span></p>
<p>&nbsp;</p>
<pre class="language-java"><code>public class Hello{
public sstatic void main(String args[]){
Sysout.print.out("hello");
}</code></pre>, summary=test, cover=null, views=3, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 12, 12], updateTime=[2020, 4, 19, 15, 14, 35], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=asdf, title=asdasd, content=<p>### asdkfhjajlkhdfkashdfki</p>, summary=asdasd, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 36, 25], updateTime=[2020, 4, 19, 20, 20, 22], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}], params={}, sortColumn=views)](String), 1(Integer), POST(String), 54(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:26:37.109 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:26:38.353 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:26:38.354 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:26:38.355 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:26:38.355 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:26:38.355 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:26:38.357 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 23:26:38.357 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:26:38.359 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 23:26:38.359 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:26:38.361 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:38.362 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:26:38.363 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.364 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:38.364 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:26:38.365 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.366 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:38.366 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:26:38.367 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.368 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:38.368 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:26:38.369 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.370 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:38.371 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:26:38.372 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.373 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:38.373 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:26:38.374 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.375 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:38.376 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:26:38.377 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.378 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:38.379 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:26:38.380 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.381 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:38.382 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:26:38.382 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.383 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:38.384 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:26:38.385 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.385 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:38.386 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:26:38.387 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.388 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:38.388 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:26:38.389 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.390 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:38.390 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:26:38.391 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.393 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:38.393 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:26:38.394 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:26:38.395 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:38.395 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:26:38.396 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.397 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:38.397 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:26:38.398 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.399 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:38.400 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:26:38.400 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.402 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:38.402 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:26:38.403 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.404 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:38.404 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:26:38.405 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:38.406 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:38.406 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:26:38.407 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:26:38.408 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:26:38.408 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：55
2020-04-19 23:26:38.409 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 23:26:38.411 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:26:38.412 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=11, pageSize=10, totalPage=2, currPage=1, list=[{id=4, author=3, title=这是置顶的文章哇, content=save, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=1128, commentCount=12, likeCount=12, isTop=true, isRecommend=false, createTime=[2019, 6, 14, 12, 21, 50], updateTime=[2020, 4, 19, 20, 1, 15], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=126, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=[2020, 3, 23, 15, 55, 15], updateTime=[2020, 4, 14, 11, 58, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251752142763507713, author=_江南一点雨, title=离职半年了，老东家又发 offer，回不回？, content=```
代码块
```
asdasd, summary=有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？, cover=null, views=12, commentCount=0, likeCount=123, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 59, 1], updateTime=[2020, 4, 19, 21, 29, 41], isEnable=false, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=asdf, title=asdasd, content=<p>### asdkfhjajlkhdfkashdfki</p>, summary=asdasd, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 15, 36, 25], updateTime=[2020, 4, 19, 20, 20, 22], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251780392676016129, author=xing, title=mysql练习题, content=### 建表

- 学生表

```mysql
CREATE TABLE `Student`(
`s_id` VARCHAR(20),
`s_name` VARCHAR(20) NOT NULL DEFAULT '',
`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
PRIMARY KEY(`s_id`)
);
```

- 课程表

```mysql
CREATE TABLE `Course`(
`c_id`  VARCHAR(20),
`c_name` VARCHAR(20) NOT NULL DEFAULT '',
`t_id` VARCHAR(20) NOT NULL,
PRIMARY KEY(`c_id`)
);
```

- 教师表

```mysql
CREATE TABLE `Teacher`(
`t_id` VARCHAR(20),
`t_name` VARCHAR(20) NOT NULL DEFAULT '',
PRIMARY KEY(`t_id`)
);
```

- 成绩表

```mysql
CREATE TABLE `Score`(
`s_id` VARCHAR(20),
`c_id`  VARCHAR(20),
`s_score` INT(3),
PRIMARY KEY(`s_id`,`c_id`)
);
```

- 插入学生表测试数据

```mysql
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
```

- 课程表测试数据

```mysql
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');
```

- 教师表测试数据

```mysql
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');
```

- 成绩表测试数据

```mysql
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);
```

### 练习题和sql语句

1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数

```mysql
select a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c 
where a.s_id=b.s_id 
and a.s_id=c.s_id 
and b.c_id='01' 
and c.c_id='02' 
and b.s_score>c.s_score
```

2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数

```mysql
select a.* ,b.s_score as 01_score,c.s_score as 02_score from 
student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL 
join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score
```

3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score >=60;
```

4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
left join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score <60
union
select a.s_id,a.s_name,0 as avg_score from 
student a 
where a.s_id not in (
select distinct s_id from score);
```

5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩

```mysql
select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from 
student a 
left join score b on a.s_id=b.s_id
GROUP BY a.s_id,a.s_name;
```

6. 查询"李"姓老师的数量 

```mysql
select count(t_id) from teacher where t_name like '李%';
```

7. 查询学过"张三"老师授课的同学的信息 

```mysql
select a.* from 
student a 
join score b on a.s_id=b.s_id where b.c_id in(
select c_id from course where t_id =(
select t_id from teacher where t_name = '张三'));
```



8. 查询没学过"张三"老师授课的同学的信息 

```mysql
select * from 
    student c 
    where c.s_id not in(
        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(
        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));
```



9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a,score b,score c 
where a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';
```

10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a 
where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')
```

11. 查询没有学全所有课程的同学的信息 

```mysql
--@wendiepei的写法
select s.* from student s 
left join Score s1 on s1.s_id=s.s_id
group by s.s_id having count(s1.c_id)<(select count(*) from course)	
--@k1051785839的写法
select *
from student
where s_id not in(
select s_id from score t1  
group by s_id having count(*) =(select count(distinct c_id)  from course)) 
```

12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 

```mysql
select * from student where s_id in(
select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')
);
```

13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 

```mysql
--@ouyang_1993的写法
SELECT
 Student.*
FROM
 Student
WHERE
 s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (
    #下面的语句是找到'01'同学学习的课程数
    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'
   )
 )
AND s_id NOT IN (
 #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们
 SELECT s_id FROM Score
 WHERE c_id IN(
   #下面的语句是找到‘01’同学没学过的课程
   SELECT DISTINCT c_id FROM Score
   WHERE c_id NOT IN (
     #下面的语句是找出‘01’同学学习的课程
     SELECT c_id FROM Score WHERE s_id = '01'
    )
  ) GROUP BY s_id
) #下面的条件是排除01同学
AND s_id NOT IN ('01')
--@k1051785839的写法
SELECT
 t3.*
FROM
 (
  SELECT
   s_id,
   group_concat(c_id ORDER BY c_id) group1
  FROM
   score
  WHERE
   s_id &lt;> '01'
  GROUP BY
   s_id
 ) t1
INNER JOIN (
 SELECT
  group_concat(c_id ORDER BY c_id) group2
 FROM
  score
 WHERE
  s_id = '01'
 GROUP BY
  s_id
) t2 ON t1.group1 = t2.group2
INNER JOIN student t3 ON t1.s_id = t3.s_id
```

14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 

```mysql
select a.s_name from student a where a.s_id not in (
select s_id from score where c_id = 
(select c_id from course where t_id =(
select t_id from teacher where t_name = '张三')));
```

15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 

```mysql
select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from 
student a 
left join score b on a.s_id = b.s_id
where a.s_id in(
select s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)
GROUP BY a.s_id,a.s_name
```

16. 检索"01"课程分数小于60，按分数降序排列的学生信息

```mysql
select a.*,b.c_id,b.s_score from 
student a,score b 
where a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;
```

17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

```mysql
select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,
(select s_score from score where s_id=a.s_id and c_id='02') as 数学,
(select s_score from score where s_id=a.s_id and c_id='03') as 英语,
round(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;
--@喝完这杯还有一箱的写法
SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, 
MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, 
MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, 
avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC
```

18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

```mysql
select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),
ROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,
ROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,
ROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,
ROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率
from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name
```

19. 按各科成绩进行排序，并显示排名

```mysql
-- mysql没有rank函数
select a.s_id,a.c_id,
        @i:=@i +1 as i保留排名,
        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,
        @score:=a.s_score as score
    from (
        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC
    )a,(select @k:=0,@i:=0,@score:=0)s
--@k1051785839的写法
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank
                FROM score t1 where t1.c_id='01'
                order by t1.s_score desc) t1)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank
                FROM score t1 where t1.c_id='02'
                order by t1.s_score desc) t2)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank
                FROM score t1 where t1.c_id='03'
                order by t1.s_score desc) t3)
```

20. 查询学生的总成绩并进行排名

```mysql
select a.s_id,
@i:=@i+1 as i,
@k:=(case when @score=a.sum_score then @k else @i end) as rank,
@score:=a.sum_score as score
from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,
(select @k:=0,@i:=0,@score:=0)s
```

21. 查询不同老师所教不同课程平均分从高到低显示 

```mysql
select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a
left join score b on a.c_id=b.c_id 
left join teacher c on a.t_id=c.t_id
GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;
```

22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩

```mysql
select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  
ORDER BY a.s_score DESC  
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' 
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3;
```

23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比

```mysql
select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a
left join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,
ROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)b on a.c_id=b.c_id
left join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,
ROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)c on a.c_id=c.c_id
left join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,
ROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)d on a.c_id=d.c_id
left join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,
ROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)e on a.c_id=e.c_id
left join course f on a.c_id = f.c_id
```

24. 查询学生平均成绩及其名次 

```mysql
select a.s_id,
@i:=@i+1 as '不保留空缺排名',
@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',
@avg_score:=avg_s as '平均分'
from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;
```

25. 查询各科成绩前三名的记录

```mysql
-- 1.选出b表比a表成绩大的所有组
-- 2.选出比当前id成绩大的 小于三个的
select a.s_id,a.c_id,a.s_score from score a 
left join score b on a.c_id = b.c_id and a.s_score<b.s_score
group by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3
ORDER BY a.c_id,a.s_score DESC
```

26. 查询每门课程被选修的学生数 

```mysql
select c_id,count(s_id) from score a GROUP BY c_id
```

27. 查询出只有两门课程的全部学生的学号和姓名 

```mysql
select s_id,s_name from student where s_id in(
select s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);
```

28. 查询男生、女生人数 

```mysql
select s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex
```

29. 查询名字中含有"风"字的学生信息

```mysql
select * from student where s_name like '%风%';
```

30. 查询同名同性学生名单，并统计同名人数 		

```mysql
select a.s_name,a.s_sex,count(*) from student a  JOIN 
student b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex
GROUP BY a.s_name,a.s_sex
```

31. 查询1990年出生的学生名单

```mysql
select s_name from student where s_birth like '1990%'
```

32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 

```mysql
select c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC
```

33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 

```mysql
select a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a
left join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85
```

34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 	

```mysql
select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(
select c_id from course where c_name ='数学') and b.s_score<60
```

35. 查询所有学生的课程及分数情况；

```mysql
select a.s_id,a.s_name,
SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',
SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',
SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',
SUM(b.s_score) as  '总分'
from student a left join score b on a.s_id = b.s_id 
left join course c on b.c_id = c.c_id 
GROUP BY a.s_id,a.s_name
```

36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； 

```mysql
select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id
left join student a on a.s_id=c.s_id where c.s_score>=70
```

37. 查询不及格的课程

```mysql
select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id
where a.s_score<60 
```

38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； 

```mysql
select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id
where a.c_id = '01'and a.s_score>80
```

39. 求每门课程的学生人数 

```mysql
select count(*) from score GROUP BY c_id;
```

40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩

```mysql
-- 查询老师id	
select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'
-- 查询最高分（可能有相同分数）
select MAX(s_score) from score where c_id='02'
-- 查询信息
select a.*,b.s_score,b.c_id,c.c_name from student a
LEFT JOIN score b on a.s_id = b.s_id
LEFT JOIN course c on b.c_id=c.c_id
where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')
and b.s_score in (select MAX(s_score) from score where c_id='02')
```

41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 

```mysql
select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score
```

42. 查询每门功成绩最好的前两名 

```mysql
select a.s_id,a.c_id,a.s_score from score a
where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id
```

43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  

```mysql
select c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC
```

44. 检索至少选修两门课程的学生学号 

```mysql
select s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2
```

45. 查询选修了全部课程的学生信息 

```mysql
select * from student where s_id in(		
select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))
```

46. 查询各学生的年龄

```mysql
# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - 
(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age
from student;
```

47. 查询本周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)
select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
	
select WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
```

48. 查询下周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)
```

49. 查询本月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)
```

50. 查询下月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)
```

, summary=MySQL练习题, cover=null, views=4, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 51, 17], updateTime=[2020, 4, 19, 21, 31, 59], isEnable=true, isDeleted=null, version=null, category={id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251770557519675394, author=test, title=test, content=<blockquote>
<p>yhjktykj</p>
</blockquote>
<p><span style="background-color: #00ff00;">fgdfgfdgd</span></p>
<p>&nbsp;</p>
<pre class="language-java"><code>public class Hello{
public sstatic void main(String args[]){
Sysout.print.out("hello");
}</code></pre>, summary=test, cover=null, views=3, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=[2020, 4, 19, 15, 12, 12], updateTime=[2020, 4, 19, 15, 14, 35], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251726075243896833, author=sdfsdfsdfsdf, title=sdfsdf, content=<p>zxcxzc</p>, summary=sdfsdfs, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 15, 26], updateTime=[2020, 4, 19, 20, 17, 43], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 13, 52, 57], updateTime=[2020, 4, 19, 20, 15, 29], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=3, author=1, title=岁的法国士大夫, content=3123123123, summary=123124312414, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2019, 6, 17, 23, 48, 4], updateTime=[2020, 4, 17, 23, 48, 4], isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的f, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=0, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=[2020, 4, 19, 12, 11, 56], updateTime=[2020, 4, 19, 12, 11, 56], isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}], params={}, sortColumn=create_time)](String), 1(Integer), POST(String), 55(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:26:38.419 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:26:47.238 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/details/1251780392676016129
2020-04-19 23:26:47.239 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:26:47.240 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:26:47.241 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.read
2020-04-19 23:26:47.242 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:26:47.256 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 23:26:47.257 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 23:26:47.259 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:26:47.260 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:26:47.261 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:47.262 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:26:47.262 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:26:47.263 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:26:47.264 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 23:26:47.265 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==>  Preparing: UPDATE article SET views = views + 1 WHERE id = ?; 
2020-04-19 23:26:47.266 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-19 23:26:47.268 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -<==    Updates: 1
2020-04-19 23:26:47.272 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：34
2020-04-19 23:26:47.273 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},"msg":"操作成功"}
2020-04-19 23:26:47.275 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:26:47.276 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/details/1251780392676016129(String), [1251780392676016129](String), 1(Integer), GET(String), 34(Long), {"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:26:47.281 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:28:06.868 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:28:06.869 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:28:06.869 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:28:06.869 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:28:06.869 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:28:06.871 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:28:06.872 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:28:06.873 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 23:28:06.873 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 23:28:06.875 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:28:06.875 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:28:06.876 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.877 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:28:06.878 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:28:06.878 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.879 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:28:06.880 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:28:06.881 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.882 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:28:06.883 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:28:06.884 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.885 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:28:06.886 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:28:06.887 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.888 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:28:06.888 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:28:06.889 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.890 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:28:06.890 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:28:06.891 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.892 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:28:06.893 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:28:06.893 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.895 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:28:06.895 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:28:06.896 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.897 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:28:06.898 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:28:06.900 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.902 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:28:06.902 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:28:06.903 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.904 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:28:06.904 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:28:06.905 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:28:06.906 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:28:06.907 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:28:06.908 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.909 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:28:06.909 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:28:06.910 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.911 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:28:06.911 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:28:06.912 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.913 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:28:06.913 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:28:06.914 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.916 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:28:06.916 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:28:06.918 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.919 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:28:06.919 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:28:06.920 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:28:06.921 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:28:06.922 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:28:06.923 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.924 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:28:06.924 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:28:06.925 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:28:06.926 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:28:06.926 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：58
2020-04-19 23:28:06.927 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":5},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:28:06.928 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:28:06.929 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 58(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":5},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:28:06.934 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:28:38.031 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:28:38.031 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:28:38.031 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:28:38.031 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:28:38.032 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:28:38.032 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：1
2020-04-19 23:28:38.032 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:28:38.033 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:28:38.033 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 1(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:28:38.038 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:28:38.718 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/log/list
2020-04-19 23:28:38.718 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:28:38.718 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:28:38.719 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.LogController.getByPage
2020-04-19 23:28:38.719 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:28:38.725 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM sys_log 
2020-04-19 23:28:38.726 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:28:38.739 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT id,url,params,status,message,method,used_time,result,ip,create_time FROM sys_log LIMIT ?,? 
2020-04-19 23:28:38.740 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:28:38.742 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:28:38.742 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：24
2020-04-19 23:28:38.744 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"createTime":"2020-04-18 21:17:28","id":1,"ip":"0:0:0:0:0:0:0:1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":442},{"createTime":"2020-04-18 21:38:28","id":2,"ip":"127.0.0.1","method":"POST","params":"[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)]","result":"{\"code\":20000,\"data\":{\"token\":\"8EC8B4B799355BF59D52E087801AD843\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/user/login","usedTime":64},{"createTime":"2020-04-18 21:38:28","id":3,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:28","id":4,"ip":"127.0.0.1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":78},{"createTime":"2020-04-18 21:38:29","id":5,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":31},{"createTime":"2020-04-18 21:38:29","id":6,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":42},{"createTime":"2020-04-18 21:38:31","id":7,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:35","id":8,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":3},{"createTime":"2020-04-18 21:38:35","id":9,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":7},{"createTime":"2020-04-18 21:38:36","id":10,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":6}],"pageSize":10,"params":{},"totalCount":1412,"totalPage":142},"msg":"操作成功"}
2020-04-19 23:28:38.745 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:28:38.745 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /log/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 24(Long), {"code":20000,"data":{"currPage":1,"list":[{"createTime":"2020-04-18 21:17:28","id":1,"ip":"0:0:0:0:0:0:0:1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":442},{"createTime":"2020-04-18 21:38:28","id":2,"ip":"127.0.0.1","method":"POST","params":"[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)]","result":"{\"code\":20000,\"data\":{\"token\":\"8EC8B4B799355BF59D52E087801AD843\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/user/login","usedTime":64},{"createTime":"2020-04-18 21:38:28","id":3,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:28","id":4,"ip":"127.0.0.1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":78},{"createTime":"2020-04-18 21:38:29","id":5,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":31},{"createTime":"2020-04-18 21:38:29","id":6,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":42},{"createTime":"2020-04-18 21:38:31","id":7,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:35","id":8,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":3},{"createTime":"2020-04-18 21:38:35","id":9,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":7},{"createTime":"2020-04-18 21:38:36","id":10,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":6}],"pageSize":10,"params":{},"totalCount":1412,"totalPage":142},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:28:38.748 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:30:04.516 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/log/list
2020-04-19 23:30:04.517 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:30:04.517 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:30:04.517 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.LogController.getByPage
2020-04-19 23:30:04.518 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:30:04.519 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM sys_log 
2020-04-19 23:30:04.520 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:30:04.521 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT id,url,params,status,message,method,used_time,result,ip,create_time FROM sys_log LIMIT ?,? 
2020-04-19 23:30:04.522 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:30:04.524 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:30:04.525 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 23:30:04.526 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"createTime":"2020-04-18 21:17:28","id":1,"ip":"0:0:0:0:0:0:0:1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":442},{"createTime":"2020-04-18 21:38:28","id":2,"ip":"127.0.0.1","method":"POST","params":"[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)]","result":"{\"code\":20000,\"data\":{\"token\":\"8EC8B4B799355BF59D52E087801AD843\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/user/login","usedTime":64},{"createTime":"2020-04-18 21:38:28","id":3,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:28","id":4,"ip":"127.0.0.1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":78},{"createTime":"2020-04-18 21:38:29","id":5,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":31},{"createTime":"2020-04-18 21:38:29","id":6,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":42},{"createTime":"2020-04-18 21:38:31","id":7,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:35","id":8,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":3},{"createTime":"2020-04-18 21:38:35","id":9,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":7},{"createTime":"2020-04-18 21:38:36","id":10,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":6}],"pageSize":10,"params":{},"totalCount":1413,"totalPage":142},"msg":"操作成功"}
2020-04-19 23:30:04.527 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:30:04.527 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /log/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d02b7a14.getLoginInfo(<generated>)
(String), POST(String), 9(Long), {"code":20000,"data":{"currPage":1,"list":[{"createTime":"2020-04-18 21:17:28","id":1,"ip":"0:0:0:0:0:0:0:1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":442},{"createTime":"2020-04-18 21:38:28","id":2,"ip":"127.0.0.1","method":"POST","params":"[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)]","result":"{\"code\":20000,\"data\":{\"token\":\"8EC8B4B799355BF59D52E087801AD843\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/user/login","usedTime":64},{"createTime":"2020-04-18 21:38:28","id":3,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:28","id":4,"ip":"127.0.0.1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":78},{"createTime":"2020-04-18 21:38:29","id":5,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":31},{"createTime":"2020-04-18 21:38:29","id":6,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":42},{"createTime":"2020-04-18 21:38:31","id":7,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:35","id":8,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":3},{"createTime":"2020-04-18 21:38:35","id":9,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":7},{"createTime":"2020-04-18 21:38:36","id":10,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":6}],"pageSize":10,"params":{},"totalCount":1413,"totalPage":142},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:30:04.532 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:30:07.585 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/log/list
2020-04-19 23:30:07.586 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:30:07.586 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:30:07.587 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.LogController.getByPage
2020-04-19 23:30:07.587 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:30:07.589 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM sys_log 
2020-04-19 23:30:07.598 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:30:07.601 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT id,url,params,status,message,method,used_time,result,ip,create_time FROM sys_log order by usedTime desc LIMIT ?,? 
2020-04-19 23:30:07.601 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:30:07.651 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:30:07.651 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /log/list(String), [PageUtils(totalCount=1413, pageSize=10, totalPage=142, currPage=1, list=[{id=1, url=/article/list, params=[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)], status=1, message=null, method=POST, usedTime=442, result={"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isDeleted":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2019-07-14 12:21:50","views":1124},{"author":"7","commentCount":0,"createTime":"2020-04-18 20:09:50","id":"7","isDeleted":false,"isTop":false,"likeCount":0,"summary":"7","tagList":[],"title":"7","updateTime":"2020-04-18 20:09:50","views":7},{"author":"3","commentCount":0,"cover":"","createTime":"2020-04-18 17:30:52","id":"6","isDeleted":false,"isTop":false,"likeCount":0,"summary":"1","tagList":[],"title":"save","updateTime":"2020-04-18 17:30:52","views":1},{"author":"1","commentCount":0,"createTime":"2020-04-18 11:00:05","id":"5","isDeleted":false,"isTop":false,"likeCount":0,"summary":"12512313251","tagList":[],"title":"12515215","updateTime":"2020-04-18 11:00:05","views":4},{"author":"2","category":{"categoryName":"测试","id":1},"commentCount":232,"cover":"","createTime":"2020-04-08 10:54:04","id":"2","isDeleted":false,"isTop":false,"likeCount":2,"summary":"2","tagList":[{"id":2,"name":"java"}],"title":"这是推荐阅读的文章哇","updateTime":"2020-04-08 10:54:04","views":37},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isDeleted":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":124},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"createTime":"2019-06-17 23:48:04","id":"3","isDeleted":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}, ip=0:0:0:0:0:0:0:1, createTime=[2020, 4, 18, 21, 17, 28]}, {id=2, url=/sys/user/login, params=[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)], status=1, message=null, method=POST, usedTime=64, result={"code":20000,"data":{"token":"8EC8B4B799355BF59D52E087801AD843"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=3, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=2, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=4, url=/article/list, params=[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)], status=1, message=null, method=POST, usedTime=78, result={"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isDeleted":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2019-07-14 12:21:50","views":1124},{"author":"7","commentCount":0,"createTime":"2020-04-18 20:09:50","id":"7","isDeleted":false,"isTop":false,"likeCount":0,"summary":"7","tagList":[],"title":"7","updateTime":"2020-04-18 20:09:50","views":7},{"author":"3","commentCount":0,"cover":"","createTime":"2020-04-18 17:30:52","id":"6","isDeleted":false,"isTop":false,"likeCount":0,"summary":"1","tagList":[],"title":"save","updateTime":"2020-04-18 17:30:52","views":1},{"author":"1","commentCount":0,"createTime":"2020-04-18 11:00:05","id":"5","isDeleted":false,"isTop":false,"likeCount":0,"summary":"12512313251","tagList":[],"title":"12515215","updateTime":"2020-04-18 11:00:05","views":4},{"author":"2","category":{"categoryName":"测试","id":1},"commentCount":232,"cover":"","createTime":"2020-04-08 10:54:04","id":"2","isDeleted":false,"isTop":false,"likeCount":2,"summary":"2","tagList":[{"id":2,"name":"java"}],"title":"这是推荐阅读的文章哇","updateTime":"2020-04-08 10:54:04","views":37},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isDeleted":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":124},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"createTime":"2019-06-17 23:48:04","id":"3","isDeleted":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=5, url=/category/list, params=[], status=1, message=null, method=GET, usedTime=31, result={"code":20000,"data":[{"categoryName":"测试","id":1,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"parentCategoryId":-1}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 29]}, {id=6, url=/tag/list, params=[], status=1, message=null, method=GET, usedTime=42, result={"code":20000,"data":[{"id":1,"name":"spring"},{"id":2,"name":"java"},{"id":3,"name":"mysql"},{"id":4,"name":"javascript"}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 29]}, {id=7, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=2, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 31]}, {id=8, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=3, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 35]}, {id=9, url=/tag/list, params=[], status=1, message=null, method=GET, usedTime=7, result={"code":20000,"data":[{"id":1,"name":"spring"},{"id":2,"name":"java"},{"id":3,"name":"mysql"},{"id":4,"name":"javascript"}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 35]}, {id=10, url=/category/list, params=[], status=1, message=null, method=GET, usedTime=6, result={"code":20000,"data":[{"categoryName":"测试","id":1,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"parentCategoryId":-1}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 36]}], params={}, sortColumn=usedTime)](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
### The error may involve cn.codexing.blog.mapper.SysLogMapper.getByPage-Inline
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
	at cn.codexing.blog.service.impl.SysLogServiceImpl.listSysLog(SysLogServiceImpl.java:32)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$6f433582.listSysLog(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$63a61796.listSysLog(<generated>)
	at cn.codexing.blog.controller.LogController.getByPage(LogController.java:32)
	at cn.codexing.blog.controller.LogController$$FastClassBySpringCGLIB$$d4a072e6.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.LogController$$EnhancerBySpringCGLIB$$b728a1d7.getByPage(<generated>)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
(String), POST(String), 22(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:30:07.655 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:30:07.655 ERROR [http-nio-8088-exec-2]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
### The error may exist in file [E:\2020\myblog2.0\blog-backend\target\classes\mapper\SysLogMapper.xml]
### The error may involve cn.codexing.blog.mapper.SysLogMapper.getByPage-Inline
### The error occurred while setting parameters
### SQL: SELECT         id,url,params,status,message,method,used_time,result,ip,create_time         FROM sys_log                                  order by usedTime desc LIMIT ?,?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'] with root cause
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3978)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3914)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2495)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1903)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1242)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy164.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy162.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at sun.reflect.GeneratedMethodAccessor202.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy161.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy95.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:177)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:78)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy101.getByPage(Unknown Source)
	at cn.codexing.blog.service.impl.SysLogServiceImpl.listSysLog(SysLogServiceImpl.java:32)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$6f433582.listSysLog(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$63a61796.listSysLog(<generated>)
	at cn.codexing.blog.controller.LogController.getByPage(LogController.java:32)
	at cn.codexing.blog.controller.LogController$$FastClassBySpringCGLIB$$d4a072e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.GeneratedMethodAccessor158.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.LogController$$EnhancerBySpringCGLIB$$b728a1d7.getByPage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 23:30:09.590 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/log/list
2020-04-19 23:30:09.590 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:30:09.590 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:30:09.590 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.LogController.getByPage
2020-04-19 23:30:09.591 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:30:09.592 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM sys_log 
2020-04-19 23:30:09.592 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:30:09.594 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT id,url,params,status,message,method,used_time,result,ip,create_time FROM sys_log order by usedTime desc LIMIT ?,? 
2020-04-19 23:30:09.594 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:30:09.600 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:30:09.601 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /log/list(String), [PageUtils(totalCount=1413, pageSize=10, totalPage=142, currPage=1, list=[{id=1, url=/article/list, params=[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)], status=1, message=null, method=POST, usedTime=442, result={"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isDeleted":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2019-07-14 12:21:50","views":1124},{"author":"7","commentCount":0,"createTime":"2020-04-18 20:09:50","id":"7","isDeleted":false,"isTop":false,"likeCount":0,"summary":"7","tagList":[],"title":"7","updateTime":"2020-04-18 20:09:50","views":7},{"author":"3","commentCount":0,"cover":"","createTime":"2020-04-18 17:30:52","id":"6","isDeleted":false,"isTop":false,"likeCount":0,"summary":"1","tagList":[],"title":"save","updateTime":"2020-04-18 17:30:52","views":1},{"author":"1","commentCount":0,"createTime":"2020-04-18 11:00:05","id":"5","isDeleted":false,"isTop":false,"likeCount":0,"summary":"12512313251","tagList":[],"title":"12515215","updateTime":"2020-04-18 11:00:05","views":4},{"author":"2","category":{"categoryName":"测试","id":1},"commentCount":232,"cover":"","createTime":"2020-04-08 10:54:04","id":"2","isDeleted":false,"isTop":false,"likeCount":2,"summary":"2","tagList":[{"id":2,"name":"java"}],"title":"这是推荐阅读的文章哇","updateTime":"2020-04-08 10:54:04","views":37},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isDeleted":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":124},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"createTime":"2019-06-17 23:48:04","id":"3","isDeleted":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}, ip=0:0:0:0:0:0:0:1, createTime=[2020, 4, 18, 21, 17, 28]}, {id=2, url=/sys/user/login, params=[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)], status=1, message=null, method=POST, usedTime=64, result={"code":20000,"data":{"token":"8EC8B4B799355BF59D52E087801AD843"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=3, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=2, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=4, url=/article/list, params=[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)], status=1, message=null, method=POST, usedTime=78, result={"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isDeleted":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2019-07-14 12:21:50","views":1124},{"author":"7","commentCount":0,"createTime":"2020-04-18 20:09:50","id":"7","isDeleted":false,"isTop":false,"likeCount":0,"summary":"7","tagList":[],"title":"7","updateTime":"2020-04-18 20:09:50","views":7},{"author":"3","commentCount":0,"cover":"","createTime":"2020-04-18 17:30:52","id":"6","isDeleted":false,"isTop":false,"likeCount":0,"summary":"1","tagList":[],"title":"save","updateTime":"2020-04-18 17:30:52","views":1},{"author":"1","commentCount":0,"createTime":"2020-04-18 11:00:05","id":"5","isDeleted":false,"isTop":false,"likeCount":0,"summary":"12512313251","tagList":[],"title":"12515215","updateTime":"2020-04-18 11:00:05","views":4},{"author":"2","category":{"categoryName":"测试","id":1},"commentCount":232,"cover":"","createTime":"2020-04-08 10:54:04","id":"2","isDeleted":false,"isTop":false,"likeCount":2,"summary":"2","tagList":[{"id":2,"name":"java"}],"title":"这是推荐阅读的文章哇","updateTime":"2020-04-08 10:54:04","views":37},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isDeleted":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":124},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"createTime":"2019-06-17 23:48:04","id":"3","isDeleted":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=5, url=/category/list, params=[], status=1, message=null, method=GET, usedTime=31, result={"code":20000,"data":[{"categoryName":"测试","id":1,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"parentCategoryId":-1}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 29]}, {id=6, url=/tag/list, params=[], status=1, message=null, method=GET, usedTime=42, result={"code":20000,"data":[{"id":1,"name":"spring"},{"id":2,"name":"java"},{"id":3,"name":"mysql"},{"id":4,"name":"javascript"}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 29]}, {id=7, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=2, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 31]}, {id=8, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=3, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 35]}, {id=9, url=/tag/list, params=[], status=1, message=null, method=GET, usedTime=7, result={"code":20000,"data":[{"id":1,"name":"spring"},{"id":2,"name":"java"},{"id":3,"name":"mysql"},{"id":4,"name":"javascript"}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 35]}, {id=10, url=/category/list, params=[], status=1, message=null, method=GET, usedTime=6, result={"code":20000,"data":[{"categoryName":"测试","id":1,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"parentCategoryId":-1}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 36]}], params={}, sortColumn=usedTime)](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
### The error may involve cn.codexing.blog.mapper.SysLogMapper.getByPage-Inline
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
	at cn.codexing.blog.service.impl.SysLogServiceImpl.listSysLog(SysLogServiceImpl.java:32)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$6f433582.listSysLog(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$63a61796.listSysLog(<generated>)
	at cn.codexing.blog.controller.LogController.getByPage(LogController.java:32)
	at cn.codexing.blog.controller.LogController$$FastClassBySpringCGLIB$$d4a072e6.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.LogController$$EnhancerBySpringCGLIB$$b728a1d7.getByPage(<generated>)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
(String), POST(String), 58(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":4},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:30:09.606 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:30:09.607 ERROR [http-nio-8088-exec-3]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
### The error may exist in file [E:\2020\myblog2.0\blog-backend\target\classes\mapper\SysLogMapper.xml]
### The error may involve cn.codexing.blog.mapper.SysLogMapper.getByPage-Inline
### The error occurred while setting parameters
### SQL: SELECT         id,url,params,status,message,method,used_time,result,ip,create_time         FROM sys_log                                  order by usedTime desc LIMIT ?,?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'] with root cause
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3978)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3914)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2495)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1903)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1242)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy164.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy162.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at sun.reflect.GeneratedMethodAccessor202.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy161.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy95.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:177)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:78)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy101.getByPage(Unknown Source)
	at cn.codexing.blog.service.impl.SysLogServiceImpl.listSysLog(SysLogServiceImpl.java:32)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$6f433582.listSysLog(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$63a61796.listSysLog(<generated>)
	at cn.codexing.blog.controller.LogController.getByPage(LogController.java:32)
	at cn.codexing.blog.controller.LogController$$FastClassBySpringCGLIB$$d4a072e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.GeneratedMethodAccessor158.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.LogController$$EnhancerBySpringCGLIB$$b728a1d7.getByPage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 23:32:41.760 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:32:41.761 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:32:41.761 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:32:41.762 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:32:41.762 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:32:41.763 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-19 23:32:41.764 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:32:41.769 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:32:41.770 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:32:41.773 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:32:42.065 WARN  [http-nio-8088-exec-5]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>> cn.codexing.blog.controller.TagController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.TagVO>)]
2020-04-19 23:32:42.368 WARN  [http-nio-8088-exec-6]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.codexing.blog.common.Result<cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>> cn.codexing.blog.controller.CategoryController.getByPage(cn.codexing.blog.common.util.PageUtils<cn.codexing.blog.vo.CategoryVO>)]
2020-04-19 23:32:42.368 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/log/list
2020-04-19 23:32:42.368 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:32:42.369 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:32:42.369 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.LogController.getByPage
2020-04-19 23:32:42.369 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:32:42.371 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM sys_log 
2020-04-19 23:32:42.371 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:32:42.373 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT id,url,params,status,message,method,used_time,result,ip,create_time FROM sys_log LIMIT ?,? 
2020-04-19 23:32:42.374 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:32:42.375 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:32:42.376 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-19 23:32:42.377 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"createTime":"2020-04-18 21:17:28","id":1,"ip":"0:0:0:0:0:0:0:1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":442},{"createTime":"2020-04-18 21:38:28","id":2,"ip":"127.0.0.1","method":"POST","params":"[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)]","result":"{\"code\":20000,\"data\":{\"token\":\"8EC8B4B799355BF59D52E087801AD843\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/user/login","usedTime":64},{"createTime":"2020-04-18 21:38:28","id":3,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:28","id":4,"ip":"127.0.0.1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":78},{"createTime":"2020-04-18 21:38:29","id":5,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":31},{"createTime":"2020-04-18 21:38:29","id":6,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":42},{"createTime":"2020-04-18 21:38:31","id":7,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:35","id":8,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":3},{"createTime":"2020-04-18 21:38:35","id":9,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":7},{"createTime":"2020-04-18 21:38:36","id":10,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":6}],"pageSize":10,"params":{},"totalCount":1417,"totalPage":142},"msg":"操作成功"}
2020-04-19 23:32:42.377 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:32:42.378 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /log/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)](String), 1(Integer), POST(String), 8(Long), {"code":20000,"data":{"currPage":1,"list":[{"createTime":"2020-04-18 21:17:28","id":1,"ip":"0:0:0:0:0:0:0:1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":442},{"createTime":"2020-04-18 21:38:28","id":2,"ip":"127.0.0.1","method":"POST","params":"[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)]","result":"{\"code\":20000,\"data\":{\"token\":\"8EC8B4B799355BF59D52E087801AD843\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/user/login","usedTime":64},{"createTime":"2020-04-18 21:38:28","id":3,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:28","id":4,"ip":"127.0.0.1","method":"POST","params":"[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)]","result":"{\"code\":20000,\"data\":{\"currPage\":1,\"list\":[{\"author\":\"3\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":12,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2019-06-14 12:21:50\",\"id\":\"4\",\"isDeleted\":false,\"isTop\":true,\"likeCount\":12,\"summary\":\"1\",\"tagList\":[{\"id\":3,\"name\":\"mysql\"}],\"title\":\"这是置顶的文章哇\",\"updateTime\":\"2019-07-14 12:21:50\",\"views\":1124},{\"author\":\"7\",\"commentCount\":0,\"createTime\":\"2020-04-18 20:09:50\",\"id\":\"7\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"7\",\"tagList\":[],\"title\":\"7\",\"updateTime\":\"2020-04-18 20:09:50\",\"views\":7},{\"author\":\"3\",\"commentCount\":0,\"cover\":\"\",\"createTime\":\"2020-04-18 17:30:52\",\"id\":\"6\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"1\",\"tagList\":[],\"title\":\"save\",\"updateTime\":\"2020-04-18 17:30:52\",\"views\":1},{\"author\":\"1\",\"commentCount\":0,\"createTime\":\"2020-04-18 11:00:05\",\"id\":\"5\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"12512313251\",\"tagList\":[],\"title\":\"12515215\",\"updateTime\":\"2020-04-18 11:00:05\",\"views\":4},{\"author\":\"2\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":232,\"cover\":\"\",\"createTime\":\"2020-04-08 10:54:04\",\"id\":\"2\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":2,\"summary\":\"2\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"这是推荐阅读的文章哇\",\"updateTime\":\"2020-04-08 10:54:04\",\"views\":37},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":23,\"cover\":\"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg\",\"createTime\":\"2020-03-23 15:55:15\",\"id\":\"1\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":34,\"summary\":\"1\",\"tagList\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"}],\"title\":\"mybatis plus 乐观锁测试时间\",\"updateTime\":\"2020-04-14 11:58:04\",\"views\":124},{\"author\":\"1\",\"category\":{\"categoryName\":\"测试\",\"id\":1},\"commentCount\":0,\"createTime\":\"2019-06-17 23:48:04\",\"id\":\"3\",\"isDeleted\":false,\"isTop\":false,\"likeCount\":0,\"summary\":\"123124312414\",\"tagList\":[{\"id\":2,\"name\":\"java\"}],\"title\":\"岁的法国士大夫\",\"updateTime\":\"2020-04-17 23:48:04\",\"views\":1}],\"pageSize\":10,\"params\":{},\"totalCount\":7,\"totalPage\":1},\"msg\":\"操作成功\"}","status":1,"url":"/article/list","usedTime":78},{"createTime":"2020-04-18 21:38:29","id":5,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":31},{"createTime":"2020-04-18 21:38:29","id":6,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":42},{"createTime":"2020-04-18 21:38:31","id":7,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":2},{"createTime":"2020-04-18 21:38:35","id":8,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":{\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功\"}","status":1,"url":"/sys/info","usedTime":3},{"createTime":"2020-04-18 21:38:35","id":9,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"id\":1,\"name\":\"spring\"},{\"id\":2,\"name\":\"java\"},{\"id\":3,\"name\":\"mysql\"},{\"id\":4,\"name\":\"javascript\"}],\"msg\":\"操作成功\"}","status":1,"url":"/tag/list","usedTime":7},{"createTime":"2020-04-18 21:38:36","id":10,"ip":"127.0.0.1","method":"GET","params":"[]","result":"{\"code\":20000,\"data\":[{\"categoryName\":\"测试\",\"id\":1,\"parentCategoryId\":-1},{\"categoryName\":\"微服务\",\"id\":2,\"parentCategoryId\":-1}],\"msg\":\"操作成功\"}","status":1,"url":"/category/list","usedTime":6}],"pageSize":10,"params":{},"totalCount":1417,"totalPage":142},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:32:42.383 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:32:54.532 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/log/list
2020-04-19 23:32:54.532 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:32:54.532 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:32:54.533 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.LogController.getByPage
2020-04-19 23:32:54.533 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:32:54.534 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM sys_log 
2020-04-19 23:32:54.534 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:32:54.536 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT id,url,params,status,message,method,used_time,result,ip,create_time FROM sys_log order by createTime desc LIMIT ?,? 
2020-04-19 23:32:54.536 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:32:54.539 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:32:54.540 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /log/list(String), [PageUtils(totalCount=1417, pageSize=10, totalPage=142, currPage=1, list=[{id=1, url=/article/list, params=[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)], status=1, message=null, method=POST, usedTime=442, result={"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isDeleted":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2019-07-14 12:21:50","views":1124},{"author":"7","commentCount":0,"createTime":"2020-04-18 20:09:50","id":"7","isDeleted":false,"isTop":false,"likeCount":0,"summary":"7","tagList":[],"title":"7","updateTime":"2020-04-18 20:09:50","views":7},{"author":"3","commentCount":0,"cover":"","createTime":"2020-04-18 17:30:52","id":"6","isDeleted":false,"isTop":false,"likeCount":0,"summary":"1","tagList":[],"title":"save","updateTime":"2020-04-18 17:30:52","views":1},{"author":"1","commentCount":0,"createTime":"2020-04-18 11:00:05","id":"5","isDeleted":false,"isTop":false,"likeCount":0,"summary":"12512313251","tagList":[],"title":"12515215","updateTime":"2020-04-18 11:00:05","views":4},{"author":"2","category":{"categoryName":"测试","id":1},"commentCount":232,"cover":"","createTime":"2020-04-08 10:54:04","id":"2","isDeleted":false,"isTop":false,"likeCount":2,"summary":"2","tagList":[{"id":2,"name":"java"}],"title":"这是推荐阅读的文章哇","updateTime":"2020-04-08 10:54:04","views":37},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isDeleted":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":124},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"createTime":"2019-06-17 23:48:04","id":"3","isDeleted":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}, ip=0:0:0:0:0:0:0:1, createTime=[2020, 4, 18, 21, 17, 28]}, {id=2, url=/sys/user/login, params=[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)], status=1, message=null, method=POST, usedTime=64, result={"code":20000,"data":{"token":"8EC8B4B799355BF59D52E087801AD843"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=3, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=2, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=4, url=/article/list, params=[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)], status=1, message=null, method=POST, usedTime=78, result={"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isDeleted":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2019-07-14 12:21:50","views":1124},{"author":"7","commentCount":0,"createTime":"2020-04-18 20:09:50","id":"7","isDeleted":false,"isTop":false,"likeCount":0,"summary":"7","tagList":[],"title":"7","updateTime":"2020-04-18 20:09:50","views":7},{"author":"3","commentCount":0,"cover":"","createTime":"2020-04-18 17:30:52","id":"6","isDeleted":false,"isTop":false,"likeCount":0,"summary":"1","tagList":[],"title":"save","updateTime":"2020-04-18 17:30:52","views":1},{"author":"1","commentCount":0,"createTime":"2020-04-18 11:00:05","id":"5","isDeleted":false,"isTop":false,"likeCount":0,"summary":"12512313251","tagList":[],"title":"12515215","updateTime":"2020-04-18 11:00:05","views":4},{"author":"2","category":{"categoryName":"测试","id":1},"commentCount":232,"cover":"","createTime":"2020-04-08 10:54:04","id":"2","isDeleted":false,"isTop":false,"likeCount":2,"summary":"2","tagList":[{"id":2,"name":"java"}],"title":"这是推荐阅读的文章哇","updateTime":"2020-04-08 10:54:04","views":37},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isDeleted":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":124},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"createTime":"2019-06-17 23:48:04","id":"3","isDeleted":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=5, url=/category/list, params=[], status=1, message=null, method=GET, usedTime=31, result={"code":20000,"data":[{"categoryName":"测试","id":1,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"parentCategoryId":-1}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 29]}, {id=6, url=/tag/list, params=[], status=1, message=null, method=GET, usedTime=42, result={"code":20000,"data":[{"id":1,"name":"spring"},{"id":2,"name":"java"},{"id":3,"name":"mysql"},{"id":4,"name":"javascript"}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 29]}, {id=7, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=2, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 31]}, {id=8, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=3, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 35]}, {id=9, url=/tag/list, params=[], status=1, message=null, method=GET, usedTime=7, result={"code":20000,"data":[{"id":1,"name":"spring"},{"id":2,"name":"java"},{"id":3,"name":"mysql"},{"id":4,"name":"javascript"}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 35]}, {id=10, url=/category/list, params=[], status=1, message=null, method=GET, usedTime=6, result={"code":20000,"data":[{"categoryName":"测试","id":1,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"parentCategoryId":-1}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 36]}], params={}, sortColumn=createTime)](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
### The error may involve cn.codexing.blog.mapper.SysLogMapper.getByPage-Inline
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
	at cn.codexing.blog.service.impl.SysLogServiceImpl.listSysLog(SysLogServiceImpl.java:32)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$6f433582.listSysLog(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$63a61796.listSysLog(<generated>)
	at cn.codexing.blog.controller.LogController.getByPage(LogController.java:32)
	at cn.codexing.blog.controller.LogController$$FastClassBySpringCGLIB$$d4a072e6.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.LogController$$EnhancerBySpringCGLIB$$b728a1d7.getByPage(<generated>)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
(String), POST(String), 58(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":5},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:32:54.547 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:32:54.548 ERROR [http-nio-8088-exec-10]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
### The error may exist in file [E:\2020\myblog2.0\blog-backend\target\classes\mapper\SysLogMapper.xml]
### The error may involve cn.codexing.blog.mapper.SysLogMapper.getByPage-Inline
### The error occurred while setting parameters
### SQL: SELECT         id,url,params,status,message,method,used_time,result,ip,create_time         FROM sys_log                                  order by createTime desc LIMIT ?,?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'] with root cause
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3978)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3914)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2495)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1903)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1242)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy164.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy162.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at sun.reflect.GeneratedMethodAccessor202.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy161.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy95.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:177)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:78)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy101.getByPage(Unknown Source)
	at cn.codexing.blog.service.impl.SysLogServiceImpl.listSysLog(SysLogServiceImpl.java:32)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$6f433582.listSysLog(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$63a61796.listSysLog(<generated>)
	at cn.codexing.blog.controller.LogController.getByPage(LogController.java:32)
	at cn.codexing.blog.controller.LogController$$FastClassBySpringCGLIB$$d4a072e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.GeneratedMethodAccessor158.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.LogController$$EnhancerBySpringCGLIB$$b728a1d7.getByPage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 23:32:55.914 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/log/list
2020-04-19 23:32:55.915 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:32:55.915 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:32:55.915 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.LogController.getByPage
2020-04-19 23:32:55.916 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:32:55.917 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM sys_log 
2020-04-19 23:32:55.918 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:32:55.919 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==>  Preparing: SELECT id,url,params,status,message,method,used_time,result,ip,create_time FROM sys_log order by createTime desc LIMIT ?,? 
2020-04-19 23:32:55.919 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:32:55.922 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:32:55.922 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /log/list(String), [PageUtils(totalCount=1417, pageSize=10, totalPage=142, currPage=1, list=[{id=1, url=/article/list, params=[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=null, params={}, sortColumn=null)], status=1, message=null, method=POST, usedTime=442, result={"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isDeleted":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2019-07-14 12:21:50","views":1124},{"author":"7","commentCount":0,"createTime":"2020-04-18 20:09:50","id":"7","isDeleted":false,"isTop":false,"likeCount":0,"summary":"7","tagList":[],"title":"7","updateTime":"2020-04-18 20:09:50","views":7},{"author":"3","commentCount":0,"cover":"","createTime":"2020-04-18 17:30:52","id":"6","isDeleted":false,"isTop":false,"likeCount":0,"summary":"1","tagList":[],"title":"save","updateTime":"2020-04-18 17:30:52","views":1},{"author":"1","commentCount":0,"createTime":"2020-04-18 11:00:05","id":"5","isDeleted":false,"isTop":false,"likeCount":0,"summary":"12512313251","tagList":[],"title":"12515215","updateTime":"2020-04-18 11:00:05","views":4},{"author":"2","category":{"categoryName":"测试","id":1},"commentCount":232,"cover":"","createTime":"2020-04-08 10:54:04","id":"2","isDeleted":false,"isTop":false,"likeCount":2,"summary":"2","tagList":[{"id":2,"name":"java"}],"title":"这是推荐阅读的文章哇","updateTime":"2020-04-08 10:54:04","views":37},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isDeleted":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":124},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"createTime":"2019-06-17 23:48:04","id":"3","isDeleted":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}, ip=0:0:0:0:0:0:0:1, createTime=[2020, 4, 18, 21, 17, 28]}, {id=2, url=/sys/user/login, params=[SysUser(id=null, ip=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e, avatar=null, salt=null, email=null, tel=null, birthday=null, age=null, gender=null, userCreateTime=null, isEnable=null)], status=1, message=null, method=POST, usedTime=64, result={"code":20000,"data":{"token":"8EC8B4B799355BF59D52E087801AD843"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=3, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=2, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=4, url=/article/list, params=[PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=)], status=1, message=null, method=POST, usedTime=78, result={"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isDeleted":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2019-07-14 12:21:50","views":1124},{"author":"7","commentCount":0,"createTime":"2020-04-18 20:09:50","id":"7","isDeleted":false,"isTop":false,"likeCount":0,"summary":"7","tagList":[],"title":"7","updateTime":"2020-04-18 20:09:50","views":7},{"author":"3","commentCount":0,"cover":"","createTime":"2020-04-18 17:30:52","id":"6","isDeleted":false,"isTop":false,"likeCount":0,"summary":"1","tagList":[],"title":"save","updateTime":"2020-04-18 17:30:52","views":1},{"author":"1","commentCount":0,"createTime":"2020-04-18 11:00:05","id":"5","isDeleted":false,"isTop":false,"likeCount":0,"summary":"12512313251","tagList":[],"title":"12515215","updateTime":"2020-04-18 11:00:05","views":4},{"author":"2","category":{"categoryName":"测试","id":1},"commentCount":232,"cover":"","createTime":"2020-04-08 10:54:04","id":"2","isDeleted":false,"isTop":false,"likeCount":2,"summary":"2","tagList":[{"id":2,"name":"java"}],"title":"这是推荐阅读的文章哇","updateTime":"2020-04-08 10:54:04","views":37},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isDeleted":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":124},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"createTime":"2019-06-17 23:48:04","id":"3","isDeleted":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 28]}, {id=5, url=/category/list, params=[], status=1, message=null, method=GET, usedTime=31, result={"code":20000,"data":[{"categoryName":"测试","id":1,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"parentCategoryId":-1}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 29]}, {id=6, url=/tag/list, params=[], status=1, message=null, method=GET, usedTime=42, result={"code":20000,"data":[{"id":1,"name":"spring"},{"id":2,"name":"java"},{"id":3,"name":"mysql"},{"id":4,"name":"javascript"}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 29]}, {id=7, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=2, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 31]}, {id=8, url=/sys/info, params=[], status=1, message=null, method=GET, usedTime=3, result={"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 35]}, {id=9, url=/tag/list, params=[], status=1, message=null, method=GET, usedTime=7, result={"code":20000,"data":[{"id":1,"name":"spring"},{"id":2,"name":"java"},{"id":3,"name":"mysql"},{"id":4,"name":"javascript"}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 35]}, {id=10, url=/category/list, params=[], status=1, message=null, method=GET, usedTime=6, result={"code":20000,"data":[{"categoryName":"测试","id":1,"parentCategoryId":-1},{"categoryName":"微服务","id":2,"parentCategoryId":-1}],"msg":"操作成功"}, ip=127.0.0.1, createTime=[2020, 4, 18, 21, 38, 36]}], params={}, sortColumn=createTime)](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
### The error may involve cn.codexing.blog.mapper.SysLogMapper.getByPage-Inline
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
	at cn.codexing.blog.service.impl.SysLogServiceImpl.listSysLog(SysLogServiceImpl.java:32)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$6f433582.listSysLog(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$63a61796.listSysLog(<generated>)
	at cn.codexing.blog.controller.LogController.getByPage(LogController.java:32)
	at cn.codexing.blog.controller.LogController$$FastClassBySpringCGLIB$$d4a072e6.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.LogController$$EnhancerBySpringCGLIB$$b728a1d7.getByPage(<generated>)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
(String), POST(String), 1(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:32:55.925 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:32:55.926 ERROR [http-nio-8088-exec-8]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
### The error may exist in file [E:\2020\myblog2.0\blog-backend\target\classes\mapper\SysLogMapper.xml]
### The error may involve cn.codexing.blog.mapper.SysLogMapper.getByPage-Inline
### The error occurred while setting parameters
### SQL: SELECT         id,url,params,status,message,method,used_time,result,ip,create_time         FROM sys_log                                  order by createTime desc LIMIT ?,?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'] with root cause
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'createTime' in 'order clause'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:944)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3978)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3914)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2530)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2683)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2495)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1903)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1242)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy164.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy162.query(Unknown Source)
	at com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor.doQuery(MybatisSimpleExecutor.java:67)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:155)
	at com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor.query(MybatisCachingExecutor.java:90)
	at sun.reflect.GeneratedMethodAccessor202.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy161.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy95.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:177)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:78)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:96)
	at com.sun.proxy.$Proxy101.getByPage(Unknown Source)
	at cn.codexing.blog.service.impl.SysLogServiceImpl.listSysLog(SysLogServiceImpl.java:32)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$6f433582.listSysLog(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$63a61796.listSysLog(<generated>)
	at cn.codexing.blog.controller.LogController.getByPage(LogController.java:32)
	at cn.codexing.blog.controller.LogController$$FastClassBySpringCGLIB$$d4a072e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.GeneratedMethodAccessor158.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.LogController$$EnhancerBySpringCGLIB$$b728a1d7.getByPage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-19 23:33:13.568 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:33:13.568 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:33:13.569 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:33:13.569 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:33:13.570 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:33:13.570 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:33:13.571 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:33:13.572 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:33:13.573 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:33:13.577 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:33:14.260 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:33:14.260 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:33:14.261 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:33:14.261 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:33:14.261 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:33:14.262 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_deleted = 0 
2020-04-19 23:33:14.263 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 
2020-04-19 23:33:14.264 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 23:33:14.264 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 0(Long), 10(Long)
2020-04-19 23:33:14.266 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:14.266 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:33:14.267 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.268 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:14.268 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:33:14.269 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.271 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:14.271 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:33:14.272 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.273 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:14.273 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:33:14.275 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.276 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:14.277 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:33:14.278 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.279 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:14.279 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:33:14.281 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.281 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:14.281 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:33:14.282 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.282 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:14.283 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:33:14.284 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.284 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:14.285 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:33:14.286 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.287 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:14.288 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:33:14.289 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.290 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:14.291 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:33:14.291 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.292 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:14.293 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:33:14.293 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.294 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:14.295 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:33:14.295 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.296 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:14.297 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:33:14.297 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:33:14.298 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:14.299 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:33:14.299 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.300 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:14.301 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:33:14.302 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.303 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:14.304 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:33:14.305 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.306 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:14.306 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:33:14.307 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.308 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:14.309 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:33:14.310 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:14.311 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:14.311 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:33:14.312 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:33:14.312 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:33:14.312 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：52
2020-04-19 23:33:14.313 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":5},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}
2020-04-19 23:33:14.315 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:33:14.315 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={}, sortColumn=create_time)](String), 1(Integer), 	at cn.codexing.blog.controller.SystemController.getLoginInfo(SystemController.java:62)
	at cn.codexing.blog.controller.SystemController$$FastClassBySpringCGLIB$$700c3c85.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.SystemController$$EnhancerBySpringCGLIB$$d02b7a14.getLoginInfo(<generated>)
(String), POST(String), 52(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":5},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126}],"pageSize":10,"params":{},"totalCount":11,"totalPage":2},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:33:14.319 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:33:20.597 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/1251752142763507713
2020-04-19 23:33:20.598 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:33:20.598 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:33:20.598 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.get
2020-04-19 23:33:20.598 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:33:20.599 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-19 23:33:20.600 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-19 23:33:20.601 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:20.602 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:33:20.603 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:20.604 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:20.605 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-19 23:33:20.605 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:20.606 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-19 23:33:20.606 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-19 23:33:20.607 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},"msg":"操作成功"}
2020-04-19 23:33:20.607 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:33:20.608 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/1251752142763507713(String), [1251752142763507713](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
### The error may involve cn.codexing.blog.mapper.SysLogMapper.getByPage-Inline
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
	at cn.codexing.blog.service.impl.SysLogServiceImpl.listSysLog(SysLogServiceImpl.java:32)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$6f433582.listSysLog(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$63a61796.listSysLog(<generated>)
	at cn.codexing.blog.controller.LogController.getByPage(LogController.java:32)
	at cn.codexing.blog.controller.LogController$$FastClassBySpringCGLIB$$d4a072e6.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.LogController$$EnhancerBySpringCGLIB$$b728a1d7.getByPage(<generated>)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
(String), GET(String), 9(Long), {"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":12},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:33:20.648 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:33:47.702 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-19 23:33:47.703 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:33:47.703 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:33:47.703 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-19 23:33:47.703 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:33:47.705 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:33:47.705 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:33:47.706 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-19 23:33:47.707 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-19 23:33:47.708 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:33:47.708 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-19 23:33:47.709 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:33:47.711 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:33:47.711 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-19 23:33:47.712 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:33:47.713 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:33:47.713 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-19 23:33:47.714 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:33:47.715 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:33:47.715 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-19 23:33:47.716 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:33:47.717 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-19 23:33:47.717 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-19 23:33:47.718 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-19 23:33:47.718 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-19 23:33:47.718 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：16
2020-04-19 23:33:47.719 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:33:47.720 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:33:47.720 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
### The error may involve cn.codexing.blog.mapper.SysLogMapper.getByPage-Inline
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
	at cn.codexing.blog.service.impl.SysLogServiceImpl.listSysLog(SysLogServiceImpl.java:32)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$6f433582.listSysLog(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$FastClassBySpringCGLIB$$bae7b581.invoke(<generated>)
	at cn.codexing.blog.service.impl.SysLogServiceImpl$$EnhancerBySpringCGLIB$$63a61796.listSysLog(<generated>)
	at cn.codexing.blog.controller.LogController.getByPage(LogController.java:32)
	at cn.codexing.blog.controller.LogController$$FastClassBySpringCGLIB$$d4a072e6.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.LogController$$EnhancerBySpringCGLIB$$b728a1d7.getByPage(<generated>)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'usedTime' in 'order clause'
(String), POST(String), 16(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"6","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"1","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"0","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:33:47.723 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:33:48.890 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-19 23:33:48.890 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:33:48.891 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:33:48.893 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-19 23:33:48.894 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:33:48.896 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-19 23:33:48.896 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-19 23:33:48.924 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-19 23:33:48.926 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-19 23:33:48.927 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-19 23:33:48.928 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-19 23:33:48.929 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-19 23:33:48.929 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-19 23:33:48.930 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-19 23:33:48.931 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：41
2020-04-19 23:33:48.931 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"asdasd"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的f"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-19 23:33:48.932 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:33:48.932 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 41(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"asdasd"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的f"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:33:48.998 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:33:52.384 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-19 23:33:52.385 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-19 23:33:52.385 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:33:52.385 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-19 23:33:52.385 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:33:52.387 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-19 23:33:52.387 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-19 23:33:52.388 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-19 23:33:52.389 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 10(Long)
2020-04-19 23:33:52.392 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:52.392 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:33:52.393 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.394 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:52.394 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-19 23:33:52.395 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.396 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:52.396 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:33:52.397 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.398 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:52.398 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-19 23:33:52.399 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.400 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:52.400 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:33:52.401 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.402 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:52.402 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-19 23:33:52.403 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.404 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:52.405 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:33:52.405 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.406 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:52.408 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251770557519675394(String)
2020-04-19 23:33:52.409 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.410 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:52.411 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:33:52.412 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.413 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:52.413 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-19 23:33:52.414 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.415 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:52.416 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:33:52.417 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.418 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:52.418 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251726075243896833(String)
2020-04-19 23:33:52.419 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:33:52.420 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:52.421 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:33:52.421 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.422 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:52.422 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-19 23:33:52.424 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.425 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:52.426 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:33:52.427 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.428 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:52.428 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-19 23:33:52.429 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.429 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:52.430 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:33:52.430 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.431 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:52.432 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-19 23:33:52.432 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-19 23:33:52.433 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-19 23:33:52.433 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:33:52.434 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.435 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-19 23:33:52.435 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-19 23:33:52.436 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-19 23:33:52.437 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 10
2020-04-19 23:33:52.437 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：53
2020-04-19 23:33:52.437 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":5},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}
2020-04-19 23:33:52.439 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:33:52.440 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=create_time)](String), 1(Integer), POST(String), 53(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"测试","id":1},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-19 20:01:15","views":1128},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":5},{"author":"asdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>### asdkfhjajlkhdfkashdfki</p>","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"asdasd","tagList":[{"id":2,"name":"java"}],"title":"asdasd","updateTime":"2020-04-19 20:20:22","views":5},{"author":"test","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<blockquote>\n<p>yhjktykj</p>\n</blockquote>\n<p><span style=\"background-color: #00ff00;\">fgdfgfdgd</span></p>\n<p>&nbsp;</p>\n<pre class=\"language-java\"><code>public class Hello{\npublic sstatic void main(String args[]){\nSysout.print.out(\"hello\");\n}</code></pre>","createTime":"2020-04-19 15:12:12","id":"1251770557519675394","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"test","tagList":[{"id":2,"name":"java"}],"title":"test","updateTime":"2020-04-19 15:14:35","views":3},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":2},{"author":"sdfsdfsdfsdf","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"<p>zxcxzc</p>","createTime":"2020-04-19 12:15:26","id":"1251726075243896833","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdfsdfs","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"sdfsdf","updateTime":"2020-04-19 20:17:43","views":2},{"author":"sdf","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-19 12:14:41","views":0},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的f","updateTime":"2020-04-19 12:11:56","views":0},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-14 11:58:04","views":126},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":1}],"pageSize":10,"params":{},"totalCount":10,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:33:52.446 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-19 23:37:06.627 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/sys/info
2020-04-19 23:37:06.628 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-19 23:37:06.629 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-19 23:37:06.629 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.SystemController.getLoginInfo
2020-04-19 23:37:06.629 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36
2020-04-19 23:37:06.629 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-19 23:37:06.630 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}
2020-04-19 23:37:06.631 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-19 23:37:06.632 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /sys/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"password":"","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-19 23:37:06.644 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
