2020-04-25 10:16:57.550 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 10:16:58.996 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 9660 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-25 10:16:58.997 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-25 10:16:59.001 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-25 10:16:59.485 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-25 10:17:02.514 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-25 10:17:02.519 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-25 10:17:02.627 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 81ms. Found 0 Redis repository interfaces.
2020-04-25 10:17:03.351 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:17:03.456 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:17:03.467 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@237f7970' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:17:03.470 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:17:03.492 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:17:03.515 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$2bba3e41] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:17:04.168 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-25 10:17:04.179 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-25 10:17:04.179 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-25 10:17:04.180 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-25 10:17:04.286 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-25 10:17:04.286 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 5090 ms
2020-04-25 10:17:05.619 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 10:17:05.693 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 10:17:06.028 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 10:17:06.427 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-25 10:17:06.428 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-25 10:17:06.428 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-25 10:17:07.765 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-25 10:17:07.997 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@70f4abc1, org.springframework.security.web.context.SecurityContextPersistenceFilter@d3cce46, org.springframework.security.web.header.HeaderWriterFilter@7956f93a, org.springframework.security.web.authentication.logout.LogoutFilter@d120d7c, cn.codexing.blog.common.filter.JwtAuthenticationFilter@5ec6fede, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7e8f23ad, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@52b30054, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@382faf51, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@26d028f7, org.springframework.security.web.session.SessionManagementFilter@7ea3839e, org.springframework.security.web.access.ExceptionTranslationFilter@12c76d6e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@395281c2]
2020-04-25 10:17:08.626 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-25 10:17:08.648 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-25 10:17:08.683 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-25 10:17:08.880 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-25 10:17:08.932 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-25 10:17:08.942 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-25 10:17:08.953 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-25 10:17:08.965 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-25 10:17:08.976 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-25 10:17:08.983 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-25 10:17:09.023 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-25 10:17:09.044 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-25 10:17:09.047 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 11.335 seconds (JVM running for 13.926)
2020-04-25 10:18:32.444 INFO  [http-nio-8088-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-25 10:18:32.445 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-25 10:18:32.468 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 23 ms
2020-04-25 10:18:32.589 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:18:32.590 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:18:32.591 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:18:32.592 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:18:32.592 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:18:32.595 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:18:32.596 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:18:32.595 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:18:32.600 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:18:32.602 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:18:32.677 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 10:18:32.678 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:18:32.678 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:18:32.679 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 10:18:32.679 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:18:32.677 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:18:32.681 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:18:32.681 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:18:32.682 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:18:32.682 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:18:32.715 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-25 10:18:33.196 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:18:33.196 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:18:33.221 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:18:33.221 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:18:33.239 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:18:33.239 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:18:33.241 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:18:33.241 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 10:18:33.257 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:18:33.257 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:18:33.258 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:18:33.259 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 10:18:33.260 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:33.260 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：669
2020-04-25 10:18:33.260 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 10:18:33.260 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:18:33.263 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:33.264 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:18:33.267 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:33.269 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:18:33.273 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.273 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.275 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:33.275 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:33.276 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:18:33.276 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:18:33.276 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.278 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.279 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.281 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:33.279 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:33.282 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:18:33.283 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:33.283 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:18:33.284 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:18:33.285 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.286 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.287 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.287 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:33.288 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:33.288 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:18:33.288 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:18:33.289 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:18:33.289 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：704
2020-04-25 10:18:33.290 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.290 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.291 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:33.295 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:18:33.295 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:33.296 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:18:33.297 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.299 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.299 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:33.302 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:18:33.309 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:18:33.310 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:33.311 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:18:33.311 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.312 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:18:33.312 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.314 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：637
2020-04-25 10:18:33.315 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:33.316 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:18:33.316 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:18:33.318 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.320 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:33.322 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:18:33.322 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:18:33.323 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.326 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:18:33.325 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:18:33.325 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:18:33.330 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 637(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:18:33.330 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 704(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:18:33.330 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:33.331 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:18:33.332 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.332 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 669(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:18:33.334 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:33.335 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:18:33.343 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:18:33.342 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:18:33.343 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:18:33.347 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.352 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:33.354 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:18:33.356 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.359 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:33.360 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:18:33.361 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 10:18:33.363 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:33.364 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:18:33.368 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.371 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:33.372 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:18:33.381 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:33.383 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 10:18:33.386 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：709
2020-04-25 10:18:33.392 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:18:33.406 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:18:33.413 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 709(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:18:33.434 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:18:49.802 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:49.803 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:49.808 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:49.809 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:49.810 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:49.818 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:49.904 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:35 -用户为====>guest登录成功
2020-04-25 10:18:50.344 INFO  [http-nio-8088-exec-5]io.lettuce.core.EpollProvider.<clinit>:68 -Starting without optional epoll library
2020-04-25 10:18:50.345 INFO  [http-nio-8088-exec-5]io.lettuce.core.KqueueProvider.<clinit>:70 -Starting without optional kqueue library
2020-04-25 10:18:50.742 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:50.743 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:50.744 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:50.745 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:50.745 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:50.746 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:50.752 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:50.753 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:50.754 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:50.755 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:50.755 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:50.756 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:50.758 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:18:50.758 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:18:50.759 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:18:50.759 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:18:50.760 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:18:50.762 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:18:50.764 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 10:18:50.766 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:18:50.768 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:18:50.771 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:18:51.186 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:51.186 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:51.188 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:51.191 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:51.191 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:51.192 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:51.192 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:51.193 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:51.195 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:51.197 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:51.198 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:51.198 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:51.199 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:51.199 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:51.200 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:51.200 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:51.201 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:51.202 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:51.202 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:51.203 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:51.207 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:51.207 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:51.208 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:51.208 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:51.208 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:51.209 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:51.209 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:51.209 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:51.210 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:51.212 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:51.212 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:51.212 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:51.212 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:51.213 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:51.214 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:51.215 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:51.216 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:18:51.217 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:18:51.217 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:18:51.217 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:18:51.218 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:51.218 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:18:51.220 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:51.220 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:51.221 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:51.221 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:18:51.221 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:18:51.221 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:51.222 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:51.222 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:51.223 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:18:51.223 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:51.224 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:51.224 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:18:51.225 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:51.225 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:51.225 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:51.226 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:18:51.226 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:18:51.226 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:18:51.227 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:18:51.227 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:18:51.227 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:18:51.228 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:18:51.228 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:18:51.228 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.228 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:18:51.228 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:18:51.228 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:18:51.229 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:18:51.230 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:51.230 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:18:51.231 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:18:51.232 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:18:51.232 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 10:18:51.232 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:18:51.233 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:18:51.233 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:51.233 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 10:18:51.233 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:18:51.233 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:18:51.233 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:18:51.234 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-25 10:18:51.234 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:18:51.235 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.236 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:51.237 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:18:51.236 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:18:51.239 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:18:51.239 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:18:51.239 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 10:18:51.241 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.229 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:51.244 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 10:18:51.244 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:18:51.244 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 10:18:51.243 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:18:51.251 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：25
2020-04-25 10:18:51.252 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:18:51.250 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:51.244 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:18:51.254 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:18:51.257 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.259 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:51.259 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.260 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:18:51.261 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:51.262 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.262 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:18:51.264 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:51.266 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:18:51.255 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:18:51.267 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.267 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.269 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:51.268 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:51.268 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 25(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:18:51.269 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:18:51.269 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:18:51.270 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.270 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.272 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:51.272 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:18:51.273 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:18:51.273 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:18:51.273 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:18:51.274 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.274 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.275 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:18:51.275 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：59
2020-04-25 10:18:51.276 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:51.276 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:18:51.276 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:18:51.277 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:18:51.278 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.279 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 59(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:18:51.281 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:51.282 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:18:51.284 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:18:51.284 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.286 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:51.287 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:18:51.288 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.290 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:51.291 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:18:51.293 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.294 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:51.295 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:18:51.297 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.299 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:51.300 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:18:51.302 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.304 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:51.304 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:18:51.306 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.307 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:51.308 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:18:51.309 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 10:18:51.311 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:18:51.312 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:18:51.315 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.317 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:18:51.318 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:18:51.319 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:18:51.321 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 10:18:51.322 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：90
2020-04-25 10:18:51.323 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:18:51.327 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:18:51.329 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 90(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:18:51.334 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:18:53.442 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:53.443 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:53.444 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:53.447 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:53.448 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:53.450 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:53.456 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:18:53.457 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:18:53.458 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:18:53.460 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:18:53.460 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:53.461 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:18:53.466 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:18:53.467 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:18:53.468 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:18:53.468 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:18:53.468 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:18:53.475 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:18:53.476 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:18:53.478 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:18:53.478 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-25 10:18:53.485 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:18:53.487 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:18:53.488 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 12(Long), {"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:18:53.492 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:20:11.179 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:20:11.180 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:20:11.181 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:20:11.182 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:20:11.182 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.183 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:20:11.188 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:20:11.188 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:20:11.189 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:20:11.190 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:20:11.191 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.192 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:20:11.192 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:20:11.193 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:20:11.193 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:20:11.193 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:20:11.194 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:20:11.194 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-25 10:20:11.194 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 10:20:11.195 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:20:11.196 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:20:11.199 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:20:11.370 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:20:11.371 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:20:11.376 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:20:11.377 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:20:11.377 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:20:11.378 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:20:11.378 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.379 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:20:11.379 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:20:11.380 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:20:11.381 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.382 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:20:11.384 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:20:11.385 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:20:11.386 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:20:11.387 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:20:11.387 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:20:11.388 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.388 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:20:11.389 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:20:11.389 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:20:11.390 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:20:11.390 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:20:11.391 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.391 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:20:11.391 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:20:11.392 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:20:11.391 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:20:11.392 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:20:11.393 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:20:11.393 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:20:11.394 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:20:11.394 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.394 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:20:11.394 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:20:11.395 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:20:11.395 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:20:11.396 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-25 10:20:11.396 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:20:11.397 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:20:11.398 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:20:11.398 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:20:11.399 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:20:11.399 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:20:11.400 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:20:11.402 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:20:11.403 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:20:11.404 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:20:11.406 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:20:11.407 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:20:11.408 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:20:11.409 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:20:11.413 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:20:11.415 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:20:11.416 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:20:11.418 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:20:11.419 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:20:11.420 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:20:11.422 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:20:11.423 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:20:11.424 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:20:11.426 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:20:11.426 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:20:11.427 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:20:11.428 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:20:11.428 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：35
2020-04-25 10:20:11.429 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:20:11.430 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:20:11.431 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 35(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:20:11.447 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:20:11.617 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:20:11.617 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:20:11.618 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:20:11.620 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:20:11.620 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.621 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:20:11.629 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:20:11.630 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:20:11.631 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:20:11.632 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:20:11.633 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.634 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:20:11.635 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:20:11.636 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:20:11.636 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:20:11.636 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:20:11.636 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:20:11.637 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:20:11.638 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:20:11.639 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:20:11.640 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:20:11.641 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:20:11.642 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:20:11.643 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:20:11.644 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:20:11.645 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:20:11.645 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-25 10:20:11.646 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:20:11.647 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:20:11.647 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 10(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:20:11.650 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:20:11.677 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:20:11.677 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:20:11.678 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:20:11.679 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:20:11.680 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.681 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:20:11.687 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:20:11.688 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:20:11.689 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:20:11.690 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:20:11.690 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:20:11.691 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:20:11.692 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:20:11.693 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:20:11.693 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:20:11.693 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:20:11.693 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:20:11.694 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:20:11.694 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:20:11.695 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:20:11.696 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:20:11.696 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:20:11.697 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:20:11.698 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:20:11.701 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:22:08.763 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:22:08.764 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:22:08.765 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:22:08.766 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:22:08.767 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:22:08.767 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:22:08.773 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:22:08.773 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:22:08.774 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:22:08.774 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:22:08.775 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:22:08.776 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:22:08.778 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:22:08.779 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:22:08.779 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:22:08.779 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:22:08.780 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:22:08.781 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:22:08.781 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:22:08.783 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:22:08.783 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:22:08.784 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:22:08.787 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:22:08.788 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:22:08.791 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:23:33.551 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:33.552 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:33.553 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:33.554 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:33.554 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:33.555 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:23:33.561 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:33.562 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:33.563 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:33.565 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:33.565 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:33.566 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:23:33.567 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:23:33.568 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:23:33.568 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:23:33.569 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:23:33.569 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:23:33.570 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-25 10:23:33.570 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 10:23:33.572 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:23:33.573 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:23:33.575 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:23:33.782 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:33.783 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:33.784 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:33.785 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:33.786 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:33.787 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:23:33.793 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:33.794 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:33.795 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:33.796 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:33.797 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:33.798 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:23:33.799 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:23:33.800 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:23:33.800 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:23:33.801 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:23:33.801 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:23:33.803 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:23:33.804 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:33.806 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:23:33.807 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-25 10:23:33.807 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:23:33.811 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:23:33.813 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:23:33.818 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:23:34.022 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:34.023 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:34.024 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:34.025 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:34.027 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:34.027 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:34.030 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:23:34.030 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:34.031 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:34.028 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:34.033 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:34.033 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:34.033 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:34.035 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:23:34.035 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:34.035 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:34.036 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:34.037 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:34.036 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:34.038 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:34.039 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:34.039 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:34.040 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:23:34.040 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:34.040 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:23:34.040 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:34.041 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:23:34.041 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:23:34.041 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:34.042 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:23:34.043 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:23:34.043 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:34.044 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:23:34.044 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:34.045 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:23:34.045 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:23:34.046 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:23:34.047 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:23:34.047 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:23:34.048 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:23:34.048 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:23:34.048 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:23:34.048 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:23:34.048 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:23:34.050 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:23:34.051 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:23:34.051 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:23:34.052 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:23:34.052 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:23:34.053 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:23:34.053 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:23:34.051 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:34.054 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:23:34.054 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:23:34.054 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:34.055 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-25 10:23:34.055 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:23:34.056 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:23:34.056 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:34.057 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:23:34.057 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:23:34.057 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:34.058 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:34.058 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:23:34.058 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:23:34.059 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:23:34.060 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:23:34.061 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:23:34.061 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:23:34.061 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:23:34.062 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:23:34.062 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:23:34.062 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:23:34.064 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:23:34.064 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:23:34.064 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:23:34.065 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:23:34.068 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:23:34.068 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:23:34.068 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:23:34.070 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:23:34.070 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:23:34.071 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-25 10:23:34.071 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:23:34.071 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:23:34.073 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:23:34.073 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:23:34.074 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 10(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:23:34.075 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:23:34.076 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:23:34.077 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:23:34.078 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:23:34.080 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:23:34.081 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:23:34.083 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:23:34.084 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:23:34.085 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：38
2020-04-25 10:23:34.086 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:23:34.087 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:23:34.088 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 38(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:23:34.091 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:23:47.564 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:23:47.565 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:23:47.566 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:23:47.566 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:23:47.567 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:23:47.567 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:26:19.533 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:26:19.534 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:26:19.535 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:26:19.536 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:26:19.536 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:26:19.537 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:26:19.541 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:26:19.542 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:26:19.543 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:26:19.544 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:26:19.545 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:26:19.546 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:26:19.547 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:26:19.547 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:26:19.548 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:26:19.548 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:26:19.548 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:26:19.549 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:26:19.549 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:26:19.550 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:26:19.551 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:26:19.552 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:26:19.553 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:26:19.554 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:26:19.556 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:26:29.277 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:26:29.278 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:26:29.278 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:26:29.279 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:26:29.279 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:26:29.280 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:01.849 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 10:28:02.576 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 13208 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-25 10:28:02.577 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-25 10:28:02.578 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-25 10:28:02.900 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-25 10:28:04.210 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-25 10:28:04.212 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-25 10:28:04.258 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 33ms. Found 0 Redis repository interfaces.
2020-04-25 10:28:04.604 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:28:04.662 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:28:04.668 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@75d4a80f' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:28:04.670 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:28:04.682 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:28:04.693 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$ec07e272] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:28:05.205 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-25 10:28:05.214 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-25 10:28:05.214 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-25 10:28:05.215 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-25 10:28:05.315 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-25 10:28:05.316 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2649 ms
2020-04-25 10:28:06.124 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 10:28:06.188 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 10:28:06.416 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 10:28:06.803 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-25 10:28:06.804 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-25 10:28:06.805 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-25 10:28:08.034 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-25 10:28:08.199 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@734f8317, org.springframework.security.web.context.SecurityContextPersistenceFilter@37ffe4f3, org.springframework.security.web.header.HeaderWriterFilter@285bf5ac, org.springframework.security.web.authentication.logout.LogoutFilter@47c96f2c, cn.codexing.blog.common.filter.JwtAuthenticationFilter@17c0274c, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7198ab9a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@202f054f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@640a8f93, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7dd3981e, org.springframework.security.web.session.SessionManagementFilter@7ab2ba47, org.springframework.security.web.access.ExceptionTranslationFilter@18989e0, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1d7c9811]
2020-04-25 10:28:08.831 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-25 10:28:08.850 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-25 10:28:08.883 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-25 10:28:09.054 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-25 10:28:09.088 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-25 10:28:09.096 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-25 10:28:09.101 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-25 10:28:09.113 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-25 10:28:09.124 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-25 10:28:09.130 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-25 10:28:09.171 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-25 10:28:09.193 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-25 10:28:09.195 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 7.263 seconds (JVM running for 8.643)
2020-04-25 10:28:27.477 INFO  [http-nio-8088-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-25 10:28:27.477 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-25 10:28:27.490 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 13 ms
2020-04-25 10:28:28.079 INFO  [http-nio-8088-exec-2]io.lettuce.core.EpollProvider.<clinit>:68 -Starting without optional epoll library
2020-04-25 10:28:28.081 INFO  [http-nio-8088-exec-2]io.lettuce.core.KqueueProvider.<clinit>:70 -Starting without optional kqueue library
2020-04-25 10:28:28.465 INFO  [http-nio-8088-exec-2]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-25 10:28:28.602 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:28.615 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:28.625 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:28.627 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:28.628 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:28.631 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:28.643 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:28.644 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:28.645 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:28.646 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:28.646 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:28.647 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:28.663 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:28:28.663 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:28:28.664 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:28:28.665 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:28:28.666 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:28:28.671 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-25 10:28:28.686 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 10:28:28.707 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:28:28.708 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:28:28.714 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:28:28.960 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:28.961 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:28.963 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:28.964 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:28.965 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:28.967 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:28.968 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:28.972 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:28.973 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:28.988 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:28.989 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:28.989 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:28.990 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:28.992 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:28.993 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:28.994 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:28.995 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:28.996 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:29.002 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:29.003 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:29.007 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:29.008 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:29.009 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:29.010 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:29.010 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:28:29.013 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:28:29.014 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:28:29.016 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:28:29.047 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:28:29.056 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:28:29.057 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:29.061 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:28:29.062 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：52
2020-04-25 10:28:29.078 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:28:29.081 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:28:29.090 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:28:29.091 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 52(Long), {"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:28:29.090 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:28:29.094 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:28:29.094 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:28:29.095 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:28:29.097 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:28:29.158 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:28:29.159 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:28:29.166 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:28:29.167 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:28:29.176 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:28:29.178 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:28:29.182 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:28:29.184 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:28:29.186 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:28:29.188 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:28:29.191 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:28:29.192 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:28:29.193 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:28:29.195 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:28:29.196 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:28:29.197 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:28:29.199 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:28:29.201 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:28:29.203 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:28:29.205 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:28:29.205 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:28:29.206 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:28:29.207 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:28:29.208 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：118
2020-04-25 10:28:29.214 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:28:29.215 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:28:29.216 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 118(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:28:29.221 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:28:29.265 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:29.266 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:29.267 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:29.269 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:29.270 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:29.270 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:29.271 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:29.271 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:29.272 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:29.274 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:29.274 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:29.275 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:29.277 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:29.279 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:29.280 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:29.282 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:29.282 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:29.282 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:29.282 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:29.283 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:29.283 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:29.285 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:28:29.286 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:29.286 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:28:29.287 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:29.287 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:28:29.287 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:28:29.288 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:29.288 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:28:29.289 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:28:29.290 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:28:29.290 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:28:29.291 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:28:29.292 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:28:29.298 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:28:29.299 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:28:29.303 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:28:29.303 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:28:29.303 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:28:29.304 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:28:29.306 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:28:29.308 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：19
2020-04-25 10:28:29.308 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:28:29.310 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:28:29.311 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:28:29.313 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:28:29.313 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:28:29.314 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:28:29.314 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：29
2020-04-25 10:28:29.314 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:28:29.316 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 19(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:28:29.321 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:28:29.325 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:28:29.328 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:28:29.330 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 29(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:28:29.333 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:28:43.160 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:43.162 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:43.164 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:43.166 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:43.168 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:43.169 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:43.180 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:28:43.182 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:28:43.184 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:28:43.186 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:28:43.187 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:28:43.189 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:28:43.195 WARN  [http-nio-8088-exec-6]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'application/x-www-form-urlencoded;charset=UTF-8' not supported]
2020-04-25 10:29:30.970 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 10:29:30.971 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:29:30.971 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:29:30.972 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 10:29:30.973 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:29:30.984 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:29:30.985 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 10:29:30.987 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 10:29:30.988 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 10:29:30.990 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:29:30.991 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:29:30.993 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:30.994 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:29:30.995 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:29:30.997 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.000 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:29:31.001 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:29:31.002 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.003 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:29:31.004 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:29:31.005 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.006 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:29:31.007 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:29:31.008 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.009 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:29:31.009 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:29:31.010 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.012 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:29:31.012 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:29:31.013 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.016 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:29:31.017 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:29:31.018 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.020 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:29:31.021 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:29:31.022 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.023 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:29:31.023 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:29:31.024 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.026 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:29:31.026 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:29:31.027 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.028 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:29:31.029 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:29:31.030 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 10:29:31.032 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:29:31.033 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:29:31.034 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.035 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:29:31.036 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:29:31.037 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:31.038 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 10:29:31.039 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：70
2020-04-25 10:29:31.041 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:29:31.047 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:29:31.051 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 70(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:29:31.057 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:29:33.527 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:29:33.528 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:29:33.528 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:29:33.529 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:29:33.530 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:29:33.532 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:29:33.533 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:33.537 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:29:33.538 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：11
2020-04-25 10:29:33.538 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:29:33.540 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:29:33.541 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 11(Long), {"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:29:33.545 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:29:39.513 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:29:39.514 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:29:39.514 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:29:39.515 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:29:39.515 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:29:39.520 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:29:39.522 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 0(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$8eef5f4a.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 127.0.0.1(String)
2020-04-25 10:29:39.525 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:29:39.533 ERROR [http-nio-8088-exec-9]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$8eef5f4a.userInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-25 10:29:49.975 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:49.976 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:49.977 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:49.979 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:49.979 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:49.980 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.065 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:35 -用户为====>guest登录成功
2020-04-25 10:29:50.108 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:50.109 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:50.110 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:50.111 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:50.111 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.112 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.116 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:50.117 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:50.118 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:50.119 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:50.119 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.120 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.121 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:29:50.121 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:29:50.121 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:29:50.122 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:29:50.122 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:29:50.122 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：1
2020-04-25 10:29:50.122 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 10:29:50.123 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:29:50.124 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 1(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:29:50.130 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:29:50.413 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:50.414 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:50.416 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:50.417 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:50.418 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.419 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.425 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:50.426 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:50.431 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:50.433 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:50.434 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.435 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.437 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:29:50.437 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:29:50.438 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:29:50.438 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:29:50.439 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:29:50.444 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:29:50.446 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:29:50.450 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:29:50.451 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:29:50.454 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:29:50.455 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:29:50.456 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:29:50.460 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:29:50.461 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:29:50.462 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:29:50.464 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:29:50.465 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:29:50.466 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:29:50.468 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:29:50.469 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:29:50.470 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:29:50.471 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:29:50.472 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:29:50.474 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:29:50.476 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:29:50.477 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:29:50.479 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:29:50.479 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:29:50.480 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：43
2020-04-25 10:29:50.481 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:29:50.482 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:29:50.484 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 43(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:29:50.488 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:29:50.702 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:50.702 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:50.703 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:50.704 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:50.705 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.706 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.712 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:50.712 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:50.714 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:50.715 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:50.716 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.717 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.718 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:29:50.718 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:29:50.718 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:29:50.719 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:29:50.719 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:29:50.720 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:50.720 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:50.721 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:50.720 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:29:50.721 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:50.721 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.722 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:50.722 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:50.723 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:50.723 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:50.724 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.724 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.724 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:29:50.724 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-25 10:29:50.725 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.725 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.725 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:29:50.727 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:29:50.730 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:50.730 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:29:50.731 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:50.732 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:50.732 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:29:50.732 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:29:50.733 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:50.733 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:29:50.733 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.734 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.734 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:29:50.735 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:29:50.735 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:29:50.736 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:29:50.736 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:29:50.737 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:29:50.737 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:29:50.737 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:29:50.738 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:29:50.738 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:29:50.739 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:29:50.738 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:29:50.739 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:29:50.740 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:29:50.740 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:29:50.740 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:29:50.740 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:29:50.741 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:29:50.742 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:29:50.742 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:29:50.743 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:50.744 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:29:50.745 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:29:50.745 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:29:50.746 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-25 10:29:50.746 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:29:50.747 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:29:50.747 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:29:50.748 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：13
2020-04-25 10:29:50.748 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:29:50.749 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:29:50.749 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:29:50.751 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:29:50.752 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 13(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:29:50.753 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:29:50.755 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:30:19.822 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:30:19.823 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:30:19.824 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:30:19.826 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:30:19.827 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:30:19.828 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:30:19.836 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:30:19.837 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:30:19.840 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:30:19.842 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:30:19.843 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:30:19.844 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:30:19.846 WARN  [http-nio-8088-exec-6]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'application/x-www-form-urlencoded;charset=UTF-8' not supported]
2020-04-25 10:31:15.706 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:15.707 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:15.708 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:15.709 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:15.710 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:15.711 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:15.716 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:15.716 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:15.718 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:15.719 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:15.719 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:15.720 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:15.721 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:31:15.722 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:15.722 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:15.722 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:31:15.723 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:15.723 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-25 10:31:15.724 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 10:31:15.725 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:15.726 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:15.753 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:16.164 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:16.165 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:16.167 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:16.168 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:16.169 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:16.170 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:16.176 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:16.176 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:16.178 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:16.179 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:16.180 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:16.181 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:16.182 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:31:16.183 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:16.184 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:16.184 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:31:16.185 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:16.186 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:31:16.187 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:16.189 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:31:16.190 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-25 10:31:16.191 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:31:16.193 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:16.194 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":{"email":"123456@qq.com","id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:16.198 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:16.376 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:16.377 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:16.378 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:16.379 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:16.380 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:16.381 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:16.387 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:16.387 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:16.388 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:16.390 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:16.390 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:16.391 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:16.393 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:31:16.394 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:16.395 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:16.395 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:31:16.396 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:16.397 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:31:16.399 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:31:16.401 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:31:16.402 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:31:16.404 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:31:16.405 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:31:16.406 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:31:16.412 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:31:16.413 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:31:16.414 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：21
2020-04-25 10:31:16.416 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:31:16.418 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:16.420 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$8eef5f4a.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 21(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:16.425 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:16.468 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:16.469 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:16.470 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:16.470 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:16.471 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:16.471 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:16.472 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:16.472 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:16.473 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:16.473 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:16.474 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:16.475 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:16.479 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:16.480 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:16.481 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:16.481 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:16.482 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:16.483 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:16.483 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:16.483 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:16.485 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:16.485 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:16.485 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:16.486 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:16.486 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:31:16.487 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:31:16.487 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:16.487 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:31:16.488 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:16.488 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:31:16.488 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:16.488 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:16.488 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:31:16.489 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:16.490 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:31:16.491 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:31:16.491 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:31:16.491 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:31:16.492 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:31:16.493 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-25 10:31:16.493 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:31:16.494 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:31:16.494 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:31:16.495 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:16.495 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:16.496 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:31:16.496 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:16.498 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:16.499 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:16.500 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:16.501 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:31:16.504 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:16.508 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:16.509 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:31:16.510 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:16.512 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:16.513 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:31:16.515 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:16.517 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:16.518 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:31:16.519 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:16.521 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:16.522 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:31:16.523 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:16.524 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:31:16.525 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：39
2020-04-25 10:31:16.525 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:31:16.527 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:16.528 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 39(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:16.531 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:21.864 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:21.865 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:21.866 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:21.867 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:21.868 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:21.869 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:21.873 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:21.873 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:21.874 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:21.875 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:21.875 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:21.876 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:21.883 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/update
2020-04-25 10:31:21.884 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-25 10:31:21.884 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:21.884 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.updateUser
2020-04-25 10:31:21.884 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:21.885 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==>  Preparing: SELECT id,ip,username,password,avatar,email,tel,birthday,age,gender,user_create_time,is_enable,is_deleted FROM sys_user WHERE id=? 
2020-04-25 10:31:21.886 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:21.887 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -<==      Total: 1
2020-04-25 10:31:21.891 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==>  Preparing: UPDATE sys_user SET username=?, password=?, email=?, gender=?, user_create_time=? WHERE id=? 
2020-04-25 10:31:21.893 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==> Parameters: guest(String), $2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO(String), 123456@qq.com(String), 1(Integer), 2020-04-23T14:02:20(LocalDateTime), 2(Integer)
2020-04-25 10:31:21.901 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -<==    Updates: 1
2020-04-25 10:31:21.902 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：19
2020-04-25 10:31:21.902 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"修改成功"}
2020-04-25 10:31:21.903 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:21.903 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/update(String), [SysUser(id=2, ip=null, username=guest, password=$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO, avatar=null, email=123456@qq.com, tel=null, birthday=null, age=null, gender=1, userCreateTime=2020-04-23T14:02:20, isEnable=null, isDeleted=null)](String), 1(Integer), PUT(String), 19(Long), {"code":20000,"msg":"修改成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:21.906 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:22.233 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:22.235 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:22.237 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:22.239 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:22.240 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:22.241 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:22.249 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:22.249 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:22.250 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:22.251 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:22.251 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:22.252 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:22.253 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:31:22.254 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:22.254 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:22.254 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:31:22.255 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:22.256 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:31:22.256 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:22.257 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:31:22.258 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:31:22.258 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:31:22.259 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:22.260 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:22.264 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:27.447 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:27.450 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:27.451 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:27.452 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:27.453 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:27.453 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:27.458 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:27.459 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:27.460 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:27.461 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:27.462 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:27.463 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:27.463 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:31:27.464 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:27.464 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:27.465 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:31:27.465 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:27.466 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-25 10:31:27.466 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 10:31:27.467 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:27.468 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:27.471 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:27.799 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:27.800 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:27.801 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:27.802 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:27.802 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:27.803 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:27.809 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:27.809 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:27.811 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:27.812 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:27.813 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:27.814 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:27.816 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:31:27.816 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:27.817 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:27.817 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:31:27.818 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:27.819 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:31:27.819 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:27.821 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:31:27.822 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:31:27.822 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:31:27.824 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:27.825 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:27.830 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:28.014 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:28.015 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:28.016 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:28.017 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:28.017 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:28.018 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:28.022 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:28.022 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:28.024 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:28.025 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:28.026 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:28.027 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:28.029 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:31:28.030 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:31:28.031 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:28.031 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:31:28.032 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:28.035 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:31:28.036 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:31:28.038 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:31:28.038 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:31:28.040 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:28.041 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:31:28.042 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:28.044 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:28.045 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:31:28.047 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:28.048 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:28.049 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:31:28.051 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:28.052 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:28.053 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:31:28.054 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:28.055 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:28.057 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:31:28.058 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:28.059 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:28.059 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:31:28.060 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:28.061 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:31:28.062 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：33
2020-04-25 10:31:28.063 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:31:28.064 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:28.065 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 33(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:28.069 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:28.104 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:28.105 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:28.106 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:28.107 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:28.107 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:28.108 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:28.108 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:28.109 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:28.109 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:28.110 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:28.111 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:28.113 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:28.116 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:28.116 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:28.117 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:28.117 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:28.118 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:28.118 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:28.119 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:28.119 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:28.120 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:28.120 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:28.121 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:28.121 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:31:28.122 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:28.122 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:28.122 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:28.123 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:31:28.123 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:31:28.123 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:28.123 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:28.124 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:28.124 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:31:28.124 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:31:28.125 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:31:28.125 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:28.126 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:31:28.127 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:31:28.129 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:31:28.131 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:31:28.130 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:31:28.131 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-25 10:31:28.132 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:31:28.133 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:28.134 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:31:28.134 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:28.135 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:31:28.136 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:31:28.139 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:28.140 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:31:28.141 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:31:28.142 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：21
2020-04-25 10:31:28.143 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:31:28.145 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:28.146 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 21(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:28.149 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:38.316 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:38.316 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:38.317 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:38.318 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:38.318 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:38.319 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:38.322 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:38.323 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:38.324 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:38.325 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:38.325 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:38.326 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:38.328 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/update
2020-04-25 10:31:38.329 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-25 10:31:38.329 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:38.329 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.updateUser
2020-04-25 10:31:38.329 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:38.330 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==>  Preparing: SELECT id,ip,username,password,avatar,email,tel,birthday,age,gender,user_create_time,is_enable,is_deleted FROM sys_user WHERE id=? 
2020-04-25 10:31:38.331 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:38.332 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -<==      Total: 1
2020-04-25 10:31:38.334 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==>  Preparing: UPDATE sys_user SET username=?, password=?, email=?, gender=?, user_create_time=? WHERE id=? 
2020-04-25 10:31:38.335 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==> Parameters: guest(String), $2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO(String), 122222222223456@qq.com(String), 1(Integer), 2020-04-23T14:02:20(LocalDateTime), 2(Integer)
2020-04-25 10:31:38.339 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -<==    Updates: 1
2020-04-25 10:31:38.339 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：11
2020-04-25 10:31:38.339 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"修改成功"}
2020-04-25 10:31:38.340 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:38.340 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/update(String), [SysUser(id=2, ip=null, username=guest, password=$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO, avatar=null, email=122222222223456@qq.com, tel=null, birthday=null, age=null, gender=1, userCreateTime=2020-04-23T14:02:20, isEnable=null, isDeleted=null)](String), 1(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$8eef5f4a.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), PUT(String), 11(Long), {"code":20000,"msg":"修改成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:38.343 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:38.662 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:38.663 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:38.663 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:38.664 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:38.665 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:38.666 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:38.669 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:38.669 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:38.670 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:38.671 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:38.671 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:38.672 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:38.673 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:31:38.673 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:38.673 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:38.674 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:31:38.674 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:38.675 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:31:38.676 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:38.677 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:31:38.678 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:31:38.679 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:31:38.679 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:38.680 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:38.688 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:41.322 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:41.323 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:41.324 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:41.325 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:41.326 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:41.327 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:41.331 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:41.331 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:41.332 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:41.333 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:41.334 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:41.334 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:41.335 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:31:41.336 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:41.336 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:41.337 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:31:41.337 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:41.337 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-25 10:31:41.338 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 10:31:41.339 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:41.339 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:41.350 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:41.771 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:41.771 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:41.773 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:41.774 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:41.775 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:41.776 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:41.780 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:41.781 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:41.782 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:41.784 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:41.784 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:41.786 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:41.788 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:31:41.788 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:41.789 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:41.789 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:31:41.790 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:41.791 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:31:41.792 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:41.794 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:31:41.795 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-25 10:31:41.796 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:31:41.797 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:41.798 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":{"email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:41.802 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:41.988 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:41.989 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:41.990 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:41.992 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:41.993 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:41.994 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:41.998 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:41.998 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:42.000 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:42.001 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:42.002 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:42.003 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:42.004 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:31:42.005 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:31:42.005 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:42.006 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:31:42.006 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:42.009 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:31:42.010 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:31:42.012 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:31:42.012 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:31:42.015 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:42.015 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:31:42.017 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:42.019 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:42.020 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:31:42.021 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:42.023 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:42.025 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:31:42.027 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:42.028 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:42.029 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:31:42.030 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:42.031 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:42.032 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:31:42.033 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:42.035 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:31:42.035 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:31:42.037 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:31:42.038 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:31:42.039 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：35
2020-04-25 10:31:42.039 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:31:42.041 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:42.042 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 35(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:42.046 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:42.077 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:42.077 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:42.078 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:42.080 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:42.081 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:42.081 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:42.082 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:42.082 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:42.083 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:42.084 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:42.084 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:42.085 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:42.090 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:42.090 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:31:42.090 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:42.090 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:31:42.092 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:42.092 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:31:42.093 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:42.093 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:31:42.094 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:42.094 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:31:42.095 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:42.095 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:31:42.096 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:31:42.096 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:31:42.096 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:42.096 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:31:42.096 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:42.096 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:31:42.097 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:31:42.097 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:31:42.097 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:42.097 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:31:42.098 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:31:42.098 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:31:42.099 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:31:42.099 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:31:42.100 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:31:42.100 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:31:42.100 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:31:42.100 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:31:42.100 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:31:42.101 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:42.102 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:31:42.102 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:42.103 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:31:42.104 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:31:42.105 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:31:42.106 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:31:42.106 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:31:42.107 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：11
2020-04-25 10:31:42.107 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:31:42.109 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:31:42.110 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 11(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:31:42.112 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:32:28.792 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:32:28.794 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:32:28.795 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:32:28.798 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:32:28.799 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:32:28.800 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:32:28.806 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:32:28.807 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:32:28.809 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:32:28.811 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:32:28.811 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:32:28.813 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:32:28.818 WARN  [http-nio-8088-exec-6]o.s.w.s.mvc.support.DefaultHandlerExceptionResolver.logException:199 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Invalid JSON input: Cannot deserialize value of type `java.lang.Integer` from String "18888888888": Overflow: numeric value (18888888888) out of range of Integer (-2147483648 - 2147483647); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.lang.Integer` from String "18888888888": Overflow: numeric value (18888888888) out of range of Integer (-2147483648 - 2147483647)
 at [Source: (PushbackInputStream); line: 1, column: 165] (through reference chain: cn.codexing.blog.entity.SysUser["tel"])]
2020-04-25 10:33:39.375 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 10:33:40.233 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 12532 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-25 10:33:40.234 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-25 10:33:40.234 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-25 10:33:40.571 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-25 10:33:41.725 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-25 10:33:41.728 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-25 10:33:41.775 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 31ms. Found 0 Redis repository interfaces.
2020-04-25 10:33:42.132 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:33:42.194 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:33:42.200 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@1f346ad2' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:33:42.201 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:33:42.215 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:33:42.227 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$dd01a8e0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 10:33:42.688 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-25 10:33:42.696 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-25 10:33:42.697 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-25 10:33:42.698 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-25 10:33:42.795 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-25 10:33:42.795 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2372 ms
2020-04-25 10:33:43.544 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 10:33:43.601 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 10:33:43.784 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 10:33:44.188 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-25 10:33:44.188 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-25 10:33:44.189 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-25 10:33:45.392 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-25 10:33:45.549 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1edf71d9, org.springframework.security.web.context.SecurityContextPersistenceFilter@1109730f, org.springframework.security.web.header.HeaderWriterFilter@194b9783, org.springframework.security.web.authentication.logout.LogoutFilter@1e471884, cn.codexing.blog.common.filter.JwtAuthenticationFilter@21edd891, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@382d549a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@46c662f2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5ed65e4b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@52d9d817, org.springframework.security.web.session.SessionManagementFilter@4dd1548e, org.springframework.security.web.access.ExceptionTranslationFilter@6785c9fa, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1f71e024]
2020-04-25 10:33:46.167 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-25 10:33:46.182 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-25 10:33:46.210 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-25 10:33:46.388 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-25 10:33:46.418 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-25 10:33:46.425 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-25 10:33:46.431 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-25 10:33:46.442 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-25 10:33:46.452 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-25 10:33:46.459 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-25 10:33:46.497 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-25 10:33:46.517 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-25 10:33:46.520 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 7.083 seconds (JVM running for 8.472)
2020-04-25 10:34:21.557 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-25 10:34:21.558 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-25 10:34:21.572 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 14 ms
2020-04-25 10:34:22.136 INFO  [http-nio-8088-exec-1]io.lettuce.core.EpollProvider.<clinit>:68 -Starting without optional epoll library
2020-04-25 10:34:22.138 INFO  [http-nio-8088-exec-1]io.lettuce.core.KqueueProvider.<clinit>:70 -Starting without optional kqueue library
2020-04-25 10:34:22.510 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-25 10:34:22.650 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:34:22.664 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:34:22.675 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:34:22.677 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:34:22.678 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:22.680 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:34:22.692 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:34:22.693 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:34:22.694 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:34:22.695 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:34:22.696 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:22.696 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:34:22.749 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/update
2020-04-25 10:34:22.749 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-25 10:34:22.750 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:34:22.751 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.updateUser
2020-04-25 10:34:22.752 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:34:22.760 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==>  Preparing: SELECT id,ip,username,password,avatar,email,tel,birthday,age,gender,user_create_time,is_enable,is_deleted FROM sys_user WHERE id=? 
2020-04-25 10:34:22.761 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:22.764 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -<==      Total: 1
2020-04-25 10:34:22.789 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==>  Preparing: UPDATE sys_user SET username=?, password=?, email=?, tel=?, birthday=?, gender=?, user_create_time=? WHERE id=? 
2020-04-25 10:34:22.791 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==> Parameters: guest(String), $2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO(String), 122222222223456@qq.com(String), 18888888888(String), 2020-04-24(LocalDate), 1(Integer), 2020-04-23T14:02:20(LocalDateTime), 2(Integer)
2020-04-25 10:34:22.796 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -<==    Updates: 1
2020-04-25 10:34:22.797 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：49
2020-04-25 10:34:22.807 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"修改成功"}
2020-04-25 10:34:22.813 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:34:22.814 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/update(String), [SysUser(id=2, ip=null, username=guest, password=$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO, avatar=null, email=122222222223456@qq.com, tel=18888888888, birthday=2020-04-24, age=null, gender=1, userCreateTime=2020-04-23T14:02:20, isEnable=null, isDeleted=null)](String), 1(Integer), PUT(String), 49(Long), {"code":20000,"msg":"修改成功"}(String), 127.0.0.1(String)
2020-04-25 10:34:22.817 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:34:22.871 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:34:22.872 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:34:22.873 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:34:22.875 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:34:22.876 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:22.877 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:34:22.883 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:34:22.883 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:34:22.884 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:34:22.885 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:34:22.886 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:22.887 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:34:22.890 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:34:22.890 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:34:22.890 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:34:22.891 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:34:22.891 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:34:22.893 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:34:22.893 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:22.896 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:34:22.897 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-25 10:34:22.905 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:34:22.907 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:34:22.909 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:34:22.914 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:34:45.271 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:34:45.272 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:34:45.273 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:34:45.275 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:34:45.275 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:45.277 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:34:45.283 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:34:45.284 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:34:45.286 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:34:45.288 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:34:45.289 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:45.291 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:34:45.297 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 10:34:45.297 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:34:45.297 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:34:45.297 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 10:34:45.297 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:34:45.343 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:34:45.344 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 10:34:45.349 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 10:34:45.351 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 10:34:45.355 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:34:45.356 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:34:45.359 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.361 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:34:45.361 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:34:45.364 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.366 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:34:45.367 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:34:45.369 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.371 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:34:45.372 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:34:45.373 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.374 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:34:45.375 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:34:45.376 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.377 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:34:45.378 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:34:45.379 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.381 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:34:45.381 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:34:45.382 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.385 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:34:45.385 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:34:45.387 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.388 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:34:45.389 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:34:45.390 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.391 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:34:45.392 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:34:45.393 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.395 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:34:45.396 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:34:45.397 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.398 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:34:45.399 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:34:45.401 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 10:34:45.404 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:34:45.404 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:34:45.406 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.407 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:34:45.407 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:34:45.408 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:34:45.409 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 10:34:45.410 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：113
2020-04-25 10:34:45.425 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:34:45.429 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:34:45.431 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 113(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:34:45.437 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:34:47.807 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:34:47.808 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:34:47.809 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:34:47.812 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:34:47.813 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:47.814 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:34:47.821 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:34:47.822 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:34:47.823 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:34:47.824 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:34:47.824 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:47.825 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:34:47.826 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:34:47.827 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:34:47.827 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:34:47.827 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:34:47.828 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:34:47.829 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:34:47.830 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:34:47.831 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:34:47.832 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-25 10:34:47.832 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:34:47.834 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:34:47.835 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:34:47.840 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:35:41.494 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:35:41.495 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:35:41.496 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:35:41.497 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:35:41.498 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:35:41.499 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:35:41.505 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:35:41.506 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 10:35:41.507 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:35:41.508 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:35:41.509 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:35:41.510 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 10:35:41.511 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:35:41.512 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:35:41.513 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:35:41.513 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:35:41.514 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:35:41.515 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:35:41.516 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:35:41.518 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:35:41.518 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-25 10:35:41.519 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:35:41.520 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:35:41.521 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:35:41.526 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:44:55.898 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:44:55.899 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:44:55.899 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:44:55.900 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:44:55.900 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:44:55.904 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:44:55.905 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:44:55.906 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:44:55.907 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-25 10:44:55.907 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:44:55.909 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:44:55.910 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 9(Long), {"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:44:55.913 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:45:40.285 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:45:40.285 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:45:40.286 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:45:40.286 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:45:40.286 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:45:40.288 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:45:40.288 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:45:40.290 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:45:40.291 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-25 10:45:40.291 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:45:40.292 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:45:40.293 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:45:40.297 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:46:22.465 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 10:46:22.465 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:46:22.466 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:46:22.466 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:46:22.466 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:46:22.467 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:46:22.468 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 10:46:22.469 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:46:22.469 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:46:22.470 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 10:46:22.471 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:46:22.472 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:46:22.475 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:46:25.685 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:46:25.686 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:46:25.687 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:46:25.688 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:46:25.688 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:46:25.692 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:46:25.693 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 0(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$80eca1c3.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 127.0.0.1(String)
2020-04-25 10:46:25.696 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:46:25.709 ERROR [http-nio-8088-exec-9]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$80eca1c3.userInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-25 10:46:32.225 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.226 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.227 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.228 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.228 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.229 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.317 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:35 -用户为====>admin登录成功
2020-04-25 10:46:32.358 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.358 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.359 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.360 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.360 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.361 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.366 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.367 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.368 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.369 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.370 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.370 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.371 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:46:32.371 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:46:32.372 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:46:32.372 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:46:32.372 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:46:32.373 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-25 10:46:32.375 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}
2020-04-25 10:46:32.377 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:46:32.378 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:46:32.380 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:46:32.865 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.867 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.870 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.871 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.872 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.874 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.875 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.877 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.882 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.886 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.887 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.882 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.890 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.892 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.892 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.892 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.893 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.893 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.897 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.896 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.898 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.899 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:46:32.899 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.899 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:46:32.899 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:46:32.900 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:46:32.900 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.900 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:46:32.901 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.901 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.902 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:46:32.903 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.903 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.905 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:46:32.905 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.905 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-25 10:46:32.906 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.906 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.906 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","email":"2933575030@qq.com","id":1,"password":"$2a$10$ynofDKIPZ3/Qrq6Z/Zqpd.EBUpbMY5WovzIh8SzXFsS9ObBQqbQDO","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:46:32.906 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.907 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.908 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:46:32.910 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","email":"2933575030@qq.com","id":1,"password":"$2a$10$ynofDKIPZ3/Qrq6Z/Zqpd.EBUpbMY5WovzIh8SzXFsS9ObBQqbQDO","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:46:32.910 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.911 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.912 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.914 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.916 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:46:32.916 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:46:32.917 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:46:32.917 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:46:32.917 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.918 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:46:32.914 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.918 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.920 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.921 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.922 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.913 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:46:32.923 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.928 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:46:32.928 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:46:32.929 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:46:32.929 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:46:32.929 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:46:32.931 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:46:32.931 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:46:32.928 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:46:32.932 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:46:32.932 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:46:32.934 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:46:32.933 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：17
2020-04-25 10:46:32.935 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:46:32.936 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.937 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:46:32.938 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:46:32.939 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:46:32.939 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:46:32.939 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:46:32.940 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:46:32.940 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:46:32.941 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:46:32.941 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 17(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:46:32.942 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:46:32.943 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:46:32.944 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:46:32.946 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:46:32.945 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:46:32.947 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:46:32.950 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:46:32.950 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:46:32.953 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:46:32.953 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:46:32.954 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:46:32.955 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:46:32.955 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:46:32.955 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:46:32.956 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：17
2020-04-25 10:46:32.957 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:46:32.957 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:46:32.957 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:46:32.958 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:46:32.960 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 17(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:46:32.961 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:46:32.963 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:46:32.963 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:46:32.964 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:46:32.965 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:46:32.967 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:46:32.968 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:46:32.969 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:46:32.971 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:46:32.972 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:46:32.973 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:46:32.975 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:46:32.975 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:46:32.976 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:46:32.978 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:46:32.979 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:46:32.981 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:46:32.981 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:46:32.982 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：54
2020-04-25 10:46:32.986 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:46:32.987 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:46:32.988 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 54(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:46:32.991 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:05.418 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:05.418 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:05.420 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:05.421 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:05.422 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:05.425 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:05.428 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:05.429 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:05.430 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:05.431 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:05.431 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:05.432 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:05.433 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/update
2020-04-25 10:47:05.434 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-25 10:47:05.434 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:05.434 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.updateUser
2020-04-25 10:47:05.434 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:05.435 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==>  Preparing: SELECT id,ip,username,password,avatar,email,tel,birthday,age,gender,user_create_time,is_enable,is_deleted FROM sys_user WHERE id=? 
2020-04-25 10:47:05.435 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:05.437 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -<==      Total: 1
2020-04-25 10:47:05.440 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==>  Preparing: UPDATE sys_user SET username=?, password=?, avatar=?, email=?, tel=?, birthday=?, gender=?, user_create_time=? WHERE id=? 
2020-04-25 10:47:05.441 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==> Parameters: admin(String), $2a$10$ynofDKIPZ3/Qrq6Z/Zqpd.EBUpbMY5WovzIh8SzXFsS9ObBQqbQDO(String), http://cdn.codexing.cn/avatar(String), 2933575030@qq.com(String), 18888888888(String), 1998-11-01(LocalDate), 1(Integer), 2020-04-21T17:55:53(LocalDateTime), 1(Integer)
2020-04-25 10:47:05.446 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -<==    Updates: 1
2020-04-25 10:47:05.446 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：13
2020-04-25 10:47:05.447 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"修改成功"}
2020-04-25 10:47:05.448 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:05.448 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/update(String), [SysUser(id=1, ip=null, username=admin, password=$2a$10$ynofDKIPZ3/Qrq6Z/Zqpd.EBUpbMY5WovzIh8SzXFsS9ObBQqbQDO, avatar=http://cdn.codexing.cn/avatar, email=2933575030@qq.com, tel=18888888888, birthday=1998-11-01, age=null, gender=1, userCreateTime=2020-04-21T17:55:53, isEnable=null, isDeleted=null)](String), 1(Integer), PUT(String), 13(Long), {"code":20000,"msg":"修改成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:05.451 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:05.669 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:05.669 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:05.670 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:05.671 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:05.672 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:05.673 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:05.677 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:05.678 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:05.678 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:05.678 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:05.679 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:05.680 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:05.681 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:47:05.681 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:47:05.682 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:05.682 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:47:05.682 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:05.683 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:47:05.683 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:05.684 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:47:05.685 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:47:05.685 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-11-01","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$ynofDKIPZ3/Qrq6Z/Zqpd.EBUpbMY5WovzIh8SzXFsS9ObBQqbQDO","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:47:05.687 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:05.688 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-11-01","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$ynofDKIPZ3/Qrq6Z/Zqpd.EBUpbMY5WovzIh8SzXFsS9ObBQqbQDO","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:05.691 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:32.261 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:32.263 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:32.266 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:32.268 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:32.269 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:32.270 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:32.275 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:32.275 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:32.276 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:32.277 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:32.278 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:32.279 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:32.281 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/update
2020-04-25 10:47:32.282 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-25 10:47:32.283 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:32.283 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.updateUser
2020-04-25 10:47:32.284 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:32.285 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==>  Preparing: SELECT id,ip,username,password,avatar,email,tel,birthday,age,gender,user_create_time,is_enable,is_deleted FROM sys_user WHERE id=? 
2020-04-25 10:47:32.285 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:32.287 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -<==      Total: 1
2020-04-25 10:47:32.373 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==>  Preparing: UPDATE sys_user SET username=?, password=?, avatar=?, email=?, tel=?, birthday=?, gender=?, user_create_time=? WHERE id=? 
2020-04-25 10:47:32.374 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==> Parameters: admin(String), $2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG(String), http://cdn.codexing.cn/avatar(String), 2933575030@qq.com(String), 18888888888(String), 1998-10-31(LocalDate), 1(Integer), 2020-04-21T17:55:53(LocalDateTime), 1(Integer)
2020-04-25 10:47:32.378 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -<==    Updates: 1
2020-04-25 10:47:32.378 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：97
2020-04-25 10:47:32.379 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"修改成功"}
2020-04-25 10:47:32.380 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:32.381 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/update(String), [SysUser(id=1, ip=null, username=admin, password=godforwar, avatar=http://cdn.codexing.cn/avatar, email=2933575030@qq.com, tel=18888888888, birthday=1998-10-31, age=null, gender=1, userCreateTime=2020-04-21T17:55:53, isEnable=null, isDeleted=null)](String), 1(Integer), PUT(String), 97(Long), {"code":20000,"msg":"修改成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:32.383 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:32.504 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:32.504 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:32.505 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:32.506 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:32.506 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:32.507 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:32.511 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:32.512 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:32.514 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:32.515 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:32.516 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:32.517 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:32.518 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:47:32.518 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:47:32.519 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:32.519 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:47:32.519 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:32.520 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:47:32.520 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:32.521 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:47:32.522 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:47:32.522 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:47:32.523 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:32.523 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$80eca1c3.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 4(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:32.525 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:45.261 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:45.261 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:45.263 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:45.263 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:45.264 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.265 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:45.269 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:45.270 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:45.272 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:45.273 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:45.274 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.276 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:45.277 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:47:45.278 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:47:45.279 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:45.279 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:47:45.280 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:45.280 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-25 10:47:45.281 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}
2020-04-25 10:47:45.283 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:45.284 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:45.286 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:45.487 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:45.488 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:45.488 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:45.489 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:45.489 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:45.490 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:45.490 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:45.491 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.492 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:45.493 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.493 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:45.494 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:45.499 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:45.499 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:45.500 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:45.500 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:45.501 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:45.501 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:45.502 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:45.502 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.503 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:45.503 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.504 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:45.505 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:45.505 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:47:45.506 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:47:45.506 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:47:45.506 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:47:45.506 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:45.506 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:45.507 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:47:45.507 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:45.507 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:47:45.508 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:45.508 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:47:45.509 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.509 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:47:45.510 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:47:45.512 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:47:45.512 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:47:45.513 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-25 10:47:45.513 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:47:45.513 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:47:45.514 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:45.515 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:45.515 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:47:45.516 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:45.516 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:47:45.518 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:45.518 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:47:45.519 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：13
2020-04-25 10:47:45.519 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:47:45.520 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:45.521 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:45.522 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 13(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:45.536 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:45.729 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:45.730 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:45.731 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:45.732 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:45.732 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.733 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:45.738 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:45.738 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:45.739 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:45.742 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:45.743 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.744 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:45.746 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:47:45.746 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:47:45.747 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:45.747 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:47:45.748 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:45.750 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:47:45.751 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.752 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:47:45.753 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:47:45.755 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:45.756 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:47:45.757 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:45.759 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:45.760 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:47:45.762 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:45.763 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:45.764 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:47:45.765 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:45.766 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:45.767 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:47:45.768 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:45.769 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:45.769 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:47:45.770 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:45.771 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:45.772 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:47:45.773 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:45.773 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:47:45.774 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：28
2020-04-25 10:47:45.775 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:47:45.776 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:45.777 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 28(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:45.782 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:45.794 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:45.795 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:45.795 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:45.796 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:45.797 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.797 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:45.802 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:47:45.802 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:47:45.803 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:47:45.804 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:47:45.805 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:45.806 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:47:45.807 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:47:45.808 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:47:45.808 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:45.809 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:47:45.809 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:45.810 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:47:45.810 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:47:45.811 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:47:45.812 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:47:45.812 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:47:45.813 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:45.814 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:45.816 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:54.793 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:47:54.794 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:47:54.794 WARN  [http-nio-8088-exec-6]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /user/myinfo/
2020-04-25 10:47:54.795 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:54.796 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:47:54.796 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:54.799 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:47:54.800 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:47:54.802 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:47:54.803 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:47:54.805 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:54.805 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:47:54.807 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:54.808 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:54.809 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:47:54.810 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:54.811 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:54.811 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:47:54.812 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:54.813 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:54.814 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:47:54.815 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:54.816 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:54.816 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:47:54.817 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:54.818 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:47:54.819 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:47:54.820 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:47:54.820 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:47:54.821 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：28
2020-04-25 10:47:54.821 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:47:54.823 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:54.824 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 28(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:54.829 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:55.094 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:47:55.094 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:47:55.095 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:55.095 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:47:55.095 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:47:55.096 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:47:55.096 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:55.096 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:55.096 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:47:55.096 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:55.096 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:47:55.097 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:47:55.097 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:47:55.098 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:47:55.099 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:47:55.099 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:47:55.100 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:47:55.100 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:55.100 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:47:55.101 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:47:55.101 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:47:55.101 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:55.101 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:47:55.102 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$80eca1c3.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 5(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:55.102 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:55.103 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:47:55.104 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-25 10:47:55.105 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:47:55.106 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:55.106 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:55.107 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 10(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:55.109 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:47:56.159 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 10:47:56.159 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:47:56.159 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:47:56.160 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 10:47:56.160 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:47:56.164 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:47:56.164 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 10:47:56.165 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 10:47:56.166 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 10:47:56.168 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:47:56.168 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:47:56.169 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.170 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:47:56.171 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:47:56.172 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.174 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:47:56.174 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:47:56.176 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.177 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:47:56.178 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:47:56.180 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.181 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:47:56.181 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:47:56.182 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.183 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:47:56.183 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:47:56.183 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.185 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:47:56.185 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:47:56.186 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.188 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:47:56.188 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:47:56.190 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.191 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:47:56.192 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:47:56.193 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.194 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:47:56.194 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:47:56.195 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.197 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:47:56.197 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:47:56.199 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.200 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:47:56.200 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:47:56.201 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 10:47:56.203 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:47:56.203 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:47:56.205 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.206 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:47:56.207 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:47:56.208 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:47:56.208 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 10:47:56.209 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：50
2020-04-25 10:47:56.210 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:47:56.212 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:47:56.212 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 50(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:47:56.219 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:48:04.730 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:04.731 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:04.732 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:04.733 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:04.733 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:04.734 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:04.822 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:26 -用户admin登录失败
2020-04-25 10:48:16.035 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.035 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.036 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.037 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.038 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.039 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.123 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:35 -用户为====>admin登录成功
2020-04-25 10:48:16.288 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.288 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.289 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.290 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.290 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.291 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.295 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.296 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.297 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.298 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.299 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.300 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.301 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:48:16.301 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:48:16.302 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:48:16.302 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:48:16.302 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:48:16.302 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：1
2020-04-25 10:48:16.303 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}
2020-04-25 10:48:16.304 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:48:16.305 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 1(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:48:16.309 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:48:16.446 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.446 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.447 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.448 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.449 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.450 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.454 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.454 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.455 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.456 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.457 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.458 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.459 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 10:48:16.460 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:48:16.460 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:48:16.461 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 10:48:16.461 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:48:16.469 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:48:16.470 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 10:48:16.471 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 10:48:16.472 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 10:48:16.474 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:48:16.474 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:48:16.475 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.476 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:48:16.476 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:48:16.477 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.478 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:48:16.479 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:48:16.480 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.481 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:48:16.481 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:48:16.483 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.487 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:48:16.487 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:48:16.488 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.489 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:48:16.490 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:48:16.491 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.493 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:48:16.493 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:48:16.494 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.496 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:48:16.497 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:48:16.498 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.500 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:48:16.501 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:48:16.502 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.504 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:48:16.505 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:48:16.506 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.508 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:48:16.509 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:48:16.510 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.511 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:48:16.512 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:48:16.513 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 10:48:16.514 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:48:16.516 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:48:16.517 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.519 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:48:16.520 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:48:16.522 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.523 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 10:48:16.523 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：64
2020-04-25 10:48:16.524 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:48:16.527 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:48:16.528 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 64(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:48:16.532 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:48:16.684 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.685 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.686 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.687 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.688 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.689 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.694 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.695 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.695 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.695 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.696 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.696 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.697 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.694 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.697 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.698 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.699 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.697 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.699 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.701 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.702 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.700 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.704 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.704 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.705 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.704 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.706 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.708 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.707 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:48:16.708 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.708 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:48:16.708 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:48:16.709 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:16.709 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.709 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:48:16.709 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:16.709 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:48:16.710 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:48:16.710 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:16.710 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:48:16.711 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:48:16.711 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:16.711 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:48:16.711 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.711 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:48:16.711 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:48:16.712 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:16.712 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:16.712 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:48:16.713 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:48:16.713 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:48:16.714 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:48:16.714 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:48:16.714 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:48:16.714 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:48:16.714 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:48:16.715 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:48:16.715 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:48:16.716 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:48:16.716 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:48:16.716 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:48:16.717 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:48:16.717 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:48:16.717 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:48:16.718 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:48:16.718 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:48:16.718 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.720 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:48:16.720 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:48:16.720 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:48:16.720 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:48:16.722 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.722 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:48:16.723 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:48:16.724 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.724 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:48:16.725 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.726 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:48:16.726 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:48:16.727 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:48:16.727 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:48:16.727 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.728 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:48:16.729 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.729 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：15
2020-04-25 10:48:16.730 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:48:16.730 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:48:16.731 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:48:16.731 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:48:16.733 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 15(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:48:16.733 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.735 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:48:16.736 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:48:16.736 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:48:16.737 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:48:16.738 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:48:16.739 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：32
2020-04-25 10:48:16.739 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:48:16.741 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:48:16.742 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 32(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:48:16.744 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:48:29.610 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:29.612 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:29.613 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:29.614 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:29.614 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:29.615 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:29.619 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:48:29.619 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:48:29.620 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:48:29.621 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:48:29.622 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:29.622 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:48:29.624 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:48:29.624 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:48:29.624 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:48:29.625 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:48:29.625 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:48:29.626 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:48:29.626 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:48:29.627 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:48:29.628 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:48:29.629 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:48:29.630 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:48:29.630 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$80eca1c3.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 4(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:48:29.634 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:50:41.576 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:50:41.576 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:50:41.577 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:50:41.578 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:50:41.578 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:41.579 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:50:41.583 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:50:41.584 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:50:41.585 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:50:41.587 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:50:41.588 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:41.589 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:50:41.591 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:50:41.591 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:50:41.592 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:50:41.593 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:50:41.593 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:50:41.594 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-25 10:50:41.594 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}
2020-04-25 10:50:41.595 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:50:41.596 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:50:41.598 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:50:41.805 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:50:41.805 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:50:41.806 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:50:41.807 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:50:41.807 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:41.809 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:50:41.813 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:50:41.813 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:50:41.814 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:50:41.815 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:50:41.816 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:41.817 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:50:41.818 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:50:41.819 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:50:41.819 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:50:41.820 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:50:41.821 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:50:41.822 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:50:41.822 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:41.824 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:50:41.825 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-25 10:50:41.826 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:50:41.827 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:50:41.828 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:50:41.832 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:50:42.051 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:50:42.052 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:50:42.052 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:50:42.052 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:50:42.054 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:50:42.054 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:50:42.054 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:50:42.055 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:50:42.055 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:50:42.056 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:42.056 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:50:42.057 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:50:42.056 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:50:42.057 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:50:42.058 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:42.058 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:42.059 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:50:42.060 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:50:42.062 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:50:42.063 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:50:42.065 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:50:42.065 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:50:42.065 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:50:42.066 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:50:42.066 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:50:42.066 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:50:42.066 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:42.066 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:50:42.066 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:50:42.067 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:50:42.067 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:50:42.067 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:50:42.068 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:42.068 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:42.068 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:50:42.068 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:50:42.069 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:50:42.069 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:50:42.069 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:50:42.069 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:50:42.070 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:50:42.070 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:50:42.071 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:50:42.071 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:50:42.071 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:50:42.071 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:50:42.072 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:50:42.072 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:50:42.072 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:50:42.072 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:50:42.072 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:50:42.072 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:50:42.073 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:50:42.074 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:50:42.074 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:50:42.074 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:50:42.075 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-25 10:50:42.075 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:50:42.076 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:50:42.076 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:50:42.076 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:50:42.076 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:50:42.076 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:50:42.077 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:50:42.077 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:50:42.078 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:50:42.078 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:50:42.079 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:50:42.079 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:50:42.079 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:50:42.080 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:50:42.081 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:50:42.081 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:50:42.082 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:50:42.082 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-25 10:50:42.082 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:50:42.083 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:50:42.084 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:50:42.084 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:50:42.085 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:50:42.085 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 12(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:50:42.086 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:50:42.087 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:50:42.088 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:50:42.089 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:50:42.090 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:50:42.092 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:50:42.093 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:50:42.094 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:50:42.095 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:50:42.095 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:50:42.096 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:50:42.098 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:50:42.099 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:50:42.100 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:50:42.101 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:50:42.101 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：30
2020-04-25 10:50:42.102 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:50:42.103 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:50:42.105 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 30(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:50:42.107 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:51:28.241 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:51:28.243 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:51:28.244 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:51:28.245 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:51:28.245 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.246 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:51:28.249 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:51:28.250 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:51:28.251 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:51:28.253 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:51:28.253 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.255 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:51:28.256 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:51:28.257 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:51:28.258 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:51:28.258 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:51:28.259 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:51:28.259 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-25 10:51:28.259 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}
2020-04-25 10:51:28.261 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:51:28.261 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:51:28.266 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:51:28.466 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:51:28.466 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:51:28.467 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:51:28.468 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:51:28.469 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.470 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:51:28.475 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:51:28.475 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:51:28.476 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:51:28.477 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:51:28.477 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.478 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:51:28.480 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:51:28.480 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:51:28.481 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:51:28.481 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:51:28.481 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:51:28.483 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:51:28.483 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.487 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:51:28.489 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-25 10:51:28.490 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:51:28.492 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:51:28.493 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), GET(String), 9(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:51:28.498 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:51:28.707 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:51:28.708 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:51:28.709 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:51:28.710 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:51:28.711 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.712 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:51:28.756 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:51:28.756 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:51:28.756 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:51:28.756 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:51:28.756 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:51:28.757 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:51:28.757 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:51:28.757 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:51:28.758 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:51:28.758 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:51:28.759 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.759 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:51:28.759 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.760 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:51:28.760 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:51:28.759 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:51:28.761 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.764 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:51:28.765 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:51:28.765 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:51:28.766 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:51:28.766 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:51:28.767 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:51:28.767 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:51:28.768 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:51:28.768 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:51:28.768 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.768 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.769 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:51:28.769 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:51:28.770 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:51:28.770 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:51:28.766 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:51:28.771 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:51:28.771 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:51:28.771 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:51:28.773 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:51:28.772 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:51:28.773 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:51:28.773 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:51:28.773 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:51:28.773 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:51:28.774 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:51:28.774 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:51:28.774 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:51:28.774 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:51:28.775 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:51:28.775 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:51:28.777 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:51:28.778 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:51:28.778 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:51:28.783 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：13
2020-04-25 10:51:28.784 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:51:28.784 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:51:28.785 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:51:28.785 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:51:28.785 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$80eca1c3.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 13(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:51:28.785 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:51:28.786 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:51:28.787 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:51:28.789 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：19
2020-04-25 10:51:28.790 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:51:28.790 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:51:28.791 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:51:28.792 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 19(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:51:28.795 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:51:28.775 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:51:28.809 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:51:28.809 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:51:28.811 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:51:28.812 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:51:28.813 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:51:28.814 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:51:28.815 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:51:28.817 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:51:28.818 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:51:28.819 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:51:28.821 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:51:28.821 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:51:28.823 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:51:28.824 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:51:28.825 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:51:28.826 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:51:28.828 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:51:28.829 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:51:28.831 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:51:28.832 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:51:28.833 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:51:28.834 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:51:28.835 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:51:28.836 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：70
2020-04-25 10:51:28.836 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:51:28.837 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:51:28.838 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 70(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:51:28.854 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:53:32.209 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:53:32.210 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:53:32.211 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:53:32.212 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:53:32.212 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.213 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:53:32.217 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:53:32.218 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:53:32.219 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:53:32.220 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:53:32.221 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.222 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:53:32.223 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:53:32.223 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:53:32.224 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:53:32.224 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:53:32.225 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:53:32.225 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-25 10:53:32.225 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}
2020-04-25 10:53:32.226 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:53:32.227 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:53:32.231 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:53:32.439 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:53:32.440 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:53:32.442 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:53:32.443 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:53:32.443 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.444 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:53:32.444 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:53:32.445 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:53:32.447 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:53:32.449 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:53:32.449 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:53:32.449 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:53:32.450 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.451 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:53:32.451 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:53:32.452 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:53:32.452 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.454 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:53:32.455 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:53:32.455 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:53:32.455 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:53:32.456 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:53:32.456 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:53:32.456 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:53:32.456 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:53:32.457 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:53:32.457 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:53:32.458 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.458 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:53:32.458 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.459 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:53:32.459 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:53:32.460 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:53:32.460 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:53:32.461 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:53:32.461 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:53:32.461 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:53:32.461 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:53:32.461 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:53:32.462 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:53:32.462 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:53:32.464 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:53:32.465 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.468 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:53:32.468 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:53:32.469 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:53:32.471 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:53:32.472 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:53:32.474 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:53:32.476 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:53:32.476 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:53:32.477 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:53:32.480 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:53:32.480 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:53:32.481 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:53:32.482 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:53:32.483 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:53:32.485 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:53:32.486 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:53:32.486 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:53:32.487 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:53:32.489 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:53:32.489 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:53:32.490 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:53:32.490 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:53:32.491 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：31
2020-04-25 10:53:32.491 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:53:32.492 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:53:32.493 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 31(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:53:32.495 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:53:32.681 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:53:32.681 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:53:32.682 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:53:32.683 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:53:32.683 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.684 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:53:32.688 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:53:32.688 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:53:32.689 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:53:32.690 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:53:32.690 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.691 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:53:32.692 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:53:32.693 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:53:32.693 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:53:32.694 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:53:32.694 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:53:32.695 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:53:32.696 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:53:32.698 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:53:32.699 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:53:32.701 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:53:32.702 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:53:32.703 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:53:32.704 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:53:32.705 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:53:32.706 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-25 10:53:32.707 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:53:32.708 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:53:32.709 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:53:32.714 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:53:32.750 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:53:32.751 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:53:32.752 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:53:32.753 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:53:32.753 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.754 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:53:32.758 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:53:32.758 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:53:32.759 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:53:32.759 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:53:32.760 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:53:32.761 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:53:32.761 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:53:32.762 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:53:32.762 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:53:32.762 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:53:32.763 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:53:32.763 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:53:32.764 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:53:32.765 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:53:32.765 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:53:32.765 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:53:32.767 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:53:32.768 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:53:32.773 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:57:33.076 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:33.077 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:33.078 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:33.080 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:33.080 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.081 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:33.085 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:33.085 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:33.086 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:33.087 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:33.088 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.089 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:33.091 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:57:33.092 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:57:33.092 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:57:33.093 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:57:33.094 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:57:33.095 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:57:33.095 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}
2020-04-25 10:57:33.097 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:57:33.098 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:57:33.102 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:57:33.311 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:33.312 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:33.313 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:33.314 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:33.315 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.316 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:33.320 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:33.321 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:33.322 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:33.323 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:33.323 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.324 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:33.326 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:57:33.326 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:57:33.327 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:57:33.327 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:57:33.328 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:57:33.329 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:57:33.329 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.331 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:57:33.332 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-25 10:57:33.332 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:57:33.333 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:57:33.334 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:57:33.339 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:57:33.551 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:33.554 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:33.555 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:33.556 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:33.556 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:33.556 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.556 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:33.557 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:33.557 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:33.557 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:33.558 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:33.558 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:33.559 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.560 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:33.561 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:33.561 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:33.562 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.564 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:33.564 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:33.565 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:33.565 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:33.566 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:33.566 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:33.567 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:33.567 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:33.568 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.568 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:33.569 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:33.569 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.569 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:33.570 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:33.570 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:33.570 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:33.570 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:57:33.571 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:57:33.571 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:33.571 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:57:33.571 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:57:33.571 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.571 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:57:33.571 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:57:33.572 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:57:33.572 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:57:33.572 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:57:33.572 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:57:33.572 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:33.573 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:57:33.573 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:57:33.573 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:57:33.573 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:57:33.573 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:57:33.574 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:57:33.574 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:57:33.574 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:57:33.574 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:57:33.575 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:57:33.576 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:57:33.576 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:57:33.576 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:57:33.577 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:57:33.577 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:57:33.578 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:57:33.578 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:57:33.578 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:57:33.579 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:57:33.579 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:33.579 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:57:33.580 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:57:33.580 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:57:33.581 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:57:33.581 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:57:33.582 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-25 10:57:33.582 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:57:33.583 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:57:33.583 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:33.584 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:57:33.584 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:57:33.584 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$80eca1c3.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 12(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:57:33.585 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:33.587 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:33.588 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:57:33.588 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:57:33.589 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:33.591 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:33.592 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:57:33.594 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:33.595 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:33.596 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:57:33.596 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:33.597 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:33.599 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:57:33.599 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:33.601 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:33.601 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:57:33.603 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:33.603 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:57:33.604 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：31
2020-04-25 10:57:33.604 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:57:33.605 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:57:33.606 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 31(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:57:33.609 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:57:54.310 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:54.311 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:54.312 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:54.317 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:54.319 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.321 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:54.324 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:54.325 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:54.326 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:54.328 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:54.329 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.331 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:54.332 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 10:57:54.333 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:57:54.334 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:57:54.334 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 10:57:54.335 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:57:54.336 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:57:54.336 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}
2020-04-25 10:57:54.340 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:57:54.340 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:57:54.343 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:57:54.539 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:54.540 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:54.541 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:54.541 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:54.541 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:54.542 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:54.542 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.542 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:54.543 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:54.543 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:54.544 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.545 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:54.548 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:54.548 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:54.549 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:54.549 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:54.549 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:54.550 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:54.550 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:54.551 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.551 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:54.552 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:54.552 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.553 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:54.553 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:57:54.554 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:57:54.554 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:57:54.554 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:57:54.554 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 10:57:54.555 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:57:54.555 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:57:54.555 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:57:54.556 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 10:57:54.556 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:57:54.556 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:57:54.556 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.557 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:57:54.558 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:57:54.558 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:57:54.559 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:57:54.559 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.560 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:57:54.560 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 10:57:54.561 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:57:54.561 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 10:57:54.563 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:54.563 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:57:54.563 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 10:57:54.564 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:54.566 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:54.566 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 10:57:54.568 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:54.570 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:54.571 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 10:57:54.573 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:54.575 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:54.577 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 10:57:54.578 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:54.580 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:54.581 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 10:57:54.582 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:54.583 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 10:57:54.584 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 10:57:54.586 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 10:57:54.587 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 10:57:54.588 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：34
2020-04-25 10:57:54.589 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:57:54.591 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:57:54.592 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 34(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:57:54.594 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:57:54.864 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:54.863 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:54.865 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:54.865 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:54.866 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:54.867 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:54.868 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:54.867 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:54.868 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.868 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.870 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:54.870 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:54.875 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:54.875 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:57:54.876 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:54.876 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:57:54.877 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:54.877 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:57:54.879 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:54.879 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:57:54.880 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.880 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:57:54.881 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:54.881 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:57:54.882 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 10:57:54.882 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 10:57:54.883 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:57:54.883 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:57:54.884 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:57:54.884 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:57:54.884 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 10:57:54.884 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 10:57:54.885 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:57:54.885 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:57:54.886 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 10:57:54.886 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 10:57:54.887 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 10:57:54.887 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 10:57:54.889 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 10:57:54.889 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:57:54.889 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-25 10:57:54.890 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:57:54.890 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 10:57:54.891 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:57:54.891 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:57:54.892 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:57:54.893 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:57:54.893 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:57:54.894 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:57:54.895 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 10:57:54.895 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：13
2020-04-25 10:57:54.896 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 10:57:54.896 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:57:54.897 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:57:54.898 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 13(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:57:54.901 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:58:08.620 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:58:08.621 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:58:08.622 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:58:08.623 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:58:08.624 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:58:08.625 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:58:08.629 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:58:08.630 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:58:08.632 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:58:08.634 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:58:08.635 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:58:08.636 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:58:08.638 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 10:58:08.639 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:58:08.640 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:58:08.641 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 10:58:08.642 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:58:08.645 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:58:08.646 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 10:58:08.649 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 10:58:08.650 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 10:58:08.652 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:08.653 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:58:08.655 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.656 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:08.657 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:58:08.658 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.659 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:08.659 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:58:08.661 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.662 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:08.662 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:58:08.663 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.665 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:08.666 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:58:08.667 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.668 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:08.668 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:58:08.669 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.670 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:08.670 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:58:08.671 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.671 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:08.672 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:58:08.673 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.674 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:08.674 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:58:08.675 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.676 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:08.676 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:58:08.677 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.678 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:08.679 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:58:08.679 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.681 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:08.682 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:58:08.683 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 10:58:08.684 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:08.685 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:58:08.686 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.687 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:08.688 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:58:08.689 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:08.689 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 10:58:08.690 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：52
2020-04-25 10:58:08.690 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:58:08.692 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:58:08.693 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 52(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:58:08.698 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:58:14.472 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:58:14.472 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:58:14.473 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:58:14.474 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:58:14.474 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:58:14.475 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:58:14.477 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 10:58:14.478 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 10:58:14.478 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 10:58:14.480 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 10:58:14.480 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:58:14.481 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 10:58:14.483 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:58:14.483 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:58:14.484 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:58:14.484 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:58:14.484 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:58:14.485 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:58:14.485 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:58:14.486 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:58:14.487 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 10:58:14.487 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:58:14.488 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:58:14.488 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:58:14.492 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:58:22.601 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/update
2020-04-25 10:58:22.601 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-25 10:58:22.601 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:58:22.602 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.updateUser
2020-04-25 10:58:22.602 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:58:22.603 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==>  Preparing: SELECT id,ip,username,password,avatar,email,tel,birthday,age,gender,user_create_time,is_enable,is_deleted FROM sys_user WHERE id=? 
2020-04-25 10:58:22.603 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:58:22.604 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -<==      Total: 1
2020-04-25 10:58:22.605 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==>  Preparing: UPDATE sys_user SET username=?, password=?, avatar=?, email=?, tel=?, birthday=?, gender=?, user_create_time=? WHERE id=? 
2020-04-25 10:58:22.606 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==> Parameters: admin(String), $2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG(String), http://cdn.codexing.cn/avatar(String), 2933575030@qq.com(String), 18888888888(String), 1998-11-01(LocalDate), 1(Integer), 2020-04-21T17:55:53(LocalDateTime), 1(Integer)
2020-04-25 10:58:22.610 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -<==    Updates: 1
2020-04-25 10:58:22.610 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-25 10:58:22.611 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"修改成功"}
2020-04-25 10:58:22.612 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:58:22.612 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/update(String), [SysUser(id=1, ip=null, username=admin, password=$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG, avatar=http://cdn.codexing.cn/avatar, email=2933575030@qq.com, tel=18888888888, birthday=1998-11-01, age=null, gender=1, userCreateTime=2020-04-21T17:55:53, isEnable=null, isDeleted=null)](String), 1(Integer), PUT(String), 9(Long), {"code":20000,"msg":"修改成功"}(String), 127.0.0.1(String)
2020-04-25 10:58:22.615 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:58:22.852 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:58:22.852 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:58:22.852 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:58:22.852 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:58:22.853 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:58:22.853 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:58:22.854 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:58:22.854 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:58:22.855 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-25 10:58:22.855 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-11-01","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:58:22.856 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:58:22.857 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$80eca1c3.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 3(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-11-01","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:58:22.859 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:58:25.076 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 10:58:25.077 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 10:58:25.078 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:58:25.080 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 10:58:25.080 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:58:25.082 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 10:58:25.083 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 10:58:25.084 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 10:58:25.085 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 10:58:25.086 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:25.087 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:58:25.087 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.089 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:25.089 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 10:58:25.090 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.091 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:25.091 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:58:25.092 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.094 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:25.094 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 10:58:25.096 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.097 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:25.097 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:58:25.098 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.099 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:25.099 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 10:58:25.100 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.101 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:25.102 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:58:25.102 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.103 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:25.104 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 10:58:25.105 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.106 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:25.106 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:58:25.107 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.108 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:25.108 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 10:58:25.110 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.111 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:25.112 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:58:25.113 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.114 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:25.115 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 10:58:25.115 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 10:58:25.116 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 10:58:25.117 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:58:25.118 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.118 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 10:58:25.119 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 10:58:25.119 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 10:58:25.120 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 10:58:25.121 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：45
2020-04-25 10:58:25.121 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 10:58:25.124 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:58:25.124 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 45(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:58:25.131 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 10:58:28.075 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/1
2020-04-25 10:58:28.076 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 10:58:28.077 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 10:58:28.077 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 10:58:28.077 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 10:58:28.078 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 10:58:28.079 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 1(Integer)
2020-04-25 10:58:28.079 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 10:58:28.080 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 10:58:28.080 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-11-01","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}
2020-04-25 10:58:28.081 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 10:58:28.082 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/1(String), [1](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-11-01","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 10:58:28.086 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:01:34.616 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 11:01:34.617 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:01:34.617 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:01:34.617 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 11:01:34.618 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:01:34.620 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:01:34.621 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 0(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$80eca1c3.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 5(Long), {"code":20000,"data":{"avatar":"http://cdn.codexing.cn/avatar","birthday":"1998-10-31","email":"2933575030@qq.com","gender":1,"id":1,"password":"$2a$10$XIoeNDajl5MAIDDVOsOPSug5bzp9mJYgl0r5PgrexixbzFwKg9pLG","tel":"18888888888","userCreateTime":"2020-04-21 17:55:53","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:01:34.626 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:01:34.626 ERROR [http-nio-8088-exec-10]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.GeneratedMethodAccessor152.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$80eca1c3.userInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-25 11:06:43.825 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 11:06:44.375 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 4088 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-25 11:06:44.375 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-25 11:06:44.376 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-25 11:06:44.576 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-25 11:06:46.092 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-25 11:06:46.094 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-25 11:06:46.139 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 31ms. Found 0 Redis repository interfaces.
2020-04-25 11:06:46.615 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:06:46.672 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:06:46.679 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@58ba5b30' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:06:46.683 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:06:46.697 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:06:46.710 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$634ab938] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:06:47.270 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-25 11:06:47.279 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-25 11:06:47.280 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-25 11:06:47.281 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-25 11:06:47.389 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-25 11:06:47.389 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2960 ms
2020-04-25 11:06:48.477 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 11:06:48.557 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 11:06:48.826 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 11:06:49.247 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-25 11:06:49.248 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-25 11:06:49.249 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-25 11:06:50.626 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-25 11:06:50.798 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@24aedcc5, org.springframework.security.web.context.SecurityContextPersistenceFilter@1410d645, org.springframework.security.web.header.HeaderWriterFilter@4fa0ee7e, org.springframework.security.web.authentication.logout.LogoutFilter@678586f0, cn.codexing.blog.common.filter.JwtAuthenticationFilter@b30a50d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@636dbfe7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5aa6da2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@631bc9f4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@74ebd159, org.springframework.security.web.session.SessionManagementFilter@141bb6b8, org.springframework.security.web.access.ExceptionTranslationFilter@40fe8fd5, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@18b40fe6]
2020-04-25 11:06:51.441 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-25 11:06:51.463 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-25 11:06:51.497 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-25 11:06:51.673 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-25 11:06:51.705 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-25 11:06:51.714 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-25 11:06:51.719 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-25 11:06:51.731 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-25 11:06:51.743 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-25 11:06:51.750 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-25 11:06:51.790 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-25 11:06:51.812 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-25 11:06:51.814 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 7.918 seconds (JVM running for 9.221)
2020-04-25 11:06:58.859 INFO  [http-nio-8088-exec-3]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-25 11:06:58.860 INFO  [http-nio-8088-exec-3]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-25 11:06:58.872 INFO  [http-nio-8088-exec-3]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 12 ms
2020-04-25 11:06:58.904 WARN  [http-nio-8088-exec-1]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /user/myinfo/
2020-04-25 11:06:58.914 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 11:06:58.914 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:06:58.915 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:06:58.917 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:06:58.915 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:06:58.918 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:06:58.920 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:06:58.920 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 11:06:58.922 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:06:58.922 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:06:59.214 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:06:59.215 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:06:59.216 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:06:59.217 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:06:59.217 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:06:59.232 INFO  [http-nio-8088-exec-5]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-25 11:06:59.379 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 11:06:59.379 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:06:59.397 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 11:06:59.397 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:06:59.413 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 11:06:59.417 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：502
2020-04-25 11:06:59.417 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:06:59.419 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:06:59.419 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:06:59.421 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:06:59.423 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:06:59.426 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:06:59.427 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:06:59.430 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:06:59.431 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:06:59.431 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:06:59.432 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:06:59.434 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：520
2020-04-25 11:06:59.434 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:06:59.435 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:06:59.439 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:06:59.442 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:06:59.444 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:06:59.444 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 11:06:59.446 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:06:59.448 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:06:59.449 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:06:59.451 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:06:59.453 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:06:59.454 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:06:59.456 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:06:59.455 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:06:59.458 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:06:59.459 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 502(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:06:59.459 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:06:59.461 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:06:59.461 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:06:59.462 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:06:59.463 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:06:59.463 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:06:59.464 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:06:59.465 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 520(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:06:59.467 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:06:59.468 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:06:59.469 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：255
2020-04-25 11:06:59.471 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:06:59.477 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:06:59.479 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:06:59.480 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 255(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:06:59.483 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:07:03.655 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 11:07:03.656 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:07:03.657 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:07:03.657 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 11:07:03.658 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:07:03.666 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:07:03.668 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 11:07:03.671 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 11:07:03.673 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 11:07:03.676 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:03.677 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:07:03.680 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.683 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:03.685 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:07:03.688 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.690 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:03.690 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:07:03.692 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.694 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:03.694 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:07:03.696 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.698 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:03.699 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:07:03.700 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.702 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:03.703 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:07:03.704 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.706 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:03.706 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:07:03.707 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.708 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:03.709 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:07:03.710 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.711 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:03.712 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:07:03.713 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.714 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:03.715 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:07:03.717 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.719 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:03.720 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:07:03.721 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.723 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:03.723 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:07:03.724 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 11:07:03.725 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:03.726 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:07:03.727 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.728 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:03.729 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:07:03.730 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:03.731 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 11:07:03.732 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：77
2020-04-25 11:07:03.736 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:07:03.740 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:07:03.742 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 77(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:07:03.748 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:07:14.309 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:14.310 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:14.314 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:14.315 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:14.316 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:14.318 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:14.404 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:35 -用户为====>guest登录成功
2020-04-25 11:07:14.817 INFO  [http-nio-8088-exec-4]io.lettuce.core.EpollProvider.<clinit>:68 -Starting without optional epoll library
2020-04-25 11:07:14.818 INFO  [http-nio-8088-exec-4]io.lettuce.core.KqueueProvider.<clinit>:70 -Starting without optional kqueue library
2020-04-25 11:07:15.223 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:15.223 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:15.224 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:15.225 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:15.226 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:15.227 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:15.233 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:15.234 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:15.236 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:15.237 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:15.238 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:15.239 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:15.240 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 11:07:15.240 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:07:15.241 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:07:15.241 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 11:07:15.241 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:07:15.245 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 11:07:15.248 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 11:07:15.249 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:07:15.251 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:07:15.253 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:07:15.671 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:15.673 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:15.674 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:15.675 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:15.675 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:15.675 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:15.676 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:15.680 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:15.681 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:15.681 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:15.683 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:15.683 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:15.684 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:15.680 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:15.687 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:15.689 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:15.690 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:15.691 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:15.691 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:15.692 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:15.693 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:15.694 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:15.695 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:15.695 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:15.696 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:15.697 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:15.699 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:15.692 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:15.700 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:15.700 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:15.700 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:15.701 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:15.701 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:15.702 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:07:15.703 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:15.703 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:07:15.703 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:15.703 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 11:07:15.703 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:07:15.703 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:07:15.704 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:07:15.704 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:15.704 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:07:15.704 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:07:15.705 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:15.705 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:07:15.705 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:15.706 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:07:15.704 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 11:07:15.708 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:07:15.709 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:15.707 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:15.710 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:07:15.710 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:15.711 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:15.712 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.713 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:15.713 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:15.714 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:15.714 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:15.714 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:07:15.715 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:15.716 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.716 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 11:07:15.717 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:07:15.718 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:07:15.718 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:07:15.718 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：16
2020-04-25 11:07:15.718 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 11:07:15.719 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:07:15.719 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:07:15.720 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 11:07:15.719 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:15.721 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 11:07:15.721 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:07:15.722 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:15.722 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 11:07:15.722 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:07:15.723 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-25 11:07:15.723 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:15.723 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 11:07:15.723 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 16(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:07:15.722 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 11:07:15.725 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:07:15.725 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:07:15.725 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:07:15.726 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:07:15.726 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:07:15.727 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:07:15.726 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:07:15.728 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:07:15.731 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 11:07:15.732 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 11:07:15.732 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:07:15.735 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:15.736 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:07:15.739 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.738 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:07:15.741 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:07:15.742 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:15.743 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:07:15.743 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:07:15.745 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.746 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:07:15.747 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:15.748 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:07:15.748 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:07:15.749 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.749 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:07:15.750 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:15.751 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.751 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:07:15.752 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:07:15.753 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.753 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:07:15.754 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.755 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:15.755 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:07:15.757 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.758 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:07:15.758 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:07:15.758 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:15.759 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:07:15.759 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.760 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.761 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:07:15.762 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:07:15.763 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:15.764 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.764 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:07:15.765 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:07:15.765 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.766 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:07:15.767 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:15.767 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.768 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:07:15.769 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.769 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:07:15.770 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:07:15.771 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:15.771 DEBUG [http-nio-8088-exec-9]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.772 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:07:15.772 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:07:15.772 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：47
2020-04-25 11:07:15.773 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.773 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:07:15.774 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:15.775 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:07:15.775 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:07:15.777 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.777 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 47(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:07:15.779 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:15.780 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:07:15.780 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:07:15.782 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.784 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:15.784 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:07:15.786 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 11:07:15.788 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:07:15.789 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:07:15.790 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.792 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:07:15.793 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:07:15.794 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:07:15.797 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 11:07:15.798 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：95
2020-04-25 11:07:15.800 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:07:15.802 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:07:15.804 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 95(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:07:15.809 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:07:30.385 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:30.386 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:30.387 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:30.387 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:30.388 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:30.388 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:30.395 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:30.395 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:30.396 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:30.397 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:30.397 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:30.398 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:30.401 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:07:30.401 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:07:30.402 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:07:30.402 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:07:30.402 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:07:30.407 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:07:30.408 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:30.409 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:07:30.410 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-25 11:07:30.413 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:07:30.414 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:07:30.415 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 9(Long), {"code":20000,"data":{"birthday":"2020-04-24","email":"122222222223456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:07:30.419 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:07:36.439 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:36.440 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:36.441 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:36.443 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:36.443 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:36.444 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:36.449 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:36.449 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:36.450 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:36.451 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:36.451 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:36.452 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:36.461 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/update
2020-04-25 11:07:36.461 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：PUT
2020-04-25 11:07:36.461 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:07:36.462 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.updateUser
2020-04-25 11:07:36.462 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:07:36.463 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==>  Preparing: SELECT id,ip,username,password,avatar,email,tel,birthday,age,gender,user_create_time,is_enable,is_deleted FROM sys_user WHERE id=? 
2020-04-25 11:07:36.463 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:36.464 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.selectById.debug:143 -<==      Total: 1
2020-04-25 11:07:36.469 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==>  Preparing: UPDATE sys_user SET username=?, password=?, email=?, tel=?, birthday=?, gender=?, user_create_time=? WHERE id=? 
2020-04-25 11:07:36.471 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -==> Parameters: guest(String), $2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO(String), 123456@qq.com(String), 18888888888(String), 2020-04-23(LocalDate), 1(Integer), 2020-04-23T14:02:20(LocalDateTime), 2(Integer)
2020-04-25 11:07:36.474 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.updateById.debug:143 -<==    Updates: 1
2020-04-25 11:07:36.475 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-25 11:07:36.475 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"修改成功"}
2020-04-25 11:07:36.476 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:07:36.477 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/update(String), [SysUser(id=2, ip=null, username=guest, password=$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO, avatar=null, email=123456@qq.com, tel=18888888888, birthday=2020-04-23, age=null, gender=1, userCreateTime=2020-04-23T14:02:20, isEnable=null, isDeleted=null)](String), 1(Integer), PUT(String), 14(Long), {"code":20000,"msg":"修改成功"}(String), 127.0.0.1(String)
2020-04-25 11:07:36.480 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:07:36.798 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:36.798 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:36.800 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:36.801 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:36.801 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:36.802 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:36.808 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:07:36.808 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:07:36.809 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:07:36.810 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:07:36.810 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:36.811 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:07:36.812 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:07:36.812 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:07:36.812 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:07:36.813 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:07:36.813 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:07:36.814 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:07:36.814 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:07:36.815 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:07:36.816 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 11:07:36.816 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:07:36.817 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:07:36.818 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:07:36.844 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:08:45.906 WARN  [http-nio-8088-exec-4]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /user/myinfo/
2020-04-25 11:08:45.908 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:08:45.909 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:08:45.909 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:08:45.910 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:08:45.911 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:08:45.918 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:08:45.918 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:08:45.920 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:08:45.921 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:08:45.923 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:45.925 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:08:45.926 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:08:45.927 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:45.928 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:08:45.929 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：21
2020-04-25 11:08:45.929 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:08:45.931 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:08:45.932 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 21(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:08:45.935 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:08:46.148 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 11:08:46.150 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:08:46.149 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:08:46.150 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:08:46.151 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:08:46.151 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 11:08:46.151 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:08:46.151 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:08:46.151 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:08:46.152 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:08:46.153 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 11:08:46.153 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 11:08:46.155 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:08:46.156 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 11:08:46.156 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:08:46.156 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-25 11:08:46.157 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 11:08:46.157 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:08:46.158 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:08:46.159 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:08:46.160 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:08:46.160 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:08:46.161 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:08:46.162 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:08:46.164 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:08:46.164 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:08:46.165 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:08:46.168 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:08:46.170 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:08:46.171 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:08:46.172 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:08:46.174 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:08:46.175 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:08:46.177 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:08:46.179 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:08:46.179 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:08:46.180 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:08:46.181 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:08:46.182 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:08:46.183 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:08:46.184 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:08:46.185 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：35
2020-04-25 11:08:46.186 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:08:46.188 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:08:46.189 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 35(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:08:46.192 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:08:52.093 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 11:08:52.093 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:08:52.094 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:08:52.094 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 11:08:52.094 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:08:52.101 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:08:52.102 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 11:08:52.104 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 11:08:52.105 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 11:08:52.108 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:08:52.109 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:08:52.111 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.113 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:08:52.114 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:08:52.115 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.117 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:08:52.117 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:08:52.119 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.120 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:08:52.120 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:08:52.121 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.125 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:08:52.126 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:08:52.127 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.129 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:08:52.129 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:08:52.131 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.133 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:08:52.134 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:08:52.135 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.136 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:08:52.137 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:08:52.138 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.139 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:08:52.140 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:08:52.141 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.142 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:08:52.142 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:08:52.143 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.144 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:08:52.145 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:08:52.146 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.148 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:08:52.149 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:08:52.150 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 11:08:52.152 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:08:52.152 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:08:52.153 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.154 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:08:52.155 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:08:52.156 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:08:52.156 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 11:08:52.156 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：64
2020-04-25 11:08:52.157 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:08:52.160 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:08:52.161 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 64(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:08:52.173 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:07.674 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:09:07.673 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/comment/list/1251776651612700674
2020-04-25 11:09:07.674 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:09:07.676 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:09:07.676 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:07.676 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:09:07.676 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:09:07.671 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/details/1251776651612700674
2020-04-25 11:09:07.678 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:09:07.678 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:07.677 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:07.677 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:09:07.679 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:07.679 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:07.679 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:09:07.679 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.read
2020-04-25 11:09:07.679 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:07.680 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:07.680 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:09:07.681 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:09:07.679 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CommentController.listCommentByArticleId
2020-04-25 11:09:07.682 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:09:07.682 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:07.681 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:09:07.683 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:09:07.684 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:09:07.686 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:07.687 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:09:07.688 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:07.688 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:07.689 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:09:07.690 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:07.690 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:07.690 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:09:07.691 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:07.691 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:07.693 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:09:07.693 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:07.694 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:09:07.694 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:07.695 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:09:07.696 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:07.696 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-25 11:09:07.697 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:09:07.697 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:07.697 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:09:07.698 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleCommentMapper.listByArticleId.debug:143 -==>  Preparing: SELECT * FROM article_comment WHERE article_id = ? AND parent_id = -1 ORDER BY create_time DESC 
2020-04-25 11:09:07.698 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:07.699 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleCommentMapper.listByArticleId.debug:143 -==> Parameters: 1251776651612700674(String)
2020-04-25 11:09:07.699 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:07.699 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 22(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:07.700 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:07.701 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:09:07.701 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:07.702 DEBUG [http-nio-8088-exec-2]c.c.blog.mapper.ArticleCommentMapper.listByArticleId.debug:143 -<==      Total: 0
2020-04-25 11:09:07.702 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:07.702 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：29
2020-04-25 11:09:07.703 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[],"msg":"操作成功"}
2020-04-25 11:09:07.703 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:07.704 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:07.704 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:09:07.704 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /comment/list/1251776651612700674(String), [1251776651612700674](String), 1(Integer), GET(String), 29(Long), {"code":20000,"data":[],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:07.707 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:07.702 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-25 11:09:07.708 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:07.708 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:09:07.709 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：35
2020-04-25 11:09:07.710 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:09:07.708 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251776651612700674(String)
2020-04-25 11:09:07.712 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:07.713 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 35(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:07.715 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:07.716 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:07.716 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:09:07.718 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:07.720 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:07.720 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:09:07.722 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:07.723 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-25 11:09:07.725 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==>  Preparing: UPDATE article SET views = views + 1 WHERE id = ?; 
2020-04-25 11:09:07.726 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==> Parameters: 1251776651612700674(String)
2020-04-25 11:09:07.727 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -<==    Updates: 1
2020-04-25 11:09:07.731 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：60
2020-04-25 11:09:07.732 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},"msg":"操作成功"}
2020-04-25 11:09:07.733 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:07.733 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/details/1251776651612700674(String), [1251776651612700674](String), 1(Integer), GET(String), 60(Long), {"code":20000,"data":{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":52},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:07.736 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:22.882 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 11:09:22.883 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:09:22.883 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:22.883 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 11:09:22.884 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:22.886 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:09:22.888 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 11:09:22.889 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 11:09:22.889 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:09:22.890 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:22.890 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 11:09:22.890 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:09:22.890 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 11:09:22.891 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:22.891 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:09:22.891 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:22.891 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 11:09:22.891 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:09:22.891 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 11:09:22.892 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:22.892 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 11:09:22.893 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 11:09:22.893 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:22.889 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:09:22.894 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:09:22.895 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:09:22.895 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:22.894 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:09:22.896 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.896 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:09:22.897 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:22.897 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:09:22.897 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:22.898 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:09:22.898 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:09:22.898 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:09:22.898 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:09:22.898 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:09:22.899 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.900 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:22.894 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-25 11:09:22.900 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:22.900 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:09:22.900 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:22.901 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 11:09:22.901 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:09:22.901 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:09:22.901 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.902 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.903 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:22.903 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:22.903 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:22.903 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:09:22.904 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:09:22.905 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:22.903 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.905 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.905 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.907 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:22.907 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:22.907 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:22.908 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:09:22.908 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:09:22.908 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:09:22.909 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:22.909 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.909 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.909 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.910 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:22.910 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:09:22.910 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:22.910 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:09:22.911 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：22
2020-04-25 11:09:22.911 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:09:22.911 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:09:22.912 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.912 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:22.912 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.914 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 22(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:22.914 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:22.914 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:22.914 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:09:22.914 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:09:22.916 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.916 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.916 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:22.917 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:22.917 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:22.918 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:09:22.918 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:09:22.919 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.919 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.920 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:09:22.921 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：31
2020-04-25 11:09:22.922 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:09:22.922 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:22.923 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:09:22.923 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:22.924 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 31(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:22.924 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.927 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:22.927 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:22.927 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:09:22.929 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.931 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:22.932 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:09:22.933 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.935 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:22.935 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:09:22.936 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 11:09:22.938 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:22.939 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:09:22.941 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.942 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:22.942 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:09:22.944 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:22.944 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 11:09:22.945 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：63
2020-04-25 11:09:22.946 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":53},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:09:22.948 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:22.949 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 63(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":53},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:22.953 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:47.381 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:47.382 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:47.384 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:47.385 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:47.385 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:47.386 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:47.470 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:35 -用户为====>guest登录成功
2020-04-25 11:09:47.801 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:47.802 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:47.803 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:47.804 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:47.805 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:47.806 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:47.813 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:47.815 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:47.816 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:47.818 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:47.818 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:47.819 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:47.820 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 11:09:47.821 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:09:47.821 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:47.822 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 11:09:47.822 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:47.822 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-25 11:09:47.823 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 11:09:47.824 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:47.825 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:47.830 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:48.045 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:48.046 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:48.047 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:48.049 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:48.049 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:48.050 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:48.055 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:48.055 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:48.056 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:48.057 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:48.058 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:48.058 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:48.059 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 11:09:48.060 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:09:48.060 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:48.060 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 11:09:48.060 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:48.062 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:09:48.063 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 11:09:48.065 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 11:09:48.066 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 11:09:48.069 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:48.069 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:09:48.070 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.071 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:48.071 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:09:48.072 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.073 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:48.074 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:09:48.075 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.076 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:48.076 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:09:48.077 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.078 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:48.079 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:09:48.081 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.083 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:48.084 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:09:48.086 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.087 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:48.087 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:09:48.088 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.089 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:48.089 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:09:48.090 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.091 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:48.092 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:09:48.093 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.094 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:48.094 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:09:48.095 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.097 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:48.098 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:09:48.100 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.101 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:48.102 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:09:48.103 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 11:09:48.104 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:48.105 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:09:48.106 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.107 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:48.107 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:09:48.108 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.109 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 11:09:48.109 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：50
2020-04-25 11:09:48.110 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":53},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:09:48.112 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:48.113 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 50(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":53},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:48.120 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:48.214 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:48.216 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:48.217 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:48.219 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:48.219 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:48.220 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:48.221 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:48.221 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:48.221 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:48.221 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:48.222 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:48.223 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:48.224 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:48.224 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:48.224 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:48.224 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:48.225 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:48.225 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:48.225 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:48.226 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:48.227 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:48.228 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:48.229 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:48.231 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:48.231 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:48.231 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:48.231 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:48.232 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:48.232 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:09:48.232 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:09:48.233 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:48.233 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:48.233 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:48.233 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:09:48.234 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:48.234 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:48.234 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:48.234 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:48.234 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:48.234 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:09:48.235 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:48.235 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:48.235 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:09:48.236 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 11:09:48.236 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:09:48.236 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:09:48.237 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:48.237 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:09:48.237 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:09:48.237 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 11:09:48.237 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:48.237 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:09:48.237 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:48.237 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:09:48.238 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:48.238 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 11:09:48.238 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.239 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 11:09:48.239 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:09:48.239 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:09:48.240 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:09:48.240 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:09:48.241 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 11:09:48.241 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.241 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:09:48.242 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-25 11:09:48.242 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:09:48.242 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:09:48.242 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 11:09:48.242 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-25 11:09:48.243 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:09:48.243 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:48.244 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:48.244 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:48.244 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:48.244 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:09:48.245 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 10(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:48.245 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.248 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:48.248 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:48.249 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:09:48.250 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:48.250 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.251 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:48.252 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:09:48.254 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.256 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:48.256 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:09:48.258 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.261 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:48.262 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:09:48.264 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.266 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:09:48.266 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:09:48.268 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:09:48.269 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:09:48.269 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：33
2020-04-25 11:09:48.270 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:09:48.271 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:48.272 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 33(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:48.275 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:09:54.403 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:54.403 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:54.404 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:54.406 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:54.406 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:54.408 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:54.413 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:09:54.414 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:09:54.415 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:09:54.416 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:09:54.416 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:54.417 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:09:54.418 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:09:54.418 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:09:54.419 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:09:54.419 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:09:54.419 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:09:54.420 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:09:54.420 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:09:54.421 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:09:54.421 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-25 11:09:54.422 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:09:54.423 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:09:54.423 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:09:54.427 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:12:37.595 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:12:37.595 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:12:37.596 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:12:37.597 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:12:37.597 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:12:37.598 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:12:37.602 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:12:37.602 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:12:37.603 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:12:37.604 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:12:37.604 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:12:37.605 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:12:37.606 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:12:37.607 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:12:37.607 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:12:37.607 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:12:37.608 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:12:37.609 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:12:37.610 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:12:37.611 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:12:37.612 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：6
2020-04-25 11:12:37.612 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:12:37.613 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:12:37.614 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 6(Long), {"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:12:37.619 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:13:13.701 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:13:13.702 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:13:13.702 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:13:13.703 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:13:13.704 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:13:13.705 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:13:13.709 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:13:13.709 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:13:13.710 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:13:13.711 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:13:13.711 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:13:13.712 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:13:13.713 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:13:13.714 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:13:13.714 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:13:13.714 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:13:13.714 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:13:13.715 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:13:13.715 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:13:13.716 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:13:13.717 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 11:13:13.717 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:13:13.718 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:13:13.719 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:13:13.729 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:13:31.856 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:13:31.857 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:13:31.857 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:13:31.858 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:13:31.859 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:13:31.859 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:13:31.863 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:13:31.863 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:13:31.864 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:13:31.864 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:13:31.865 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:13:31.866 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:13:31.867 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:13:31.867 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:13:31.867 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:13:31.867 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:13:31.868 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:13:31.869 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:13:31.869 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:13:31.870 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:13:31.870 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：3
2020-04-25 11:13:31.871 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:13:31.871 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:13:31.872 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 3(Long), {"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:13:31.875 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:17:06.519 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:17:06.520 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:17:06.521 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:17:06.522 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:17:06.522 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:17:06.523 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:17:06.526 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:17:06.526 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:17:06.527 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:17:06.528 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:17:06.529 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:17:06.530 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:17:06.531 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:17:06.531 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:17:06.531 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:17:06.532 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:17:06.532 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:17:06.533 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,password,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:17:06.533 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:17:06.534 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:17:06.535 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：4
2020-04-25 11:17:06.535 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:17:06.536 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:17:06.536 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 4(Long), {"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"password":"$2a$10$/ehWuYoEpD9H8Rze0hKjeuudMRF8hgDPlPF40HCc3cy4Sw0kJ6DyO","tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:17:06.540 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:18:30.613 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 11:18:31.378 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 12684 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-25 11:18:31.380 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-25 11:18:31.381 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-25 11:18:31.780 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-25 11:18:33.298 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-25 11:18:33.303 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-25 11:18:33.356 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 37ms. Found 0 Redis repository interfaces.
2020-04-25 11:18:33.735 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:18:33.806 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:18:33.814 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4dba773d' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:18:33.820 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:18:33.830 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:18:33.844 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$e274a6c4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:18:34.298 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-25 11:18:34.308 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-25 11:18:34.309 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-25 11:18:34.309 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-25 11:18:34.426 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-25 11:18:34.426 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2975 ms
2020-04-25 11:18:35.242 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 11:18:35.302 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 11:18:35.496 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 11:18:35.912 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-25 11:18:35.912 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-25 11:18:35.913 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-25 11:18:37.218 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-25 11:18:37.396 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@37ffe4f3, org.springframework.security.web.context.SecurityContextPersistenceFilter@2c678c7b, org.springframework.security.web.header.HeaderWriterFilter@5df64b2a, org.springframework.security.web.authentication.logout.LogoutFilter@3193e21d, cn.codexing.blog.common.filter.JwtAuthenticationFilter@646cd766, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@bb12f41, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@30c7be6f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@165d1d54, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4fa0ee7e, org.springframework.security.web.session.SessionManagementFilter@30d15e4a, org.springframework.security.web.access.ExceptionTranslationFilter@25cde5bb, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2c9cafa5]
2020-04-25 11:18:38.056 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-25 11:18:38.070 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-25 11:18:38.098 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-25 11:18:38.270 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-25 11:18:38.303 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-25 11:18:38.310 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-25 11:18:38.316 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-25 11:18:38.329 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-25 11:18:38.340 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-25 11:18:38.346 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-25 11:18:38.387 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-25 11:18:38.408 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-25 11:18:38.411 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 7.711 seconds (JVM running for 8.97)
2020-04-25 11:18:57.385 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-25 11:18:57.385 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-25 11:18:57.398 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 13 ms
2020-04-25 11:18:57.966 INFO  [http-nio-8088-exec-1]io.lettuce.core.EpollProvider.<clinit>:68 -Starting without optional epoll library
2020-04-25 11:18:57.968 INFO  [http-nio-8088-exec-1]io.lettuce.core.KqueueProvider.<clinit>:70 -Starting without optional kqueue library
2020-04-25 11:18:58.353 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-25 11:18:58.487 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:18:58.500 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:18:58.513 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:18:58.515 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:18:58.515 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:58.516 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:18:58.529 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:18:58.529 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:18:58.530 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:18:58.532 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:18:58.532 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:58.533 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:18:58.549 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 11:18:58.549 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:18:58.550 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:18:58.552 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 11:18:58.553 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:18:58.556 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-25 11:18:58.569 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 11:18:58.589 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:18:58.590 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:18:58.594 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:18:58.812 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:18:58.813 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:18:58.815 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:18:58.816 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:18:58.817 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:18:58.818 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:18:58.819 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:18:58.819 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:58.820 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:18:58.821 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:18:58.822 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:58.824 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:18:58.829 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:18:58.830 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:18:58.831 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:18:58.831 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:18:58.832 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:18:58.833 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:18:58.834 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:58.835 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:18:58.835 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:18:58.837 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:18:58.838 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:58.839 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:18:58.849 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:18:58.850 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:18:58.851 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:18:58.853 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:18:58.854 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:18:58.867 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:18:58.869 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:58.872 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:18:58.873 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：24
2020-04-25 11:18:58.897 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:18:58.898 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:18:58.899 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:18:58.899 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:18:58.900 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:18:58.901 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 24(Long), {"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:18:58.901 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:18:58.902 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:18:58.905 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:18:58.966 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:18:58.968 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:18:58.973 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:18:58.974 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:18:58.979 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:18:58.980 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:18:58.981 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:18:58.983 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:18:58.984 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:18:58.985 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:18:58.987 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:18:58.987 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:18:58.988 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:18:58.990 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:18:58.991 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:18:58.993 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:18:58.995 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:18:58.997 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:18:58.999 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:18:59.001 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:18:59.002 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:18:59.003 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:18:59.004 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:18:59.005 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：107
2020-04-25 11:18:59.013 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:18:59.015 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:18:59.016 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 107(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:18:59.020 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:18:59.065 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:18:59.065 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:18:59.067 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:18:59.068 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:18:59.069 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:59.070 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:18:59.080 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:18:59.080 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:18:59.083 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:18:59.084 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:18:59.085 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:59.086 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:18:59.088 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:18:59.089 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:18:59.089 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:18:59.089 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:18:59.090 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:18:59.099 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:18:59.100 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:18:59.102 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:18:59.103 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:18:59.104 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:18:59.105 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:18:59.106 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:18:59.107 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:18:59.107 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:18:59.108 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：20
2020-04-25 11:18:59.120 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:18:59.121 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:18:59.122 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:18:59.122 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:18:59.123 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:18:59.124 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:59.123 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:18:59.124 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:18:59.125 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 20(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:18:59.131 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:18:59.130 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:18:59.131 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:18:59.132 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:18:59.133 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:18:59.134 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:18:59.135 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:18:59.136 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 11:18:59.137 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:18:59.137 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:18:59.138 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 11:18:59.139 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:18:59.146 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 11:18:59.147 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 11:18:59.150 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 11:18:59.150 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-25 11:18:59.152 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 11:18:59.153 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:18:59.155 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:18:59.157 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:20:24.097 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 11:20:24.098 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:20:24.100 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:20:24.102 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 11:20:24.102 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:20:24.115 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, message, method, ip ) VALUES ( ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:20:24.116 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 0(Integer), java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$998cecbc.userInfo(<generated>)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
(String), GET(String), 127.0.0.1(String)
2020-04-25 11:20:24.119 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:20:24.129 ERROR [http-nio-8088-exec-6]o.a.c.c.C.[Tomcat].[localhost].[/].[dispatcherServlet].log:175 -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser] with root cause
java.lang.ClassCastException: java.lang.String cannot be cast to cn.codexing.blog.security.JwtUser
	at cn.codexing.blog.controller.UserController.userInfo(UserController.java:91)
	at cn.codexing.blog.controller.UserController$$FastClassBySpringCGLIB$$4852f1a1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:769)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at cn.codexing.blog.common.aspect.RequestLogAspect.doAround(RequestLogAspect.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at cn.codexing.blog.controller.UserController$$EnhancerBySpringCGLIB$$998cecbc.userInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at cn.codexing.blog.common.filter.ImageCodeFilter.doFilterInternal(ImageCodeFilter.java:64)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at cn.codexing.blog.common.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:46)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1639)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-04-25 11:30:48.770 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 11:30:49.460 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 7436 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-25 11:30:49.462 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-25 11:30:49.462 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-25 11:30:49.768 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-25 11:30:50.817 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-25 11:30:50.819 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-25 11:30:50.866 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 34ms. Found 0 Redis repository interfaces.
2020-04-25 11:30:51.355 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:30:51.436 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:30:51.445 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@77bb48d5' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:30:51.447 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:30:51.464 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:30:51.485 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$ae5a15b8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 11:30:52.005 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-25 11:30:52.015 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-25 11:30:52.016 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-25 11:30:52.017 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-25 11:30:52.121 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-25 11:30:52.121 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2550 ms
2020-04-25 11:30:52.866 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 11:30:52.917 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 11:30:53.105 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 11:30:53.507 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-25 11:30:53.508 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-25 11:30:53.508 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-25 11:30:54.996 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-25 11:30:55.165 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@35010a6b, org.springframework.security.web.context.SecurityContextPersistenceFilter@48632f69, org.springframework.security.web.header.HeaderWriterFilter@1e471884, org.springframework.security.web.authentication.logout.LogoutFilter@443af394, cn.codexing.blog.common.filter.JwtAuthenticationFilter@76c86567, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@12448de1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5350ab17, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3b362f1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4d4b019e, org.springframework.security.web.session.SessionManagementFilter@543b0737, org.springframework.security.web.access.ExceptionTranslationFilter@f4f843f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@399af6dc]
2020-04-25 11:30:55.803 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-25 11:30:55.818 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-25 11:30:55.851 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-25 11:30:56.051 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-25 11:30:56.094 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-25 11:30:56.100 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-25 11:30:56.107 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-25 11:30:56.122 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-25 11:30:56.134 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-25 11:30:56.141 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-25 11:30:56.186 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-25 11:30:56.208 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-25 11:30:56.211 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 7.37 seconds (JVM running for 8.601)
2020-04-25 11:31:23.261 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-25 11:31:23.261 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-25 11:31:23.274 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 12 ms
2020-04-25 11:31:23.444 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-25 11:31:23.822 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:31:23.838 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 11:31:23.850 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:31:23.852 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:31:23.853 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:31:23.854 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 11:31:23.942 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:26 -用户admin登录失败
2020-04-25 11:38:56.390 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:38:56.391 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 11:38:56.394 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:38:56.395 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:38:56.395 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:38:56.397 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 11:38:56.484 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:26 -用户admin登录失败
2020-04-25 11:40:59.672 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:40:59.673 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 11:40:59.675 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:40:59.677 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:40:59.677 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:40:59.679 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 11:40:59.763 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:26 -用户admin登录失败
2020-04-25 11:41:07.240 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:41:07.243 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 11:41:07.249 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:41:07.253 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:41:07.255 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:41:07.258 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 11:41:07.366 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:26 -用户admin登录失败
2020-04-25 11:42:10.134 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:10.135 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:10.136 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:10.138 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:10.138 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:10.139 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:10.226 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:35 -用户为====>guest登录成功
2020-04-25 11:42:10.709 INFO  [http-nio-8088-exec-5]io.lettuce.core.EpollProvider.<clinit>:68 -Starting without optional epoll library
2020-04-25 11:42:10.712 INFO  [http-nio-8088-exec-5]io.lettuce.core.KqueueProvider.<clinit>:70 -Starting without optional kqueue library
2020-04-25 11:42:11.170 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:11.171 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:11.172 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:11.174 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:11.174 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.176 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:11.192 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:11.193 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:11.194 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:11.196 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:11.196 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.197 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:11.218 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 11:42:11.218 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:42:11.219 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:11.221 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 11:42:11.222 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:11.227 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-25 11:42:11.240 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 11:42:11.267 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:11.268 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 9(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:11.276 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:42:11.873 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:11.878 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:11.880 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:11.888 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:11.889 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.893 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:11.897 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:11.900 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:11.900 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:11.901 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:11.902 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:11.903 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:11.904 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:11.905 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:11.906 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:11.906 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:11.907 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:11.908 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:11.909 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.910 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.911 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:11.911 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:11.911 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:11.911 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:11.912 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.918 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:11.921 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:11.924 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:11.925 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:11.927 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:11.927 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:11.923 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:11.927 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.927 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:11.928 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:11.928 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:11.929 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:11.929 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.930 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:11.930 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:11.930 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.932 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:11.935 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:42:11.935 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:42:11.936 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:11.936 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:42:11.936 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:11.942 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:42:11.943 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:42:11.943 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:11.943 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:11.945 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:11.945 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:42:11.946 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:11.946 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:11.947 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:11.948 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.950 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:11.951 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 11:42:11.952 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:42:11.952 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:11.953 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 11:42:11.953 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:11.954 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:42:11.954 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:11.955 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:42:11.956 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:42:11.960 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:42:11.961 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:42:11.962 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：20
2020-04-25 11:42:11.962 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:42:11.965 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:42:11.964 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 11:42:11.966 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 11:42:11.967 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:42:11.968 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:42:11.968 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 11:42:11.969 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：18
2020-04-25 11:42:11.970 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:42:11.971 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:42:11.972 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：37
2020-04-25 11:42:11.974 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 11:42:11.976 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:11.978 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 18(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:11.981 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:42:11.986 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:42:11.989 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:11.989 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:42:11.991 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:11.993 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 37(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:11.991 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 20(Long), {"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:11.998 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:42:12.000 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:42:12.009 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:42:12.009 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:42:12.010 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:12.011 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:42:12.012 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:12.100 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:42:12.101 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:42:12.111 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:42:12.112 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:42:12.115 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:12.116 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:42:12.117 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:12.130 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:12.132 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:42:12.133 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:12.136 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:12.137 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:42:12.138 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:12.140 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:12.141 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:42:12.142 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:12.144 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:12.145 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:42:12.146 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:12.148 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:12.149 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:42:12.150 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:12.151 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:42:12.152 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：143
2020-04-25 11:42:12.160 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:42:12.162 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:12.163 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 143(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:12.166 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:42:42.344 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:42.345 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:42.347 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:42.348 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:42.348 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:42.349 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:42.355 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:42.356 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:42.357 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:42.358 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:42.359 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:42.360 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:42.362 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:42:42.362 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:42:42.363 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:42.364 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:42:42.364 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:42.365 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:42:42.366 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:42.368 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:42:42.369 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-25 11:42:42.370 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:42:42.374 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:42.375 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:42.379 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:42:44.993 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:44.994 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:44.995 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:44.996 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:44.996 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:44.997 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:45.004 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:45.004 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:45.005 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:45.006 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:45.006 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:45.007 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:45.008 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 11:42:45.009 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:42:45.009 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:45.010 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 11:42:45.010 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:45.010 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-25 11:42:45.011 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}
2020-04-25 11:42:45.013 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:45.014 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[],"credentialsNonExpired":true,"enabled":true,"id":2,"password":"[HIDE]","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:45.023 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:42:45.356 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:45.357 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:45.358 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:45.359 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:45.360 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:45.361 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:45.368 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:45.368 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:45.370 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:45.371 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:45.372 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:45.373 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:45.375 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/myinfo/2
2020-04-25 11:42:45.376 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:42:45.376 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:45.377 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.getMyInfo
2020-04-25 11:42:45.377 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:45.379 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==>  Preparing: select id,username,avatar,email,tel,birthday,gender,user_create_time from sys_user where id=? 
2020-04-25 11:42:45.380 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:45.381 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getUserInfo.debug:143 -<==      Total: 1
2020-04-25 11:42:45.382 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-25 11:42:45.383 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}
2020-04-25 11:42:45.385 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:45.387 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/myinfo/2(String), [2](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":{"birthday":"2020-04-23","email":"123456@qq.com","gender":1,"id":2,"tel":"18888888888","userCreateTime":"2020-04-23 14:02:20","username":"guest"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:45.391 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:42:45.664 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:45.665 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:45.666 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:45.666 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:45.667 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:45.666 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:45.668 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:45.669 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:45.669 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:45.670 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:45.671 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:45.672 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:45.674 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:45.675 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:45.675 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:45.676 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:45.677 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:45.677 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:45.678 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:45.678 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:45.678 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:45.679 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:45.679 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:45.679 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:45.680 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:45.680 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:45.680 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:45.682 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:42:45.682 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:45.682 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:42:45.682 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:45.683 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:45.683 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:42:45.684 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:45.684 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:45.685 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:42:45.685 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:42:45.686 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:42:45.686 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:42:45.686 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:45.687 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:42:45.687 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 11:42:45.687 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:45.687 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: guest(String)
2020-04-25 11:42:45.688 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 11:42:45.688 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:42:45.689 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:42:45.689 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 11:42:45.689 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:42:45.690 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 2(Integer)
2020-04-25 11:42:45.690 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:42:45.690 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 0
2020-04-25 11:42:45.691 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:42:45.691 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:42:45.691 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 11:42:45.692 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:42:45.692 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:42:45.692 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:42:45.692 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:42:45.692 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:42:45.693 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 11:42:45.693 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:42:45.694 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:45.694 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:42:45.694 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 11:42:45.695 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 11:42:45.696 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:42:45.696 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:45.696 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:42:45.697 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：15
2020-04-25 11:42:45.697 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:45.698 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:42:45.698 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 11:42:45.699 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:42:45.699 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-25 11:42:45.699 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 11:42:45.700 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:45.700 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:45.701 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:45.701 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 15(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:45.701 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:45.702 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:45.702 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:42:45.704 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:42:45.704 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:45.705 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:42:45.706 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:45.706 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:42:45.708 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:45.711 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:45.712 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:42:45.713 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:45.716 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:42:45.716 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:42:45.718 DEBUG [http-nio-8088-exec-5]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:42:45.718 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:42:45.719 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：34
2020-04-25 11:42:45.720 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:42:45.722 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:42:45.723 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 34(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:42:45.726 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:43:51.727 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 11:43:51.729 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:43:51.730 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:43:51.730 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 11:43:51.731 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:43:51.741 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:43:51.743 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 11:43:51.745 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 11:43:51.747 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 11:43:51.749 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:43:51.750 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:43:51.752 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.754 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:43:51.755 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:43:51.756 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.758 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:43:51.758 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:43:51.759 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.760 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:43:51.761 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:43:51.763 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.765 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:43:51.765 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:43:51.766 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.768 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:43:51.768 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:43:51.770 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.771 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:43:51.771 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:43:51.772 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.773 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:43:51.774 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:43:51.774 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.776 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:43:51.776 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:43:51.778 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.779 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:43:51.780 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:43:51.782 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.784 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:43:51.784 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:43:51.786 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.787 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:43:51.787 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:43:51.788 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 11:43:51.790 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:43:51.790 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:43:51.792 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.793 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:43:51.793 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:43:51.795 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:43:51.796 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 11:43:51.797 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：70
2020-04-25 11:43:51.800 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":53},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:43:51.802 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:43:51.804 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 70(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":53},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:43:51.809 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:46:52.275 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/details/1251780392676016129
2020-04-25 11:46:52.276 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:46:52.276 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:46:52.277 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.read
2020-04-25 11:46:52.277 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:46:52.281 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:46:52.282 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:46:52.282 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:46:52.282 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:46:52.282 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:46:52.283 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:46:52.283 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:46:52.283 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:46:52.283 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:46:52.283 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:46:52.285 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:46:52.285 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/comment/list/1251780392676016129
2020-04-25 11:46:52.285 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:46:52.286 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:46:52.286 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:46:52.286 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:46:52.287 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:46:52.286 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:46:52.289 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CommentController.listCommentByArticleId
2020-04-25 11:46:52.289 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:46:52.289 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:46:52.290 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:46:52.290 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:46:52.291 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:46:52.291 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:46:52.292 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:46:52.293 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:46:52.293 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:46:52.293 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:46:52.294 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:46:52.294 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-25 11:46:52.294 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:46:52.295 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-25 11:46:52.295 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-25 11:46:52.295 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:46:52.296 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:46:52.297 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:46:52.297 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:46:52.298 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:46:52.298 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:46:52.299 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:46:52.299 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:46:52.300 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:46:52.300 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:46:52.301 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:46:52.302 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:46:52.302 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:46:52.302 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:46:52.302 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:46:52.305 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:46:52.306 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:46:52.306 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:46:52.308 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-25 11:46:52.309 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:46:52.310 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==>  Preparing: UPDATE article SET views = views + 1 WHERE id = ?; 
2020-04-25 11:46:52.311 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-25 11:46:52.311 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:46:52.312 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:46:52.313 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -<==    Updates: 1
2020-04-25 11:46:52.313 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:46:52.315 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:46:52.316 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:46:52.317 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:46:52.317 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：42
2020-04-25 11:46:52.318 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:46:52.318 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleCommentMapper.listByArticleId.debug:143 -==>  Preparing: SELECT * FROM article_comment WHERE article_id = ? AND parent_id = -1 ORDER BY create_time DESC 
2020-04-25 11:46:52.318 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：36
2020-04-25 11:46:52.319 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:46:52.318 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleCommentMapper.listByArticleId.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-25 11:46:52.320 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},"msg":"操作成功"}
2020-04-25 11:46:52.320 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:46:52.323 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleCommentMapper.listByArticleId.debug:143 -<==      Total: 1
2020-04-25 11:46:52.323 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 36(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:46:52.325 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:46:52.327 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:46:52.326 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/details/1251780392676016129(String), [1251780392676016129](String), 1(Integer), GET(String), 42(Long), {"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":55},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:46:52.332 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:46:52.340 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleCommentMapper.listById.debug:143 -==>  Preparing: SELECT * FROM article_comment WHERE parent_id = ? order by create_time desc 
2020-04-25 11:46:52.340 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleCommentMapper.listById.debug:143 -==> Parameters: 18(Integer)
2020-04-25 11:46:52.342 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleCommentMapper.listById.debug:143 -<==      Total: 0
2020-04-25 11:46:52.343 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：59
2020-04-25 11:46:52.346 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articleId":"1251780392676016129","createTime":"2020-04-24 10:50:30","id":18,"message":"不错不错，✌爱了","parentId":-1,"reply":[],"user":"admin"}],"msg":"操作成功"}
2020-04-25 11:46:52.348 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:46:52.349 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /comment/list/1251780392676016129(String), [1251780392676016129](String), 1(Integer), GET(String), 59(Long), {"code":20000,"data":[{"articleId":"1251780392676016129","createTime":"2020-04-24 10:50:30","id":18,"message":"不错不错，✌爱了","parentId":-1,"reply":[],"user":"admin"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:46:52.352 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:47:03.489 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 11:47:03.490 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:47:03.491 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:47:03.491 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 11:47:03.491 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:47:03.494 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 11:47:03.494 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 11:47:03.494 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:47:03.494 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 11:47:03.494 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:47:03.495 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:47:03.495 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 11:47:03.495 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:47:03.495 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 11:47:03.495 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:47:03.494 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 11:47:03.496 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 11:47:03.496 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 11:47:03.496 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 11:47:03.496 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:47:03.497 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 11:47:03.497 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 11:47:03.497 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 11:47:03.497 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 11:47:03.499 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:47:03.499 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 11:47:03.499 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:47:03.500 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 11:47:03.500 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 11:47:03.501 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 11:47:03.501 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.502 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:47:03.501 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 11:47:03.503 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:47:03.503 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 11:47:03.504 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 11:47:03.502 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 11:47:03.505 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.504 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-25 11:47:03.505 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 11:47:03.506 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 11:47:03.506 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 11:47:03.506 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-25 11:47:03.506 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:47:03.507 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 11:47:03.507 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 11:47:03.508 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.508 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:47:03.509 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 12(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:47:03.510 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:47:03.510 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 11:47:03.512 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.512 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:47:03.512 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:47:03.513 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 10(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:47:03.513 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:47:03.514 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 11:47:03.514 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:47:03.515 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.516 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:47:03.517 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:47:03.518 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 11:47:03.513 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:47:03.521 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.521 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.522 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:47:03.523 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:47:03.523 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 11:47:03.523 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 11:47:03.524 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.525 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.526 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 11:47:03.527 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:47:03.527 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 11:47:03.528 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:47:03.529 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.529 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.529 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 11:47:03.530 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：36
2020-04-25 11:47:03.531 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:47:03.530 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:47:03.531 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 11:47:03.532 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:47:03.532 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.532 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 36(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:47:03.534 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:47:03.536 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:47:03.536 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 11:47:03.537 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.539 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:47:03.539 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 11:47:03.541 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.543 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:47:03.545 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:47:03.546 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.547 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:47:03.547 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 11:47:03.548 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.552 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:47:03.553 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:47:03.554 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.555 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:47:03.556 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 11:47:03.557 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.558 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:47:03.559 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:47:03.561 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.563 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:47:03.564 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 11:47:03.565 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 11:47:03.566 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 11:47:03.567 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:47:03.569 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.570 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 11:47:03.571 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 11:47:03.572 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 11:47:03.573 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 11:47:03.574 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：85
2020-04-25 11:47:03.575 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":56},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":53},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 11:47:03.578 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 11:47:03.579 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 85(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":56},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":53},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 11:47:03.583 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 13:10:22.127 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.128 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.130 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.131 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.131 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.133 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.217 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:35 -用户为====>admin登录成功
2020-04-25 13:10:22.377 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.378 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.379 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.379 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.380 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.380 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.386 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.387 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.388 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.389 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.389 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.390 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.391 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-04-25 13:10:22.391 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 13:10:22.392 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 13:10:22.392 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-04-25 13:10:22.392 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 13:10:22.393 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：2
2020-04-25 13:10:22.395 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}
2020-04-25 13:10:22.396 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 13:10:22.397 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /user/info(String), [](String), 1(Integer), GET(String), 2(Long), {"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 13:10:22.403 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 13:10:22.543 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.543 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.544 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.545 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.545 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.547 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.551 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.552 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.553 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.555 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.555 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.556 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.558 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-25 13:10:22.558 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 13:10:22.558 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 13:10:22.558 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-25 13:10:22.559 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 13:10:22.563 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 13:10:22.563 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-25 13:10:22.565 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-25 13:10:22.566 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-25 13:10:22.568 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 13:10:22.569 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 13:10:22.572 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.573 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 13:10:22.573 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-25 13:10:22.575 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.577 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 13:10:22.578 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 13:10:22.579 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.580 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 13:10:22.581 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 13:10:22.582 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.584 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 13:10:22.585 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 13:10:22.587 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.588 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 13:10:22.589 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-25 13:10:22.590 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.591 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 13:10:22.592 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 13:10:22.593 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.594 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 13:10:22.594 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-25 13:10:22.595 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.596 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 13:10:22.596 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 13:10:22.597 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.598 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 13:10:22.599 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-25 13:10:22.600 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.601 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 13:10:22.602 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 13:10:22.604 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.605 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 13:10:22.605 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-25 13:10:22.606 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-25 13:10:22.607 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 13:10:22.607 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 13:10:22.608 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.609 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 13:10:22.609 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-25 13:10:22.610 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.611 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 7
2020-04-25 13:10:22.611 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：54
2020-04-25 13:10:22.612 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":56},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":53},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-25 13:10:22.614 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 13:10:22.616 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 54(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1167},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":56},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":53},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":12},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":5},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":1,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":4}],"pageSize":10,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 13:10:22.633 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 13:10:22.805 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.805 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.807 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.808 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.808 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.809 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.810 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.811 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.812 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.813 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.814 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.815 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.815 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.815 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.816 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.816 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.818 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.819 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.819 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.822 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.822 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.823 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.823 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.824 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.825 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.825 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.826 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-25 13:10:22.826 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.826 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 13:10:22.827 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.827 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 13:10:22.827 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.827 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-25 13:10:22.828 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 13:10:22.828 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.829 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-25 13:10:22.829 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list/enable
2020-04-25 13:10:22.829 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-25 13:10:22.830 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-25 13:10:22.830 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 13:10:22.831 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listEnableLink
2020-04-25 13:10:22.833 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-25 13:10:22.832 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 13:10:22.834 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 13:10:22.835 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==>  Preparing: select * from friend_link where is_enable=1 
2020-04-25 13:10:22.836 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -==> Parameters: 
2020-04-25 13:10:22.836 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.837 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.listEnableLink.debug:143 -<==      Total: 3
2020-04-25 13:10:22.838 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-25 13:10:22.838 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-25 13:10:22.839 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-25 13:10:22.839 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-25 13:10:22.840 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 13:10:22.840 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.840 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,avatar,password from sys_user where username=? 
2020-04-25 13:10:22.841 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-25 13:10:22.841 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-25 13:10:22.841 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list/enable(String), [](String), 1(Integer), GET(String), 9(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 13:10:22.841 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：15
2020-04-25 13:10:22.842 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-25 13:10:22.842 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-25 13:10:22.843 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-25 13:10:22.843 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 13:10:22.843 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.843 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 13:10:22.843 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 15(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 13:10:22.844 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-25 13:10:22.846 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-25 13:10:22.846 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 13:10:22.847 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-25 13:10:22.847 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-25 13:10:22.847 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-25 13:10:22.848 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36
2020-04-25 13:10:22.852 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-25 13:10:22.853 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-25 13:10:22.855 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-25 13:10:22.855 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-25 13:10:22.857 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 13:10:22.858 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-25 13:10:22.859 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.861 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 13:10:22.862 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-25 13:10:22.863 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.865 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 13:10:22.866 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-25 13:10:22.868 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.870 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 13:10:22.870 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-25 13:10:22.872 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.873 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 13:10:22.874 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-25 13:10:22.875 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.876 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-25 13:10:22.876 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-25 13:10:22.877 DEBUG [http-nio-8088-exec-8]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-25 13:10:22.877 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 6
2020-04-25 13:10:22.878 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：32
2020-04-25 13:10:22.878 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-04-25 13:10:22.879 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-25 13:10:22.879 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 32(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-25 13:10:22.882 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-25 16:09:29.811 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 16:09:29.932 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.buildDefaultMergedContextConfiguration:308 -Neither @ContextConfiguration nor @ContextHierarchy found for test class [cn.codexing.blog.BlogApplicationTests], using SpringBootContextLoader
2020-04-25 16:09:29.942 INFO  [main]o.s.test.context.support.AbstractContextLoader.generateDefaultLocations:264 -Could not detect default resource locations for test class [cn.codexing.blog.BlogApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2020-04-25 16:09:29.945 INFO  [main]o.s.t.context.support.AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses:83 -Could not detect default configuration classes for test class [cn.codexing.blog.BlogApplicationTests]: BlogApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2020-04-25 16:09:30.237 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getOrFindConfigurationClasses:235 -Found @SpringBootConfiguration cn.codexing.blog.BlogApplication for test class cn.codexing.blog.BlogApplicationTests
2020-04-25 16:09:30.475 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getDefaultTestExecutionListenerClassNames:248 -Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2020-04-25 16:09:30.502 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getTestExecutionListeners:177 -Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@51c693d, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@6a57ae10, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@766653e6, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@4e07b95f, org.springframework.test.context.support.DirtiesContextTestExecutionListener@28b46423, org.springframework.test.context.transaction.TransactionalTestExecutionListener@7fc4780b, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@3b79fd76, org.springframework.test.context.event.EventPublishingTestExecutionListener@48c76607, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@43599640, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@1f81aa00, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@6b6776cb, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@1863d2fe, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@1787bc24]
2020-04-25 16:09:31.652 INFO  [main]cn.codexing.blog.BlogApplicationTests.logStarting:55 -Starting BlogApplicationTests on DESKTOP-0EBHI2S with PID 8856 (started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-25 16:09:31.653 DEBUG [main]cn.codexing.blog.BlogApplicationTests.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-25 16:09:31.654 INFO  [main]cn.codexing.blog.BlogApplicationTests.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-25 16:09:32.401 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-25 16:09:35.244 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-25 16:09:35.251 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-25 16:09:35.451 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 141ms. Found 0 Redis repository interfaces.
2020-04-25 16:09:38.126 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 16:09:38.469 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 16:09:38.496 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@67fa5045' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 16:09:38.542 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 16:09:38.608 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 16:09:38.719 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$47eb00f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 16:09:42.508 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 16:09:42.647 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 16:09:43.409 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 16:09:50.843 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-25 16:09:52.921 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@74f649a7, org.springframework.security.web.context.SecurityContextPersistenceFilter@7ef60c02, org.springframework.security.web.header.HeaderWriterFilter@448892f1, org.springframework.security.web.authentication.logout.LogoutFilter@23c72128, cn.codexing.blog.common.filter.JwtAuthenticationFilter@308c65e0, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7323dce7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6d0a14c2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@26d7cb0d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@50fa5938, org.springframework.security.web.session.SessionManagementFilter@29532e91, org.springframework.security.web.access.ExceptionTranslationFilter@1dd443c1, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@41d877bb]
2020-04-25 16:09:56.584 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-25 16:09:56.691 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-25 16:09:56.793 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-25 16:09:57.314 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-25 16:09:57.407 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-25 16:09:57.424 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-25 16:09:57.439 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-25 16:09:57.481 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-25 16:09:57.506 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-25 16:09:57.517 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-25 16:09:57.619 INFO  [main]cn.codexing.blog.BlogApplicationTests.logStarted:61 -Started BlogApplicationTests in 27.052 seconds (JVM running for 29.664)
2020-04-25 16:09:58.340 INFO  [SpringContextShutdownHook]o.s.jmx.export.annotation.AnnotationMBeanExporter.doUnregister:211 -Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2020-04-25 16:09:58.375 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:1965 -{dataSource-0} closing ...
2020-04-25 22:02:43.450 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 22:02:43.541 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.buildDefaultMergedContextConfiguration:308 -Neither @ContextConfiguration nor @ContextHierarchy found for test class [cn.codexing.blog.BlogApplicationTests], using SpringBootContextLoader
2020-04-25 22:02:43.548 INFO  [main]o.s.test.context.support.AbstractContextLoader.generateDefaultLocations:264 -Could not detect default resource locations for test class [cn.codexing.blog.BlogApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2020-04-25 22:02:43.550 INFO  [main]o.s.t.context.support.AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses:83 -Could not detect default configuration classes for test class [cn.codexing.blog.BlogApplicationTests]: BlogApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2020-04-25 22:02:43.743 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getOrFindConfigurationClasses:235 -Found @SpringBootConfiguration cn.codexing.blog.BlogApplication for test class cn.codexing.blog.BlogApplicationTests
2020-04-25 22:02:43.900 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getDefaultTestExecutionListenerClassNames:248 -Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2020-04-25 22:02:43.923 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getTestExecutionListeners:177 -Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@51c693d, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@6a57ae10, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@766653e6, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@4e07b95f, org.springframework.test.context.support.DirtiesContextTestExecutionListener@28b46423, org.springframework.test.context.transaction.TransactionalTestExecutionListener@7fc4780b, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@3b79fd76, org.springframework.test.context.event.EventPublishingTestExecutionListener@48c76607, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@43599640, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@1f81aa00, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@6b6776cb, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@1863d2fe, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@1787bc24]
2020-04-25 22:03:15.285 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 22:03:15.356 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.buildDefaultMergedContextConfiguration:308 -Neither @ContextConfiguration nor @ContextHierarchy found for test class [cn.codexing.blog.BlogApplicationTests], using SpringBootContextLoader
2020-04-25 22:03:15.361 INFO  [main]o.s.test.context.support.AbstractContextLoader.generateDefaultLocations:264 -Could not detect default resource locations for test class [cn.codexing.blog.BlogApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2020-04-25 22:03:15.363 INFO  [main]o.s.t.context.support.AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses:83 -Could not detect default configuration classes for test class [cn.codexing.blog.BlogApplicationTests]: BlogApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2020-04-25 22:03:15.512 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getOrFindConfigurationClasses:235 -Found @SpringBootConfiguration cn.codexing.blog.BlogApplication for test class cn.codexing.blog.BlogApplicationTests
2020-04-25 22:03:15.674 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getDefaultTestExecutionListenerClassNames:248 -Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2020-04-25 22:03:15.724 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getTestExecutionListeners:177 -Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@51c693d, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@6a57ae10, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@766653e6, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@4e07b95f, org.springframework.test.context.support.DirtiesContextTestExecutionListener@28b46423, org.springframework.test.context.transaction.TransactionalTestExecutionListener@7fc4780b, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@3b79fd76, org.springframework.test.context.event.EventPublishingTestExecutionListener@48c76607, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@43599640, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@1f81aa00, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@6b6776cb, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@1863d2fe, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@1787bc24]
2020-04-25 22:03:16.383 INFO  [main]cn.codexing.blog.BlogApplicationTests.logStarting:55 -Starting BlogApplicationTests on DESKTOP-0EBHI2S with PID 13840 (started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-25 22:03:16.385 DEBUG [main]cn.codexing.blog.BlogApplicationTests.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-25 22:03:16.433 INFO  [main]cn.codexing.blog.BlogApplicationTests.logStartupProfileInfo:655 -The following profiles are active: prod
2020-04-25 22:03:16.929 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-25 22:03:18.644 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-25 22:03:18.651 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-25 22:03:18.764 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 82ms. Found 0 Redis repository interfaces.
2020-04-25 22:03:19.828 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:03:20.007 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:03:20.018 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@13bdf540' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:03:20.045 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:03:20.092 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:03:20.126 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$7b6d8704] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:03:21.767 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 22:03:21.906 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 22:03:22.311 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 22:03:25.240 WARN  [main]o.s.web.context.support.GenericWebApplicationContext.refresh:558 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jwtAuthenticationFilter': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'jwt.tokenHeader' in value "${jwt.tokenHeader}"
2020-04-25 22:03:25.269 INFO  [main]com.alibaba.druid.pool.DruidDataSource.close:1965 -{dataSource-0} closing ...
2020-04-25 22:03:25.300 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-25 22:03:25.312 ERROR [main]org.springframework.boot.SpringApplication.reportFailure:826 -Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jwtAuthenticationFilter': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'jwt.tokenHeader' in value "${jwt.tokenHeader}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:126)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:98)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassBasedTestDescriptor.java:337)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:342)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassBasedTestDescriptor.java:337)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:336)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:259)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$2(ClassBasedTestDescriptor.java:252)
	at java.util.Optional.orElseGet(Optional.java:267)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$3(ClassBasedTestDescriptor.java:251)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:29)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$1(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:75)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'jwt.tokenHeader' in value "${jwt.tokenHeader}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:178)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:124)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:236)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:909)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1228)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 81 common frames omitted
2020-04-25 22:03:25.369 ERROR [main]org.springframework.test.context.TestContextManager.prepareTestInstance:248 -Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener@51c693d] to prepare test instance [cn.codexing.blog.BlogApplicationTests@7c4d1c7b]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:98)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassBasedTestDescriptor.java:337)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:342)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassBasedTestDescriptor.java:337)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:336)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:259)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$2(ClassBasedTestDescriptor.java:252)
	at java.util.Optional.orElseGet(Optional.java:267)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$3(ClassBasedTestDescriptor.java:251)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:29)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$1(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:75)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jwtAuthenticationFilter': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'jwt.tokenHeader' in value "${jwt.tokenHeader}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:126)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	... 65 common frames omitted
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'jwt.tokenHeader' in value "${jwt.tokenHeader}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:178)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:124)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:236)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:909)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1228)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 81 common frames omitted
2020-04-25 22:04:03.384 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 22:04:03.459 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.buildDefaultMergedContextConfiguration:308 -Neither @ContextConfiguration nor @ContextHierarchy found for test class [cn.codexing.blog.BlogApplicationTests], using SpringBootContextLoader
2020-04-25 22:04:03.464 INFO  [main]o.s.test.context.support.AbstractContextLoader.generateDefaultLocations:264 -Could not detect default resource locations for test class [cn.codexing.blog.BlogApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2020-04-25 22:04:03.466 INFO  [main]o.s.t.context.support.AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses:83 -Could not detect default configuration classes for test class [cn.codexing.blog.BlogApplicationTests]: BlogApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2020-04-25 22:04:03.616 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getOrFindConfigurationClasses:235 -Found @SpringBootConfiguration cn.codexing.blog.BlogApplication for test class cn.codexing.blog.BlogApplicationTests
2020-04-25 22:04:03.820 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getDefaultTestExecutionListenerClassNames:248 -Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2020-04-25 22:04:03.845 INFO  [main]o.s.boot.test.context.SpringBootTestContextBootstrapper.getTestExecutionListeners:177 -Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@51c693d, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@6a57ae10, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@766653e6, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@4e07b95f, org.springframework.test.context.support.DirtiesContextTestExecutionListener@28b46423, org.springframework.test.context.transaction.TransactionalTestExecutionListener@7fc4780b, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@3b79fd76, org.springframework.test.context.event.EventPublishingTestExecutionListener@48c76607, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@43599640, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@1f81aa00, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@6b6776cb, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@1863d2fe, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@1787bc24]
2020-04-25 22:04:04.483 INFO  [main]cn.codexing.blog.BlogApplicationTests.logStarting:55 -Starting BlogApplicationTests on DESKTOP-0EBHI2S with PID 16012 (started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-25 22:04:04.487 DEBUG [main]cn.codexing.blog.BlogApplicationTests.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-25 22:04:04.488 INFO  [main]cn.codexing.blog.BlogApplicationTests.logStartupProfileInfo:655 -The following profiles are active: prod
2020-04-25 22:04:05.100 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-25 22:04:06.350 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-25 22:04:06.353 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-25 22:04:06.450 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 79ms. Found 0 Redis repository interfaces.
2020-04-25 22:04:07.511 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:04:07.692 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:04:07.714 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@13bdf540' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:04:07.753 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:04:07.802 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:04:07.842 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$7b6d8704] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 22:04:09.308 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 22:04:09.449 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 22:04:09.939 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 22:04:11.249 WARN  [main]o.s.web.context.support.GenericWebApplicationContext.refresh:558 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jwtAuthenticationFilter': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'jwt.tokenHeader' in value "${jwt.tokenHeader}"
2020-04-25 22:04:11.270 INFO  [main]com.alibaba.druid.pool.DruidDataSource.close:1965 -{dataSource-0} closing ...
2020-04-25 22:04:11.299 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-25 22:04:11.309 ERROR [main]org.springframework.boot.SpringApplication.reportFailure:826 -Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jwtAuthenticationFilter': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'jwt.tokenHeader' in value "${jwt.tokenHeader}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:126)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:98)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassBasedTestDescriptor.java:337)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:342)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassBasedTestDescriptor.java:337)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:336)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:259)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$2(ClassBasedTestDescriptor.java:252)
	at java.util.Optional.orElseGet(Optional.java:267)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$3(ClassBasedTestDescriptor.java:251)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:29)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$1(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:75)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'jwt.tokenHeader' in value "${jwt.tokenHeader}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:178)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:124)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:236)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:909)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1228)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 81 common frames omitted
2020-04-25 22:04:11.329 ERROR [main]org.springframework.test.context.TestContextManager.prepareTestInstance:248 -Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener@51c693d] to prepare test instance [cn.codexing.blog.BlogApplicationTests@1b1e1f02]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:98)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassBasedTestDescriptor.java:337)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:342)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassBasedTestDescriptor.java:337)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:743)
	at java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:742)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:336)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:259)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$2(ClassBasedTestDescriptor.java:252)
	at java.util.Optional.orElseGet(Optional.java:267)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$3(ClassBasedTestDescriptor.java:251)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:29)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$1(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:107)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:75)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at java.util.ArrayList.forEach(ArrayList.java:1257)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jwtAuthenticationFilter': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'jwt.tokenHeader' in value "${jwt.tokenHeader}"
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:126)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	... 65 common frames omitted
Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder 'jwt.tokenHeader' in value "${jwt.tokenHeader}"
	at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:178)
	at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:124)
	at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:236)
	at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210)
	at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175)
	at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:909)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1228)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	... 81 common frames omitted
2020-04-25 23:04:46.669 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-25 23:04:47.420 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 18352 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-25 23:04:47.421 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-25 23:04:47.422 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: prod
2020-04-25 23:04:47.728 WARN  [background-preinit]o.s.http.converter.json.Jackson2ObjectMapperBuilder.warn:127 -For Jackson Kotlin classes support please add "com.fasterxml.jackson.module:jackson-module-kotlin" to the classpath
2020-04-25 23:04:48.868 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-25 23:04:48.870 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-25 23:04:48.916 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 33ms. Found 0 Redis repository interfaces.
2020-04-25 23:04:49.274 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 23:04:49.335 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 23:04:49.341 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@3204e238' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 23:04:49.344 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 23:04:49.357 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 23:04:49.369 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$8e1dc118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-25 23:04:49.867 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-25 23:04:49.875 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-25 23:04:49.876 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-25 23:04:49.876 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-25 23:04:49.969 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-25 23:04:49.970 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2478 ms
2020-04-25 23:04:51.004 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.ArticleMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 23:04:51.061 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.CategoryMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 23:04:51.258 WARN  [main]com.baomidou.mybatisplus.core.injector.AbstractMethod.addMappedStatement:307 -[cn.codexing.blog.mapper.TagMapper.deleteById] Has been loaded by XML or SqlProvider or Mybatis's Annotation, so ignoring this injection for [class com.baomidou.mybatisplus.core.injector.methods.DeleteById]
2020-04-25 23:04:51.689 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-25 23:04:51.690 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-25 23:04:51.690 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-25 23:04:53.073 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-25 23:04:53.274 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7dd3981e, org.springframework.security.web.context.SecurityContextPersistenceFilter@4fa0ee7e, org.springframework.security.web.header.HeaderWriterFilter@3739f3c9, org.springframework.security.web.authentication.logout.LogoutFilter@210a26b, cn.codexing.blog.common.filter.JwtAuthenticationFilter@7558c24b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@67d5ac2f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@141bb6b8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6335f04a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@59313495, org.springframework.security.web.session.SessionManagementFilter@40fe8fd5, org.springframework.security.web.access.ExceptionTranslationFilter@2a120c88, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3b362f1]
2020-04-25 23:04:53.929 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-25 23:04:53.951 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-25 23:04:53.986 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-25 23:04:54.181 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-25 23:04:54.219 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-25 23:04:54.226 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-25 23:04:54.235 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-25 23:04:54.249 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-25 23:04:54.260 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-25 23:04:54.267 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-25 23:04:54.313 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-25 23:04:54.336 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-25 23:04:54.339 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 7.604 seconds (JVM running for 9.001)
