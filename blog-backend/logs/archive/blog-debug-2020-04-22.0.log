2020-04-22 13:12:29.935 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 13:12:35.427 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 13:12:35.428 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 13:12:35.429 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 13:19:18.324 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:19:18.338 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 13:19:18.372 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:22:58.738 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:22:58.739 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 13:22:58.743 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:23:06.030 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:23:06.030 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 13:23:06.031 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:24:16.560 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:24:16.560 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 13:24:16.561 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:25:53.794 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:25:53.795 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 13:25:53.796 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:26:18.333 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:26:18.334 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 13:26:18.336 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:26:26.324 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:26:26.325 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 13:26:26.326 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:28:24.687 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:28:24.688 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 13:28:24.689 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:29:36.343 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:29:36.344 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 13:29:36.345 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:39:31.342 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 13:39:35.906 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 13:39:35.907 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 13:39:35.907 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 13:39:52.576 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:39:52.593 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: null
2020-04-22 13:39:52.607 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:40:30.207 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 13:40:30.208 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 13:40:30.208 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 13:47:39.680 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 13:47:43.892 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 13:47:43.892 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 13:47:43.893 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 13:47:52.606 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.common.filter.JWTLoginFilter.doFilter:206 -Request is to process authentication
2020-04-22 15:09:28.456 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 15:09:34.957 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 15:09:34.957 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 15:09:34.958 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 15:11:36.065 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 15:11:36.079 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 15:11:36.100 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 15:15:20.483 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 15:15:20.484 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 15:15:20.486 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 15:17:41.726 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 15:17:41.727 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-22 15:17:41.733 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-22 15:17:41.735 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-22 15:17:41.737 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-22 15:17:41.766 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-22 15:17:53.920 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 15:17:53.920 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 15:17:53.922 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 15:18:38.209 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 15:18:38.210 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-22 15:18:38.212 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-22 15:18:38.214 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-22 15:18:38.215 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-22 15:18:38.216 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-22 20:08:43.210 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 20:08:43.255 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 20:08:43.263 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 20:10:22.476 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 20:10:22.477 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 20:10:22.479 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 20:10:38.912 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 20:10:38.914 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 20:10:38.916 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 20:11:30.507 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 20:11:30.509 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 20:11:30.512 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 20:12:18.916 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 20:12:18.917 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 20:12:18.918 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 20:12:58.937 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 20:12:58.938 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 20:12:58.939 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 20:14:17.861 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 20:14:17.862 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 20:14:17.863 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 20:15:06.968 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 20:15:06.969 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 20:15:06.971 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 20:20:30.698 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 20:20:30.700 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 20:20:30.703 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 20:21:53.396 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 20:21:53.397 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 20:21:53.399 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:18:17.073 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 21:18:21.749 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 21:18:21.750 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 21:18:21.750 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 21:19:08.320 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:19:08.336 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:19:08.352 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:20:10.160 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:20:10.161 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:20:10.162 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:20:19.242 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 21:20:19.243 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 21:20:19.294 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:19.294 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:20:19.310 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.312 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:19.313 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:20:19.323 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.324 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 21:20:19.376 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 21:20:19.377 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-22 21:20:19.387 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:20:19.389 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 111(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:20:19.390 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-22 21:20:19.391 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-22 21:20:19.397 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:19.400 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:20:19.403 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.405 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:19.406 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:20:19.411 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.411 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:20:19.416 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:19.418 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:20:19.420 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.422 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:19.423 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:20:19.426 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.430 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:19.432 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 21:20:19.434 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.436 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:19.437 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 21:20:19.439 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.443 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:19.444 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 21:20:19.446 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.451 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:19.453 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 21:20:19.456 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.460 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:19.462 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 21:20:19.464 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.468 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:19.469 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 21:20:19.474 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.482 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:19.483 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 21:20:19.485 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.488 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:19.489 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 21:20:19.491 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.495 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:19.496 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 21:20:19.499 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.502 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:19.503 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 21:20:19.505 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-22 21:20:19.508 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:19.509 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 21:20:19.510 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.512 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:19.513 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 21:20:19.517 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:19.519 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 8
2020-04-22 21:20:19.536 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:20:19.539 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 231(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1148},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:20:19.550 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:20:31.187 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-22 21:20:31.188 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-22 21:20:31.195 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-22 21:20:31.197 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 21:20:31.198 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-22 21:20:31.201 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-22 21:20:31.202 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 21:20:31.203 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-22 21:20:31.204 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-22 21:20:31.214 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:20:31.215 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 21(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:20:31.218 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:20:35.706 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 21:20:35.707 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-22 21:20:35.709 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-22 21:20:35.710 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-22 21:20:35.713 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:35.714 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:20:35.716 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.717 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:35.718 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:20:35.719 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.721 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:35.722 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:20:35.724 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.725 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:35.727 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:20:35.729 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.731 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:35.732 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 21:20:35.733 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.735 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:35.736 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 21:20:35.737 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.739 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:35.740 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 21:20:35.741 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.742 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:35.744 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 21:20:35.746 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.747 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:35.748 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 21:20:35.749 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.750 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:35.751 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 21:20:35.752 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.754 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:35.755 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 21:20:35.756 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.758 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:35.758 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 21:20:35.761 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.763 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:35.764 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 21:20:35.766 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.767 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:35.768 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 21:20:35.769 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-22 21:20:35.771 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:20:35.772 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 21:20:35.773 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.774 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:20:35.775 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 21:20:35.776 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:20:35.779 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 8
2020-04-22 21:20:35.784 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:20:35.786 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 78(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1148},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:20:35.792 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:23:54.681 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 21:23:58.486 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 21:23:58.487 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 21:23:58.488 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 21:24:06.106 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-22 21:24:06.106 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 21:24:06.120 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-22 21:24:06.120 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 21:24:06.132 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-22 21:24:06.134 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:24:06.135 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:24:06.138 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:24:06.141 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:24:06.142 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:24:06.146 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:24:06.148 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 21:24:06.165 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:24:06.167 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 197(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:24:06.171 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:24:06.172 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:24:06.174 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 510(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:24:06.180 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:24:09.704 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 21:24:09.705 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-22 21:24:09.706 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 21:24:09.706 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-22 21:24:09.709 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-22 21:24:09.710 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:24:09.711 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:24:09.714 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:24:09.716 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:24:09.716 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:24:09.717 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:24:09.718 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:24:09.720 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:24:09.721 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:24:09.722 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 21:24:09.727 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:24:09.728 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 23(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:24:09.731 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:24:17.430 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-22 21:24:17.431 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-22 21:24:17.432 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-22 21:24:17.433 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 21:24:17.434 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-22 21:24:17.437 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-22 21:24:17.438 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 21:24:17.439 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-22 21:24:17.442 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-22 21:24:17.451 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:24:17.453 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 16(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:24:17.457 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:24:19.364 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-22 21:24:19.365 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-22 21:24:19.366 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-22 21:24:19.368 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 21:24:19.368 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-22 21:24:19.371 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-22 21:24:19.372 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 21:24:19.373 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-22 21:24:19.375 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-22 21:24:19.380 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:24:19.382 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 15(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:24:19.384 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:30.652 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 21:25:34.687 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 21:25:34.688 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 21:25:34.688 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 21:25:42.100 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 21:25:42.101 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-22 21:25:42.128 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 21:25:42.129 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-22 21:25:42.170 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-22 21:25:42.175 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 21:25:42.177 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 21:25:42.183 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-22 21:25:42.184 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 21:25:42.187 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:42.188 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:42.193 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.196 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:42.197 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:42.201 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.203 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 21:25:42.203 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-22 21:25:42.204 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-22 21:25:42.211 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:42.212 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:25:42.216 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.216 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 21:25:42.218 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:42.218 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 21:25:42.219 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:25:42.222 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:42.223 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 21:25:42.227 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.230 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:42.231 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 21:25:42.233 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.225 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.234 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:42.235 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 21:25:42.237 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.239 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:42.239 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:42.239 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 21:25:42.241 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.243 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:42.244 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:42.244 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 21:25:42.245 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.246 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:42.246 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 646(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:42.247 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:42.247 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:42.248 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-22 21:25:42.249 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.240 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 302(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:42.249 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:42.250 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.250 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:42.251 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:42.252 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:42.253 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-22 21:25:42.253 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.256 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.257 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:42.258 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 21:25:42.260 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.262 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:42.264 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 21:25:42.265 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:42.266 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.268 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-22 21:25:42.270 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:42.270 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 21:25:42.272 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.273 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:42.274 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 21:25:42.275 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.279 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:42.279 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 21:25:42.282 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.285 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:42.285 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 21:25:42.287 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.287 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:42.288 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 380(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:42.289 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:42.290 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 21:25:42.292 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.292 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:42.294 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:42.294 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 21:25:42.296 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.298 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:42.298 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 21:25:42.299 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.301 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:42.302 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 21:25:42.304 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-22 21:25:42.307 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:42.308 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 21:25:42.309 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.311 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:42.311 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 21:25:42.313 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:42.315 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 8
2020-04-22 21:25:42.334 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:42.338 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 426(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1148},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:42.344 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:45.507 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 21:25:45.508 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 21:25:45.510 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:45.511 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:45.513 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.515 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:45.516 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:45.518 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.520 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 21:25:45.524 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:45.525 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 18(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:45.527 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-22 21:25:45.527 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:45.528 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 4(String)
2020-04-22 21:25:45.535 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:45.536 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:25:45.539 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.540 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:45.541 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:25:45.542 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.543 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-22 21:25:45.544 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==>  Preparing: UPDATE article SET views = views + 1 WHERE id = ?; 
2020-04-22 21:25:45.545 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==> Parameters: 4(String)
2020-04-22 21:25:45.549 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -<==    Updates: 1
2020-04-22 21:25:45.557 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:45.558 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/details/4(String), [4](String), 1(Integer), GET(String), 50(Long), {"code":20000,"data":{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1148},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:45.560 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:45.808 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 21:25:45.810 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 21:25:45.811 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 21:25:45.812 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 21:25:45.815 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:45.816 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 21:25:45.819 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.820 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:45.822 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 21:25:45.823 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.825 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:45.826 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 21:25:45.827 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.829 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:45.830 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 21:25:45.832 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.834 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:45.835 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 21:25:45.836 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.838 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:45.839 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-22 21:25:45.840 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.842 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:45.843 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-22 21:25:45.844 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:45.845 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-22 21:25:45.849 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:45.851 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 40(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:45.864 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:50.068 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 21:25:50.068 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-22 21:25:50.069 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-22 21:25:50.070 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-22 21:25:50.070 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 21:25:50.070 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-22 21:25:50.071 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-22 21:25:50.072 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 21:25:50.074 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 21:25:50.074 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-22 21:25:50.076 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 21:25:50.078 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 21:25:50.080 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:50.081 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:25:50.081 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:50.083 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 21:25:50.083 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.083 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:50.084 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.085 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:50.086 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:50.086 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:25:50.087 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:50.077 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 21:25:50.088 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 21:25:50.088 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.090 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.090 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:50.090 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:50.091 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:50.091 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:50.091 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:50.092 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:50.093 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 21:25:50.093 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.096 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.096 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:50.098 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.098 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:50.099 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:50.100 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 21:25:50.100 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:50.101 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.101 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:50.101 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.103 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.103 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:50.104 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 21:25:50.103 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:50.104 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 21:25:50.105 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 21:25:50.106 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.106 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.107 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:50.108 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 46(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:50.108 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:50.108 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:50.109 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 21:25:50.109 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-22 21:25:50.110 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.112 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.112 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:50.113 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:50.115 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-22 21:25:50.114 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:50.116 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 21:25:50.116 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.117 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-22 21:25:50.118 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.121 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:50.121 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:50.122 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 21:25:50.122 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 52(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:50.123 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.126 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:50.127 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:50.129 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 21:25:50.131 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.134 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:50.135 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 21:25:50.137 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.138 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:50.139 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 21:25:50.141 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.143 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:50.144 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 21:25:50.146 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.148 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:50.149 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 21:25:50.150 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.152 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:50.153 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 21:25:50.154 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-22 21:25:50.158 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:50.159 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 21:25:50.162 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.164 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:50.165 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 21:25:50.167 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:50.169 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 8
2020-04-22 21:25:50.183 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:50.186 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 111(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1149},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:50.192 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:51.837 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 21:25:51.838 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 21:25:51.839 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 21:25:51.840 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 21:25:51.842 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:51.842 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 21:25:51.844 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-22 21:25:51.846 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:51.847 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 21:25:51.848 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-22 21:25:51.849 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:51.850 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 21:25:51.851 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-22 21:25:51.852 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:51.853 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 21:25:51.854 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-22 21:25:51.855 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 21:25:51.856 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 21:25:51.857 DEBUG [http-nio-8088-exec-4]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-22 21:25:51.858 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-22 21:25:51.864 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:51.865 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 29(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"1","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"2","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"2","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:51.869 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:53.348 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-22 21:25:53.349 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-22 21:25:53.350 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-22 21:25:53.351 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 21:25:53.352 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-22 21:25:53.354 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-22 21:25:53.356 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 21:25:53.357 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-22 21:25:53.358 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-22 21:25:53.366 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:53.367 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 13(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:53.372 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:25:55.982 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 21:25:55.983 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-22 21:25:55.984 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-22 21:25:55.985 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-22 21:25:55.987 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:55.988 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:25:55.990 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:55.991 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:55.991 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 21:25:55.992 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:55.995 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:55.996 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:55.997 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:55.999 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:55.999 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 21:25:56.001 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.002 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:56.003 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 21:25:56.004 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.006 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:56.007 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 21:25:56.008 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.010 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:56.011 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 21:25:56.012 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.014 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:56.014 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 21:25:56.016 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.017 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:56.018 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 21:25:56.019 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.020 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:56.020 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 21:25:56.021 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.023 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:56.023 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 21:25:56.024 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.026 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:56.027 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 21:25:56.029 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.030 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:56.031 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 21:25:56.032 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.033 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:56.034 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 21:25:56.035 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-22 21:25:56.036 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 21:25:56.037 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 21:25:56.038 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.039 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 21:25:56.040 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 21:25:56.041 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 21:25:56.042 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 8
2020-04-22 21:25:56.047 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 21:25:56.049 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 71(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1149},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 21:25:56.056 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 21:26:46.824 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:26:46.824 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:26:46.826 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:27:57.703 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:27:57.704 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:27:57.704 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:28:51.721 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:28:51.722 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:28:51.724 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:29:32.137 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:29:32.138 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:29:32.138 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:30:06.862 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:30:06.862 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:30:06.863 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:30:39.956 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:30:39.957 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:30:39.958 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:32:08.582 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:32:08.583 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:32:08.584 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:32:42.526 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:32:42.528 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:32:42.529 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:46:27.702 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:46:27.703 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:46:27.704 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:46:36.601 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:46:36.601 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:46:36.602 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 21:47:20.465 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 21:47:20.466 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 21:47:20.467 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:00:56.700 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:00:56.701 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:00:56.704 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:01:05.919 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:01:05.920 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:01:05.921 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:01:07.979 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:01:07.980 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:01:07.981 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:03:59.028 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:03:59.028 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:03:59.029 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:04:05.320 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:04:05.321 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:04:05.322 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:05:22.691 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:05:22.692 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:05:22.693 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:05:36.367 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:05:36.377 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:05:36.378 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:11:14.360 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:11:14.362 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:11:14.363 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:11:24.038 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:11:24.039 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:11:24.040 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:12:31.714 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:12:31.714 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:12:31.715 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:12:39.055 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:12:39.056 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 22:12:39.057 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 22:13:14.079 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 22:13:14.080 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 22:13:14.094 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:13:14.095 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:13:14.099 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.101 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:13:14.102 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:13:14.104 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.109 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 22:13:14.111 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-22 22:13:14.113 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-22 22:13:14.119 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-22 22:13:14.131 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 22:13:14.132 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 22:13:14.135 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 22:13:14.137 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-22 22:13:14.143 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 22:13:14.145 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:13:14.146 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-22 22:13:14.147 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 22:13:14.149 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 54(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:13:14.147 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-22 22:13:14.152 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:13:14.153 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:13:14.153 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 22:13:14.153 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:13:14.154 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 22:13:14.156 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 43(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:13:14.157 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.158 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:13:14.162 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.163 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:13:14.164 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 22:13:14.164 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:13:14.165 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 22:13:14.166 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.168 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:13:14.169 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.168 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:13:14.170 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 22:13:14.171 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.173 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:13:14.173 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:13:14.174 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 22:13:14.174 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:13:14.176 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.176 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.177 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:13:14.177 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:13:14.178 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 22:13:14.178 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:13:14.180 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.180 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.182 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:13:14.182 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:13:14.183 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 22:13:14.183 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-22 22:13:14.184 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.184 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.186 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:13:14.186 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:13:14.187 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 22:13:14.187 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-22 22:13:14.189 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.189 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.189 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-22 22:13:14.192 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:13:14.193 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 22:13:14.195 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.197 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:13:14.197 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:13:14.197 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 22:13:14.198 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 116(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:13:14.199 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.201 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:13:14.201 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:13:14.202 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 22:13:14.203 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.206 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:13:14.208 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 22:13:14.210 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.212 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:13:14.213 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 22:13:14.214 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.216 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:13:14.216 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 22:13:14.218 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.221 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:13:14.221 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 22:13:14.224 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.226 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:13:14.227 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 22:13:14.228 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-22 22:13:14.230 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:13:14.231 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 22:13:14.233 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.234 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:13:14.235 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 22:13:14.236 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:13:14.237 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 8
2020-04-22 22:13:14.245 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:13:14.248 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 155(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1149},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:13:14.256 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:14.947 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 22:14:14.948 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 22:14:14.949 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 22:14:14.950 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:14.950 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:14.950 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 22:14:14.951 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.952 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 22:14:14.952 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 22:14:14.952 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:14.953 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:14.954 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:14.955 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.955 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 22:14:14.957 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 22:14:14.957 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.958 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:14.959 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 22:14:14.959 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-22 22:14:14.960 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.960 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:14.960 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-22 22:14:14.961 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:14.961 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:14.962 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 22:14:14.963 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.964 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:14.964 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:14.965 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 22:14:14.967 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.967 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:14.968 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:14.968 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:14.969 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 22:14:14.970 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.972 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.973 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:14.973 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-22 22:14:14.974 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:14.975 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.975 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:14.976 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:14.977 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-22 22:14:14.978 DEBUG [http-nio-8088-exec-7]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.979 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:14.980 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-22 22:14:14.979 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-22 22:14:14.983 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==>  Preparing: UPDATE article SET views = views + 1 WHERE id = ?; 
2020-04-22 22:14:14.983 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==> Parameters: 1251780392676016129(String)
2020-04-22 22:14:14.985 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:14.986 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 37(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:14.987 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -<==    Updates: 1
2020-04-22 22:14:14.989 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:14.996 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:14.997 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/details/1251780392676016129(String), [1251780392676016129](String), 1(Integer), GET(String), 46(Long), {"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:15.002 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:31.956 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-22 22:14:31.956 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 22:14:31.957 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-22 22:14:31.957 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 22:14:31.959 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 22:14:31.960 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 22:14:31.960 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-22 22:14:31.961 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.962 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 22:14:31.962 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 22:14:31.963 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:31.963 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 22:14:31.963 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.963 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 8(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:31.961 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM category WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 22:14:31.965 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.966 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 22:14:31.966 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 22:14:31.967 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:31.967 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.968 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==>  Preparing: select id,category_name,is_enable from category WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 22:14:31.968 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 22:14:31.969 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.969 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 22:14:31.970 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.971 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.971 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:31.972 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.972 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 22:14:31.973 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 22:14:31.973 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.973 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:31.974 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.976 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.975 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.976 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 22:14:31.976 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 22:14:31.977 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.978 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.978 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.979 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.979 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.979 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:31.979 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 22:14:31.979 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-22 22:14:31.979 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:31.981 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.981 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.982 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.982 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.983 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.983 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-22 22:14:31.983 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 22:14:31.984 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 22:14:31.984 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.984 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.985 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-22 22:14:31.986 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_category ac on a.id=ac.article_id WHERE ac.category_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:31.986 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 22:14:31.986 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:31.987 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 36(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:31.988 DEBUG [http-nio-8088-exec-1]c.c.blog.mapper.ArticleMapper.getArticleCountByTypeId.debug:143 -<====      Total: 1
2020-04-22 22:14:31.987 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:31.988 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.CategoryMapper.getByPage.debug:143 -<==      Total: 5
2020-04-22 22:14:31.990 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 33(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:31.990 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:31.992 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:31.992 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:31.993 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /category/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 40(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"1","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"2","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"2","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:31.998 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:35.471 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-22 22:14:35.471 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-22 22:14:35.473 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-22 22:14:35.475 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 22:14:35.475 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-22 22:14:35.477 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-22 22:14:35.478 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 22:14:35.479 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-22 22:14:35.480 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-22 22:14:35.485 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:35.486 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 12(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:35.495 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:38.126 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-22 22:14:38.127 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-22 22:14:38.130 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-22 22:14:38.132 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 22:14:38.133 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-22 22:14:38.134 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-22 22:14:38.135 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 22:14:38.136 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-22 22:14:38.137 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-22 22:14:38.139 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:38.140 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 14(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:38.142 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:45.051 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-22 22:14:45.052 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-22 22:14:45.053 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-22 22:14:45.054 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 22:14:45.054 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 22:14:45.055 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-22 22:14:45.055 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 22:14:45.056 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 22:14:45.057 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-22 22:14:45.057 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 22:14:45.058 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 22:14:45.059 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-22 22:14:45.061 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:45.062 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 22:14:45.063 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-22 22:14:45.064 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:45.066 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:45.066 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:45.067 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 22:14:45.067 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 17(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:45.068 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:45.070 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:45.070 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 22:14:45.071 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:45.072 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:45.073 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:45.074 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 22:14:45.076 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:45.078 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:45.079 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 22:14:45.080 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:45.082 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:45.083 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-22 22:14:45.084 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:45.086 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:45.087 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-22 22:14:45.088 DEBUG [http-nio-8088-exec-6]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:45.089 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-22 22:14:45.093 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:45.094 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 41(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:45.097 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:45.317 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 22:14:45.317 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 22:14:45.319 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:45.319 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:45.320 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:45.321 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:45.322 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:45.323 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:45.323 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 22:14:45.325 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:45.325 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 9(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:45.328 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:45.356 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-22 22:14:45.356 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-22 22:14:45.358 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-22 22:14:45.360 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:45.360 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 5(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:45.363 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:46.297 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 22:14:46.298 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 22:14:46.298 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==>  Preparing: SELECT id, author, title, content, summary, cover, views, comment_count, like_count, is_top, is_recommend, is_enable, create_time, update_time FROM article WHERE id = ? AND is_deleted = 0 
2020-04-22 22:14:46.299 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-22 22:14:46.300 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:46.300 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:46.301 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.302 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:46.302 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-22 22:14:46.302 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:46.303 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:46.303 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.304 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.304 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:46.304 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 22:14:46.305 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251752142763507713(String)
2020-04-22 22:14:46.305 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.306 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:46.306 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.getArticleVoById.debug:143 -<==      Total: 1
2020-04-22 22:14:46.307 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 13(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:46.307 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==>  Preparing: UPDATE article SET views = views + 1 WHERE id = ?; 
2020-04-22 22:14:46.307 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -==> Parameters: 1251752142763507713(String)
2020-04-22 22:14:46.308 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.ArticleMapper.updateReadTotal.debug:143 -<==    Updates: 1
2020-04-22 22:14:46.309 DEBUG [http-nio-8088-exec-8]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:46.314 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:46.315 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/details/1251752142763507713(String), [1251752142763507713](String), 1(Integer), GET(String), 19(Long), {"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":15},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:46.326 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:46.599 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 22:14:46.600 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 22:14:46.601 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 22:14:46.602 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 22:14:46.604 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:46.605 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 22:14:46.606 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.608 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:46.609 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 22:14:46.610 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.611 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:46.612 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 22:14:46.614 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.616 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:46.616 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 22:14:46.617 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.618 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:46.619 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 22:14:46.620 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.621 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:46.622 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-22 22:14:46.622 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.623 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:46.624 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-22 22:14:46.625 DEBUG [http-nio-8088-exec-10]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:46.625 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-22 22:14:46.627 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:46.629 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 29(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:46.632 DEBUG [http-nio-8088-exec-10]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:48.363 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-22 22:14:48.364 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-22 22:14:48.365 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-22 22:14:48.366 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 22:14:48.367 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-22 22:14:48.368 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-22 22:14:48.369 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 22:14:48.369 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-22 22:14:48.371 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-22 22:14:48.373 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:48.373 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 12(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:48.377 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:48.667 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==>  Preparing: SELECT id,nickname,url,is_enable FROM friend_link 
2020-04-22 22:14:48.667 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==>  Preparing: SELECT id, title, create_time, like_count FROM article WHERE is_deleted = 0 AND is_recommend = 1 AND is_enable = 1 ORDER BY ( views + like_count ) DESC LIMIT 5 
2020-04-22 22:14:48.668 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -==> Parameters: 
2020-04-22 22:14:48.668 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -==> Parameters: 
2020-04-22 22:14:48.668 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM tag WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 22:14:48.669 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer)
2020-04-22 22:14:48.670 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:48.670 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.FriendLinkMapper.selectList.debug:143 -<==      Total: 3
2020-04-22 22:14:48.671 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:48.671 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==>  Preparing: select id,name,is_enable from tag WHERE is_enable = ? and is_deleted = 0 LIMIT ?,? 
2020-04-22 22:14:48.671 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -==> Parameters: 1(Integer), 0(Long), 20(Long)
2020-04-22 22:14:48.671 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:48.673 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:48.673 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:48.673 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:48.673 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 1(Integer)
2020-04-22 22:14:48.673 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:48.674 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /link/list(String), [](String), 1(Integer), GET(String), 7(Long), {"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:48.674 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:48.674 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:48.675 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.ArticleMapper.getReCommendList.debug:143 -<==      Total: 1
2020-04-22 22:14:48.676 DEBUG [http-nio-8088-exec-9]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:48.676 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:48.676 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 2(Integer)
2020-04-22 22:14:48.679 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:48.679 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:48.679 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/recommend/list(String), [](String), 1(Integer), GET(String), 12(Long), {"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:48.680 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:48.681 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 3(Integer)
2020-04-22 22:14:48.682 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:48.682 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:48.684 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:48.685 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 4(Integer)
2020-04-22 22:14:48.686 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:48.688 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:48.689 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 5(Integer)
2020-04-22 22:14:48.690 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:48.691 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:48.692 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 6(Integer)
2020-04-22 22:14:48.693 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:48.695 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====>  Preparing: select count(*) as articleCount from article a left join article_tag att on a.id=att.article_id WHERE att.tag_id = ? AND a.is_enable = 1 AND a.is_deleted = 0 
2020-04-22 22:14:48.695 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -====> Parameters: 7(Integer)
2020-04-22 22:14:48.696 DEBUG [http-nio-8088-exec-3]c.c.blog.mapper.ArticleMapper.getArticleCountByTagId.debug:143 -<====      Total: 1
2020-04-22 22:14:48.697 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.TagMapper.getByPage.debug:143 -<==      Total: 7
2020-04-22 22:14:48.700 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:48.701 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /tag/list(String), [PageUtils(totalCount=0, pageSize=20, totalPage=0, currPage=1, list=[], params={isEnable=1}, sortColumn=)](String), 1(Integer), POST(String), 33(Long), {"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:48.704 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:52.272 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==>  Preparing: SELECT DATE_FORMAT(create_time,'%Y') AS YEAR FROM article GROUP BY YEAR ORDER BY YEAR DESC 
2020-04-22 22:14:52.273 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -==> Parameters: 
2020-04-22 22:14:52.274 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.findGroupYear.debug:143 -<==      Total: 2
2020-04-22 22:14:52.275 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 22:14:52.275 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2020(String)
2020-04-22 22:14:52.277 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 13
2020-04-22 22:14:52.278 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==>  Preparing: SELECT id,title,create_time FROM article WHERE DATE_FORMAT(create_time,'%Y') = ? order by create_time desc 
2020-04-22 22:14:52.279 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -==> Parameters: 2019(String)
2020-04-22 22:14:52.279 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.ArticleMapper.findByYear.debug:143 -<==      Total: 2
2020-04-22 22:14:52.282 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:52.282 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/archive/list(String), [](String), 1(Integer), GET(String), 10(Long), {"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:52.285 DEBUG [http-nio-8088-exec-6]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:53.198 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 22:14:53.199 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-22 22:14:53.202 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, create_time desc LIMIT ?,? 
2020-04-22 22:14:53.203 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-22 22:14:53.205 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:53.206 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 22:14:53.207 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.208 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:53.209 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 22:14:53.211 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.212 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:53.213 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:53.214 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.215 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:53.216 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:53.217 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.218 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:53.218 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 22:14:53.219 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.220 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:53.220 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 22:14:53.221 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.222 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:53.223 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 22:14:53.224 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.225 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:53.225 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 22:14:53.226 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.228 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:53.229 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 22:14:53.230 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.231 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:53.231 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 22:14:53.232 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.233 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:53.234 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 22:14:53.235 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.235 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:53.236 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 22:14:53.237 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.238 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:53.239 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 22:14:53.240 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.241 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:53.241 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 22:14:53.242 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-22 22:14:53.244 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:53.245 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 22:14:53.246 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.247 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:53.248 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 22:14:53.249 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:53.249 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 8
2020-04-22 22:14:53.252 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:53.254 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=0, pageSize=10, totalPage=0, currPage=1, list=[], params={isEnable=true}, sortColumn=create_time)](String), 1(Integer), POST(String), 60(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1149},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":39},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:53.257 DEBUG [http-nio-8088-exec-7]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:14:54.248 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT COUNT(1) FROM article WHERE is_enable = ? AND is_deleted = 0 
2020-04-22 22:14:54.249 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean)
2020-04-22 22:14:54.250 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==>  Preparing: SELECT id,author,title,content,summary,cover, views,comment_count,like_count,is_top, is_recommend,create_time,update_time,is_enable FROM article WHERE is_enable = ? and is_deleted=0 order by is_top desc, like_count desc LIMIT ?,? 
2020-04-22 22:14:54.251 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -==> Parameters: true(Boolean), 0(Long), 10(Long)
2020-04-22 22:14:54.252 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:54.253 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 22:14:54.253 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.254 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:54.255 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 4(String)
2020-04-22 22:14:54.255 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.257 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:54.257 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 22:14:54.258 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.259 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:54.259 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1(String)
2020-04-22 22:14:54.260 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 2
2020-04-22 22:14:54.261 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:54.262 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 22:14:54.263 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.264 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:54.264 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 3(String)
2020-04-22 22:14:54.265 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.267 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:54.267 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 22:14:54.268 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.269 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:54.270 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725190564519937(String)
2020-04-22 22:14:54.271 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.272 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:54.272 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 22:14:54.273 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.274 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:54.275 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251725884101074946(String)
2020-04-22 22:14:54.276 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.277 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:54.278 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 22:14:54.279 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.280 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:54.280 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251750614375907330(String)
2020-04-22 22:14:54.281 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.283 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:54.283 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 22:14:54.284 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.285 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:54.285 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251776651612700674(String)
2020-04-22 22:14:54.286 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.287 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====>  Preparing: select c.id,c.category_name from category c left join article_category ac on c.id=ac.category_id WHERE ac.article_id = ? AND c.is_enable = 1 AND c.is_deleted = 0 
2020-04-22 22:14:54.288 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:54.288 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.CategoryMapper.getByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.289 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====>  Preparing: select t.id,t.name from tag t left join article_tag att on t.id=att.tag_id WHERE att.article_id = ? AND t.is_enable = 1 AND t.is_deleted = 0 
2020-04-22 22:14:54.290 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -====> Parameters: 1251780392676016129(String)
2020-04-22 22:14:54.291 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.TagMapper.listByArticleId.debug:143 -<====      Total: 1
2020-04-22 22:14:54.291 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.ArticleMapper.getByPage.debug:143 -<==      Total: 8
2020-04-22 22:14:54.294 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==>  Preparing: INSERT INTO sys_log ( url, params, status, method, used_time, result, ip ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) 
2020-04-22 22:14:54.296 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -==> Parameters: /article/list(String), [PageUtils(totalCount=8, pageSize=10, totalPage=1, currPage=1, list=[{id=4, author=3, title=这是置顶的文章哇, content=save, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=1149, commentCount=12, likeCount=12, isTop=true, isRecommend=false, createTime=2019-06-14T12:21:50, updateTime=2020-04-20T15:19:20, isEnable=true, isDeleted=null, version=null, category={id=4, categoryName=其他, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251780392676016129, author=xing, title=mysql练习题, content=### 建表

- 学生表

```mysql
CREATE TABLE `Student`(
`s_id` VARCHAR(20),
`s_name` VARCHAR(20) NOT NULL DEFAULT '',
`s_birth` VARCHAR(20) NOT NULL DEFAULT '',
`s_sex` VARCHAR(10) NOT NULL DEFAULT '',
PRIMARY KEY(`s_id`)
);
```

- 课程表

```mysql
CREATE TABLE `Course`(
`c_id`  VARCHAR(20),
`c_name` VARCHAR(20) NOT NULL DEFAULT '',
`t_id` VARCHAR(20) NOT NULL,
PRIMARY KEY(`c_id`)
);
```

- 教师表

```mysql
CREATE TABLE `Teacher`(
`t_id` VARCHAR(20),
`t_name` VARCHAR(20) NOT NULL DEFAULT '',
PRIMARY KEY(`t_id`)
);
```

- 成绩表

```mysql
CREATE TABLE `Score`(
`s_id` VARCHAR(20),
`c_id`  VARCHAR(20),
`s_score` INT(3),
PRIMARY KEY(`s_id`,`c_id`)
);
```

- 插入学生表测试数据

```mysql
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');
```

- 课程表测试数据

```mysql
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');
```

- 教师表测试数据

```mysql
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');
```

- 成绩表测试数据

```mysql
insert into Score values('01' , '01' , 80);
insert into Score values('01' , '02' , 90);
insert into Score values('01' , '03' , 99);
insert into Score values('02' , '01' , 70);
insert into Score values('02' , '02' , 60);
insert into Score values('02' , '03' , 80);
insert into Score values('03' , '01' , 80);
insert into Score values('03' , '02' , 80);
insert into Score values('03' , '03' , 80);
insert into Score values('04' , '01' , 50);
insert into Score values('04' , '02' , 30);
insert into Score values('04' , '03' , 20);
insert into Score values('05' , '01' , 76);
insert into Score values('05' , '02' , 87);
insert into Score values('06' , '01' , 31);
insert into Score values('06' , '03' , 34);
insert into Score values('07' , '02' , 89);
insert into Score values('07' , '03' , 98);
```

### 练习题和sql语句

1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数

```mysql
select a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c 
where a.s_id=b.s_id 
and a.s_id=c.s_id 
and b.c_id='01' 
and c.c_id='02' 
and b.s_score>c.s_score
```

2. 查询"01"课程比"02"课程成绩低的学生的信息及课程分数

```mysql
select a.* ,b.s_score as 01_score,c.s_score as 02_score from 
student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL 
join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score
```

3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score >=60;
```

4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)

```mysql
select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from 
student b 
left join score a on b.s_id = a.s_id
GROUP BY b.s_id,b.s_name HAVING avg_score <60
union
select a.s_id,a.s_name,0 as avg_score from 
student a 
where a.s_id not in (
select distinct s_id from score);
```

5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩

```mysql
select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from 
student a 
left join score b on a.s_id=b.s_id
GROUP BY a.s_id,a.s_name;
```

6. 查询"李"姓老师的数量 

```mysql
select count(t_id) from teacher where t_name like '李%';
```

7. 查询学过"张三"老师授课的同学的信息 

```mysql
select a.* from 
student a 
join score b on a.s_id=b.s_id where b.c_id in(
select c_id from course where t_id =(
select t_id from teacher where t_name = '张三'));
```



8. 查询没学过"张三"老师授课的同学的信息 

```mysql
select * from 
    student c 
    where c.s_id not in(
        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(
        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));
```



9. 查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a,score b,score c 
where a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';
```

10. 查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息

```mysql
select a.* from 
student a 
where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')
```

11. 查询没有学全所有课程的同学的信息 

```mysql
--@wendiepei的写法
select s.* from student s 
left join Score s1 on s1.s_id=s.s_id
group by s.s_id having count(s1.c_id)<(select count(*) from course)	
--@k1051785839的写法
select *
from student
where s_id not in(
select s_id from score t1  
group by s_id having count(*) =(select count(distinct c_id)  from course)) 
```

12. 查询至少有一门课与学号为"01"的同学所学相同的同学的信息 

```mysql
select * from student where s_id in(
select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')
);
```

13. 查询和"01"号的同学学习的课程完全相同的其他同学的信息 

```mysql
--@ouyang_1993的写法
SELECT
 Student.*
FROM
 Student
WHERE
 s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (
    #下面的语句是找到'01'同学学习的课程数
    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'
   )
 )
AND s_id NOT IN (
 #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们
 SELECT s_id FROM Score
 WHERE c_id IN(
   #下面的语句是找到‘01’同学没学过的课程
   SELECT DISTINCT c_id FROM Score
   WHERE c_id NOT IN (
     #下面的语句是找出‘01’同学学习的课程
     SELECT c_id FROM Score WHERE s_id = '01'
    )
  ) GROUP BY s_id
) #下面的条件是排除01同学
AND s_id NOT IN ('01')
--@k1051785839的写法
SELECT
 t3.*
FROM
 (
  SELECT
   s_id,
   group_concat(c_id ORDER BY c_id) group1
  FROM
   score
  WHERE
   s_id &lt;> '01'
  GROUP BY
   s_id
 ) t1
INNER JOIN (
 SELECT
  group_concat(c_id ORDER BY c_id) group2
 FROM
  score
 WHERE
  s_id = '01'
 GROUP BY
  s_id
) t2 ON t1.group1 = t2.group2
INNER JOIN student t3 ON t1.s_id = t3.s_id
```

14. 查询没学过"张三"老师讲授的任一门课程的学生姓名 

```mysql
select a.s_name from student a where a.s_id not in (
select s_id from score where c_id = 
(select c_id from course where t_id =(
select t_id from teacher where t_name = '张三')));
```

15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 

```mysql
select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from 
student a 
left join score b on a.s_id = b.s_id
where a.s_id in(
select s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)
GROUP BY a.s_id,a.s_name
```

16. 检索"01"课程分数小于60，按分数降序排列的学生信息

```mysql
select a.*,b.c_id,b.s_score from 
student a,score b 
where a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;
```

17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

```mysql
select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,
(select s_score from score where s_id=a.s_id and c_id='02') as 数学,
(select s_score from score where s_id=a.s_id and c_id='03') as 英语,
round(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;
--@喝完这杯还有一箱的写法
SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, 
MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, 
MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, 
avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC
```

18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

```mysql
select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),
ROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,
ROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,
ROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,
ROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率
from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name
```

19. 按各科成绩进行排序，并显示排名

```mysql
-- mysql没有rank函数
select a.s_id,a.c_id,
        @i:=@i +1 as i保留排名,
        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,
        @score:=a.s_score as score
    from (
        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC
    )a,(select @k:=0,@i:=0,@score:=0)s
--@k1051785839的写法
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank
                FROM score t1 where t1.c_id='01'
                order by t1.s_score desc) t1)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank
                FROM score t1 where t1.c_id='02'
                order by t1.s_score desc) t2)
union
(select * from (select 
                t1.c_id,
                t1.s_score,
                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank
                FROM score t1 where t1.c_id='03'
                order by t1.s_score desc) t3)
```

20. 查询学生的总成绩并进行排名

```mysql
select a.s_id,
@i:=@i+1 as i,
@k:=(case when @score=a.sum_score then @k else @i end) as rank,
@score:=a.sum_score as score
from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,
(select @k:=0,@i:=0,@score:=0)s
```

21. 查询不同老师所教不同课程平均分从高到低显示 

```mysql
select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a
left join score b on a.c_id=b.c_id 
left join teacher c on a.t_id=c.t_id
GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;
```

22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩

```mysql
select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  
ORDER BY a.s_score DESC  
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3
            UNION
            select d.*,c.排名,c.s_score,c.c_id from (
                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' 
ORDER BY a.s_score DESC
            )c
            left join student d on c.s_id=d.s_id
            where 排名 BETWEEN 2 AND 3;
```

23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比

```mysql
select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a
left join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,
ROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)b on a.c_id=b.c_id
left join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,
ROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)c on a.c_id=c.c_id
left join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,
ROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)d on a.c_id=d.c_id
left join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,
ROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比
from score GROUP BY c_id)e on a.c_id=e.c_id
left join course f on a.c_id = f.c_id
```

24. 查询学生平均成绩及其名次 

```mysql
select a.s_id,
@i:=@i+1 as '不保留空缺排名',
@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',
@avg_score:=avg_s as '平均分'
from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;
```

25. 查询各科成绩前三名的记录

```mysql
-- 1.选出b表比a表成绩大的所有组
-- 2.选出比当前id成绩大的 小于三个的
select a.s_id,a.c_id,a.s_score from score a 
left join score b on a.c_id = b.c_id and a.s_score<b.s_score
group by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3
ORDER BY a.c_id,a.s_score DESC
```

26. 查询每门课程被选修的学生数 

```mysql
select c_id,count(s_id) from score a GROUP BY c_id
```

27. 查询出只有两门课程的全部学生的学号和姓名 

```mysql
select s_id,s_name from student where s_id in(
select s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);
```

28. 查询男生、女生人数 

```mysql
select s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex
```

29. 查询名字中含有"风"字的学生信息

```mysql
select * from student where s_name like '%风%';
```

30. 查询同名同性学生名单，并统计同名人数 		

```mysql
select a.s_name,a.s_sex,count(*) from student a  JOIN 
student b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex
GROUP BY a.s_name,a.s_sex
```

31. 查询1990年出生的学生名单

```mysql
select s_name from student where s_birth like '1990%'
```

32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 

```mysql
select c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC
```

33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 

```mysql
select a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a
left join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85
```

34. 查询课程名称为"数学"，且分数低于60的学生姓名和分数 	

```mysql
select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(
select c_id from course where c_name ='数学') and b.s_score<60
```

35. 查询所有学生的课程及分数情况；

```mysql
select a.s_id,a.s_name,
SUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',
SUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',
SUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',
SUM(b.s_score) as  '总分'
from student a left join score b on a.s_id = b.s_id 
left join course c on b.c_id = c.c_id 
GROUP BY a.s_id,a.s_name
```

36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； 

```mysql
select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id
left join student a on a.s_id=c.s_id where c.s_score>=70
```

37. 查询不及格的课程

```mysql
select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id
where a.s_score<60 
```

38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； 

```mysql
select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id
where a.c_id = '01'and a.s_score>80
```

39. 求每门课程的学生人数 

```mysql
select count(*) from score GROUP BY c_id;
```

40. 查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩

```mysql
-- 查询老师id	
select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'
-- 查询最高分（可能有相同分数）
select MAX(s_score) from score where c_id='02'
-- 查询信息
select a.*,b.s_score,b.c_id,c.c_name from student a
LEFT JOIN score b on a.s_id = b.s_id
LEFT JOIN course c on b.c_id=c.c_id
where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')
and b.s_score in (select MAX(s_score) from score where c_id='02')
```

41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 

```mysql
select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score
```

42. 查询每门功成绩最好的前两名 

```mysql
select a.s_id,a.c_id,a.s_score from score a
where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id
```

43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  

```mysql
select c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC
```

44. 检索至少选修两门课程的学生学号 

```mysql
select s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2
```

45. 查询选修了全部课程的学生信息 

```mysql
select * from student where s_id in(		
select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))
```

46. 查询各学生的年龄

```mysql
# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - 
(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age
from student;
```

47. 查询本周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)
select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
	
select WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))
```

48. 查询下周过生日的学生

```mysql
select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)
```

49. 查询本月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)
```

50. 查询下月过生日的学生

```mysql
select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)
```

, summary=MySQL练习题, cover=null, views=39, commentCount=0, likeCount=0, isTop=false, isRecommend=true, createTime=2020-04-19T15:51:17, updateTime=2020-04-19T21:31:59, isEnable=true, isDeleted=null, version=null, category={id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=3, name=mysql, isEnable=null, isDeleted=null}]}, {id=1251776651612700674, author=xing, title=springboot jackson, content= ```java
@Override
    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);
        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));
    }

    private static final String DATE_FORMAT = "yyyy-MM-dd";
    private static final String DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";

    @Bean
    public ObjectMapper jacksonObjectMapperCustomization() {

        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()
                .simpleDateFormat(DATE_TIME_FORMAT)
                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))
                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));


        return builder.build();
    }

@Override
    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);
        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));
    }

    private static final String DATE_FORMAT = "yyyy-MM-dd";
    private static final String DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";

    @Bean
    public ObjectMapper jacksonObjectMapperCustomization() {

        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()
                .simpleDateFormat(DATE_TIME_FORMAT)
                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))
                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));


        return builder.build();
    }
```
, summary=jackson, cover=null, views=11, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=2020-04-19T15:36:25, updateTime=2020-04-20T15:22:20, isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1251750614375907330, author=213123, title=123123123, content=<p>tup</p>, summary=123123123, cover=http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=2020-04-19T13:52:57, updateTime=2020-04-19T20:15:29, isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251725884101074946, author=sdf, title=sdf, content=<p>sdfsdfsdf</p>, summary=sdf, cover=null, views=5, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=2020-04-19T12:14:41, updateTime=2020-04-20T15:28:47, isEnable=true, isDeleted=null, version=null, category={id=4, categoryName=其他, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}]}, {id=1251725190564519937, author=现在才VS真的非常, title=阿道夫啊实打实的, content=<p>阿三打撒</p>, summary=f 阿三打撒, cover=null, views=1, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=2020-04-19T12:11:56, updateTime=2020-04-20T12:03:53, isEnable=true, isDeleted=null, version=null, category={id=2, categoryName=微服务, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}, {id=1, author=1, title=mybatis plus 乐观锁测试时间, content=1, summary=1, cover=http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg, views=138, commentCount=23, likeCount=34, isTop=false, isRecommend=false, createTime=2020-03-23T15:55:15, updateTime=2020-04-20T15:24:06, isEnable=true, isDeleted=null, version=null, category={id=3, categoryName=数据库, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=1, name=spring, isEnable=null, isDeleted=null}, {id=2, name=java, isEnable=null, isDeleted=null}]}, {id=3, author=1, title=岁的法国士大夫, content=3123123123, summary=123124312414, cover=null, views=2, commentCount=0, likeCount=0, isTop=false, isRecommend=false, createTime=2019-06-17T23:48:04, updateTime=2020-04-17T23:48:04, isEnable=true, isDeleted=null, version=null, category={id=1, categoryName=测试, parentCategoryId=null, isEnable=null, isDeleted=null}, tagList=[{id=2, name=java, isEnable=null, isDeleted=null}]}], params={isEnable=true}, sortColumn=like_count)](String), 1(Integer), POST(String), 49(Long), {"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1149},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":39}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}(String), 127.0.0.1(String)
2020-04-22 22:14:54.304 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysLogMapper.insert.debug:143 -<==    Updates: 1
2020-04-22 22:39:32.739 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 22:39:32.740 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-22 22:39:32.747 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-22 22:39:32.750 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-22 22:39:32.751 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-22 22:39:32.755 DEBUG [http-nio-8088-exec-4]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-22 23:01:30.716 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 23:01:37.564 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 23:01:37.565 DEBUG [main]cn.codexing.blog.common.filter.JWTLoginFilter.init:242 -Filter 'jwtLoginFilter' configured for use
2020-04-22 23:01:37.565 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 23:01:37.565 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 23:01:45.821 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 23:01:45.835 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 23:01:45.845 DEBUG [http-nio-8088-exec-1]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 23:02:13.991 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 23:02:13.992 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-22 23:02:13.997 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-22 23:02:13.998 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-22 23:02:14.000 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-22 23:02:14.004 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-22 23:03:01.238 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 23:03:05.278 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 23:03:05.279 DEBUG [main]cn.codexing.blog.common.filter.JWTLoginFilter.init:242 -Filter 'jwtLoginFilter' configured for use
2020-04-22 23:03:05.280 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 23:03:05.281 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 23:03:12.366 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 23:03:12.380 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: admin(String)
2020-04-22 23:03:12.394 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 1
2020-04-22 23:03:12.396 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==>  Preparing: SELECT r.id, r.NAME FROM sys_role r INNER JOIN sys_user_role sur ON sur.role_id = r.id WHERE sur.user_id = ? 
2020-04-22 23:03:12.397 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -==> Parameters: 1(Integer)
2020-04-22 23:03:12.399 DEBUG [http-nio-8088-exec-2]cn.codexing.blog.mapper.SysRoleMapper.listRoleByUserId.debug:143 -<==      Total: 2
2020-04-22 23:03:22.737 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 23:03:22.739 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 23:03:22.740 DEBUG [http-nio-8088-exec-3]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 23:03:54.870 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==>  Preparing: select id,username,password from sys_user where username=? 
2020-04-22 23:03:54.871 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -==> Parameters: (String)
2020-04-22 23:03:54.872 DEBUG [http-nio-8088-exec-5]cn.codexing.blog.mapper.SysUserMapper.getByUsername.debug:143 -<==      Total: 0
2020-04-22 23:06:23.058 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 23:06:27.199 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 23:06:27.199 DEBUG [main]cn.codexing.blog.common.filter.JWTLoginFilter.init:242 -Filter 'jwtLoginFilter' configured for use
2020-04-22 23:06:27.200 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 23:06:27.200 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 23:07:03.361 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 23:07:06.999 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 23:07:07.000 DEBUG [main]cn.codexing.blog.common.filter.JWTLoginFilter.init:242 -Filter 'jwtLoginFilter' configured for use
2020-04-22 23:07:07.000 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 23:07:07.001 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
2020-04-22 23:08:18.185 DEBUG [main]cn.codexing.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.5.RELEASE, Spring v5.2.4.RELEASE
2020-04-22 23:08:21.907 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'jwtAuthenticationFilter' configured for use
2020-04-22 23:08:21.907 DEBUG [main]cn.codexing.blog.common.filter.JWTLoginFilter.init:242 -Filter 'jwtLoginFilter' configured for use
2020-04-22 23:08:21.908 DEBUG [main]cn.codexing.blog.common.filter.ImageCodeFilter.init:242 -Filter 'imageCodeFilter' configured for use
2020-04-22 23:08:21.908 DEBUG [main]cn.codexing.blog.common.filter.JwtAuthenticationFilter.init:242 -Filter 'authenticationTokenFilterBean' configured for use
