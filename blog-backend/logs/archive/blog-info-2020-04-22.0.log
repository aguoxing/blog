2020-04-22 13:12:29.216 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 13:12:29.934 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 7260 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 13:12:29.937 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 13:12:32.005 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 13:12:32.009 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 13:12:32.060 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 33ms. Found 0 Redis repository interfaces.
2020-04-22 13:12:32.550 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:12:32.630 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:12:32.637 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@58ba5b30' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:12:32.640 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:12:32.654 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:12:32.667 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$129b3584] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:12:33.201 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 13:12:33.210 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 13:12:33.211 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 13:12:33.211 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 13:12:33.313 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 13:12:33.313 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 3321 ms
2020-04-22 13:12:37.319 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 13:12:37.594 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@24aedcc5, org.springframework.security.web.context.SecurityContextPersistenceFilter@4fa0ee7e, org.springframework.security.web.header.HeaderWriterFilter@3739f3c9, org.springframework.security.web.authentication.logout.LogoutFilter@6cbdd1c5, cn.codexing.blog.common.filter.JwtAuthenticationFilter@26457986, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@636dbfe7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@141bb6b8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6335f04a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@74ebd159, org.springframework.security.web.session.SessionManagementFilter@40fe8fd5, org.springframework.security.web.access.ExceptionTranslationFilter@2a120c88, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@18b40fe6]
2020-04-22 13:12:38.287 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 13:12:38.305 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 13:12:38.334 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 13:12:38.522 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 13:12:38.559 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 13:12:38.568 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 13:12:38.573 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 13:12:38.586 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 13:12:38.600 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 13:12:38.610 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 13:12:38.685 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 13:12:38.711 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 13:12:38.714 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 9.36 seconds (JVM running for 12.577)
2020-04-22 13:12:56.110 INFO  [http-nio-8088-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 13:12:56.110 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 13:12:56.178 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 68 ms
2020-04-22 13:19:17.918 INFO  [http-nio-8088-exec-5]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-22 13:19:18.459 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 13:22:58.824 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 13:23:06.115 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 13:24:16.644 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 13:25:53.881 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 13:26:18.418 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 13:26:26.411 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 13:28:24.773 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 13:29:36.427 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 13:39:30.697 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 13:39:31.341 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 7672 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 13:39:31.342 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 13:39:33.256 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 13:39:33.258 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 13:39:33.302 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 31ms. Found 0 Redis repository interfaces.
2020-04-22 13:39:33.649 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:39:33.707 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:39:33.713 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@5634d0f4' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:39:33.715 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:39:33.727 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:39:33.739 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$35534b53] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:39:34.257 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 13:39:34.266 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 13:39:34.267 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 13:39:34.268 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 13:39:34.365 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 13:39:34.365 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2974 ms
2020-04-22 13:39:37.381 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 13:39:37.784 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@15186ce0, org.springframework.security.web.context.SecurityContextPersistenceFilter@6e73974, org.springframework.security.web.header.HeaderWriterFilter@6b126187, org.springframework.security.web.authentication.logout.LogoutFilter@41d20f06, cn.codexing.blog.common.filter.JwtAuthenticationFilter@685f5d0d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2dc21583, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@44eb2452, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5a48d186, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@745926c3, org.springframework.security.web.session.SessionManagementFilter@5cffec7, org.springframework.security.web.access.ExceptionTranslationFilter@3193e21d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@67fac095]
2020-04-22 13:39:38.726 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 13:39:38.755 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 13:39:38.806 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 13:39:39.033 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 13:39:39.080 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 13:39:39.089 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 13:39:39.098 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 13:39:39.117 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 13:39:39.132 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 13:39:39.142 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 13:39:39.191 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 13:39:39.218 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 13:39:39.222 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 8.445 seconds (JVM running for 9.749)
2020-04-22 13:39:51.603 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 13:39:51.604 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 13:39:51.615 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 11 ms
2020-04-22 13:39:52.328 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-22 13:40:30.294 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 13:47:38.922 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 13:47:39.679 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 12304 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 13:47:39.680 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 13:47:41.371 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 13:47:41.373 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 13:47:41.420 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 33ms. Found 0 Redis repository interfaces.
2020-04-22 13:47:41.780 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:47:41.836 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:47:41.842 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@1e253c9d' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:47:41.845 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:47:41.857 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:47:41.868 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$c7108bd8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 13:47:42.342 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 13:47:42.349 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 13:47:42.350 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 13:47:42.351 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 13:47:42.442 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 13:47:42.443 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2704 ms
2020-04-22 13:47:45.129 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 13:47:45.289 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@30798137, org.springframework.security.web.context.SecurityContextPersistenceFilter@395281c2, org.springframework.security.web.header.HeaderWriterFilter@247bbfba, org.springframework.security.web.authentication.logout.LogoutFilter@5d84e363, cn.codexing.blog.common.filter.JwtAuthenticationFilter@6af609ea, cn.codexing.blog.common.filter.JWTLoginFilter@455da438, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3e753289, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@14485747, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@60652518, org.springframework.security.web.session.SessionManagementFilter@4eb63dc8, org.springframework.security.web.access.ExceptionTranslationFilter@6dcf7b6a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@194b9783]
2020-04-22 13:47:45.888 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 13:47:45.904 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 13:47:45.935 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 13:47:46.157 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 13:47:46.191 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 13:47:46.199 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 13:47:46.209 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 13:47:46.227 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 13:47:46.245 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 13:47:46.253 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 13:47:46.292 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 13:47:46.316 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 13:47:46.319 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 7.327 seconds (JVM running for 8.532)
2020-04-22 13:47:52.577 INFO  [http-nio-8088-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 13:47:52.577 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 13:47:52.592 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 13 ms
2020-04-22 15:09:27.596 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 15:09:28.455 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 2056 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 15:09:28.457 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 15:09:29.941 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 15:09:29.943 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 15:09:29.987 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 31ms. Found 0 Redis repository interfaces.
2020-04-22 15:09:30.335 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 15:09:30.407 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 15:09:30.412 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@671d1157' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 15:09:30.414 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 15:09:30.425 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 15:09:30.437 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$ad0137b4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 15:09:30.896 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 15:09:30.904 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 15:09:30.905 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 15:09:30.906 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 15:09:31.091 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 15:09:31.091 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2558 ms
2020-04-22 15:09:36.701 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 15:09:37.078 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@118cbded, org.springframework.security.web.context.SecurityContextPersistenceFilter@7ec13984, org.springframework.security.web.header.HeaderWriterFilter@7e8f23ad, org.springframework.security.web.authentication.logout.LogoutFilter@7df4709e, cn.codexing.blog.common.filter.JwtAuthenticationFilter@4a864d4d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1752e45c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@59fea5f5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71b0289b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4cc26df, org.springframework.security.web.session.SessionManagementFilter@5d221b20, org.springframework.security.web.access.ExceptionTranslationFilter@38022758, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@10b67f54]
2020-04-22 15:09:38.134 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 15:09:38.164 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 15:09:38.210 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 15:09:38.594 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 15:09:38.650 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 15:09:38.665 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 15:09:38.676 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 15:09:38.695 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 15:09:38.711 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 15:09:38.739 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 15:09:38.804 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 15:09:38.843 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 15:09:38.849 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 11.144 seconds (JVM running for 12.736)
2020-04-22 15:11:35.489 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 15:11:35.489 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 15:11:35.506 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 16 ms
2020-04-22 15:11:35.683 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-22 15:11:36.185 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 15:15:20.571 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 15:17:41.854 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:33 -用户为====>admin登录成功
2020-04-22 15:17:42.348 INFO  [http-nio-8088-exec-5]io.lettuce.core.EpollProvider.<clinit>:68 -Starting without optional epoll library
2020-04-22 15:17:42.350 INFO  [http-nio-8088-exec-5]io.lettuce.core.KqueueProvider.<clinit>:70 -Starting without optional kqueue library
2020-04-22 15:17:54.009 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 15:18:38.303 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:33 -用户为====>admin登录成功
2020-04-22 20:08:43.361 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 20:10:22.567 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 20:10:39.005 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 20:11:30.599 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 20:12:19.007 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 20:12:59.031 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 20:14:17.951 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 20:15:07.062 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 20:20:30.794 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 20:21:53.487 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:18:16.435 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 21:18:17.072 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 14980 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 21:18:17.073 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 21:18:18.849 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 21:18:18.851 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 21:18:18.898 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 33ms. Found 0 Redis repository interfaces.
2020-04-22 21:18:19.264 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:18:19.331 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:18:19.338 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@5ea4300e' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:18:19.339 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:18:19.354 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:18:19.365 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$fc7997ad] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:18:19.914 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 21:18:19.922 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 21:18:19.922 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 21:18:19.923 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 21:18:20.024 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 21:18:20.024 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2897 ms
2020-04-22 21:18:23.206 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 21:18:23.405 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4005e485, org.springframework.security.web.context.SecurityContextPersistenceFilter@4fa0ee7e, org.springframework.security.web.header.HeaderWriterFilter@3739f3c9, org.springframework.web.filter.CorsFilter@5f5c187d, org.springframework.security.web.authentication.logout.LogoutFilter@6cbdd1c5, cn.codexing.blog.common.filter.JwtAuthenticationFilter@f882465, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@59313495, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@141bb6b8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6335f04a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@464400b3, org.springframework.security.web.session.SessionManagementFilter@40fe8fd5, org.springframework.security.web.access.ExceptionTranslationFilter@2a120c88, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2913ca3e]
2020-04-22 21:18:24.270 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 21:18:24.289 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 21:18:24.318 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 21:18:24.509 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 21:18:24.546 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 21:18:24.553 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 21:18:24.558 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 21:18:24.569 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 21:18:24.579 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 21:18:24.585 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 21:18:24.622 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 21:18:24.643 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 21:18:24.646 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 8.14 seconds (JVM running for 9.804)
2020-04-22 21:19:07.747 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 21:19:07.747 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 21:19:07.762 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 14 ms
2020-04-22 21:19:07.935 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-22 21:19:08.439 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:20:10.245 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:20:19.214 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 21:20:19.218 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:20:19.222 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:20:19.226 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 21:20:19.227 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:20:19.289 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-22 21:20:19.290 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 21:20:19.290 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:20:19.290 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-22 21:20:19.291 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:20:19.325 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：111
2020-04-22 21:20:19.375 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 21:20:19.520 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：231
2020-04-22 21:20:19.528 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1148},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-22 21:20:31.184 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-22 21:20:31.185 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:20:31.185 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:20:31.186 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-22 21:20:31.186 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:20:31.205 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：21
2020-04-22 21:20:31.211 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-22 21:20:35.702 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-22 21:20:35.702 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 21:20:35.703 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:20:35.703 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-22 21:20:35.703 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:20:35.780 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：78
2020-04-22 21:20:35.782 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1148},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-22 21:23:53.841 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 21:23:54.680 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 14512 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 21:23:54.715 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 21:23:55.849 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 21:23:55.852 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 21:23:55.900 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 36ms. Found 0 Redis repository interfaces.
2020-04-22 21:23:56.262 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:23:56.323 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:23:56.329 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4c58255' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:23:56.333 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:23:56.348 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:23:56.359 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$973fe443] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:23:56.804 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 21:23:56.811 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 21:23:56.812 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 21:23:56.812 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 21:23:56.911 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 21:23:56.912 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2103 ms
2020-04-22 21:23:59.689 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 21:23:59.857 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@734f8317, org.springframework.security.web.context.SecurityContextPersistenceFilter@2c9cafa5, org.springframework.security.web.header.HeaderWriterFilter@da34eb0, org.springframework.web.filter.CorsFilter@7dd3981e, org.springframework.security.web.authentication.logout.LogoutFilter@640a8f93, cn.codexing.blog.common.filter.JwtAuthenticationFilter@501957bf, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7198ab9a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7df4709e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3739f3c9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@59313495, org.springframework.security.web.session.SessionManagementFilter@2bf3ec4, org.springframework.security.web.access.ExceptionTranslationFilter@5d84e363, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1d7c9811]
2020-04-22 21:24:00.467 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 21:24:00.483 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 21:24:00.512 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 21:24:00.694 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 21:24:00.729 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 21:24:00.738 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 21:24:00.744 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 21:24:00.775 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 21:24:00.785 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 21:24:00.793 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 21:24:00.827 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 21:24:00.848 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 21:24:00.850 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.898 seconds (JVM running for 8.286)
2020-04-22 21:24:05.569 INFO  [http-nio-8088-exec-3]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 21:24:05.570 INFO  [http-nio-8088-exec-3]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 21:24:05.589 INFO  [http-nio-8088-exec-3]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 18 ms
2020-04-22 21:24:05.639 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 21:24:05.640 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:24:05.641 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:24:05.642 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 21:24:05.643 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:24:05.937 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-22 21:24:05.938 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:24:05.938 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:24:05.939 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-22 21:24:05.939 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:24:05.951 INFO  [http-nio-8088-exec-2]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-22 21:24:06.134 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：197
2020-04-22 21:24:06.149 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：510
2020-04-22 21:24:06.156 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-22 21:24:06.171 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 21:24:09.700 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 21:24:09.701 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:24:09.702 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-22 21:24:09.702 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:24:09.703 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:24:09.703 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 21:24:09.703 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:24:09.703 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:24:09.703 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-22 21:24:09.704 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:24:09.710 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-22 21:24:09.711 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-22 21:24:09.723 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：23
2020-04-22 21:24:09.724 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 21:24:17.427 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-22 21:24:17.428 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:24:17.428 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:24:17.429 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-22 21:24:17.429 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:24:17.443 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：16
2020-04-22 21:24:17.449 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-22 21:24:19.361 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-22 21:24:19.362 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:24:19.362 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:24:19.362 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-22 21:24:19.363 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:24:19.376 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：15
2020-04-22 21:24:19.377 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-22 21:25:29.865 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 21:25:30.651 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 14676 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 21:25:30.653 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 21:25:32.000 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 21:25:32.003 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 21:25:32.047 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 32ms. Found 0 Redis repository interfaces.
2020-04-22 21:25:32.378 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:25:32.435 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:25:32.442 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@50fb33a' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:25:32.443 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:25:32.454 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:25:32.465 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$c51d04fc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 21:25:32.939 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 21:25:32.947 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 21:25:32.948 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 21:25:32.948 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 21:25:33.041 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 21:25:33.042 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2308 ms
2020-04-22 21:25:36.012 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 21:25:36.255 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@249b54af, org.springframework.security.web.context.SecurityContextPersistenceFilter@44eb2452, org.springframework.security.web.header.HeaderWriterFilter@5cffec7, org.springframework.web.filter.CorsFilter@194911c1, org.springframework.security.web.authentication.logout.LogoutFilter@1573e8a5, cn.codexing.blog.common.filter.JwtAuthenticationFilter@580902cd, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5ad6f98e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@e07b4db, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2086d469, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4751cd3, org.springframework.security.web.session.SessionManagementFilter@6e73974, org.springframework.security.web.access.ExceptionTranslationFilter@6b126187, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@47c96f2c]
2020-04-22 21:25:36.906 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 21:25:36.946 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 21:25:36.974 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 21:25:37.144 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 21:25:37.180 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 21:25:37.189 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 21:25:37.194 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 21:25:37.205 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 21:25:37.216 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 21:25:37.222 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 21:25:37.258 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 21:25:37.280 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 21:25:37.283 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 7.338 seconds (JVM running for 8.571)
2020-04-22 21:25:41.500 INFO  [http-nio-8088-exec-3]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 21:25:41.501 INFO  [http-nio-8088-exec-3]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 21:25:41.512 INFO  [http-nio-8088-exec-3]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 11 ms
2020-04-22 21:25:41.559 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 21:25:41.559 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:25:41.560 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:41.562 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 21:25:41.562 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:41.870 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-22 21:25:41.870 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:25:41.871 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:41.871 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-22 21:25:41.872 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:41.891 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-22 21:25:41.891 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-22 21:25:41.891 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 21:25:41.892 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:41.891 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 21:25:41.892 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:41.892 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-22 21:25:41.892 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-22 21:25:41.893 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:41.893 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:41.922 INFO  [http-nio-8088-exec-3]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-22 21:25:42.172 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：302
2020-04-22 21:25:42.204 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：646
2020-04-22 21:25:42.226 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-22 21:25:42.241 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 21:25:42.270 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：380
2020-04-22 21:25:42.285 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-22 21:25:42.316 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：426
2020-04-22 21:25:42.326 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1148},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-22 21:25:45.502 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 21:25:45.503 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:25:45.504 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:45.505 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 21:25:45.504 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/details/4
2020-04-22 21:25:45.505 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:25:45.505 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:45.506 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:45.506 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.read
2020-04-22 21:25:45.507 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:45.521 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：18
2020-04-22 21:25:45.522 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 21:25:45.554 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：50
2020-04-22 21:25:45.555 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1148},"msg":"操作成功"}
2020-04-22 21:25:45.806 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-22 21:25:45.806 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 21:25:45.806 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:45.807 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-22 21:25:45.807 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:45.846 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：40
2020-04-22 21:25:45.847 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-22 21:25:50.059 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 21:25:50.059 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-22 21:25:50.060 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 21:25:50.063 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:50.064 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-22 21:25:50.065 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:50.066 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-22 21:25:50.066 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 21:25:50.067 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-22 21:25:50.067 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:50.067 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:25:50.067 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-22 21:25:50.067 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:50.067 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:50.068 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-22 21:25:50.068 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:50.060 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:25:50.075 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:50.075 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 21:25:50.075 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-22 21:25:50.076 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:50.076 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-22 21:25:50.105 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：46
2020-04-22 21:25:50.105 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 21:25:50.118 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：52
2020-04-22 21:25:50.119 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-22 21:25:50.170 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：111
2020-04-22 21:25:50.177 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1149},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-22 21:25:51.829 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-22 21:25:51.830 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 21:25:51.831 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:51.831 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-22 21:25:51.831 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:51.858 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：29
2020-04-22 21:25:51.862 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"1","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"2","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"2","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-22 21:25:53.346 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-22 21:25:53.346 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 21:25:53.347 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:53.347 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-22 21:25:53.347 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:53.359 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：13
2020-04-22 21:25:53.365 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-22 21:25:55.972 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-22 21:25:55.972 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 21:25:55.973 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 21:25:55.973 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-22 21:25:55.973 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 21:25:56.043 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：71
2020-04-22 21:25:56.044 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1149},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-22 21:26:46.911 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:27:57.788 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:28:51.808 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:29:32.227 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:30:06.946 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:30:40.051 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:32:08.669 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:32:42.613 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:46:27.792 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:46:36.685 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 21:47:20.560 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:00:56.789 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:01:06.008 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:01:08.065 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:03:59.117 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:04:05.411 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:05:22.784 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:05:36.466 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:11:14.451 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:11:24.128 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:12:31.802 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:12:39.146 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.handler.LoginFailureHandler.onAuthenticationFailure:24 -用户为====>null登录失败
2020-04-22 22:13:14.068 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 22:13:14.071 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:13:14.073 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:13:14.075 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 22:13:14.076 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:13:14.076 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-22 22:13:14.077 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 22:13:14.077 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:13:14.078 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-22 22:13:14.079 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:13:14.066 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-22 22:13:14.083 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:13:14.083 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-22 22:13:14.084 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 22:13:14.084 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:13:14.084 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:13:14.084 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-22 22:13:14.084 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-22 22:13:14.085 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:13:14.085 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:13:14.110 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：43
2020-04-22 22:13:14.117 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 22:13:14.120 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：54
2020-04-22 22:13:14.122 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-22 22:13:14.191 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：116
2020-04-22 22:13:14.195 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-22 22:13:14.238 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：155
2020-04-22 22:13:14.241 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1149},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-22 22:14:14.944 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 22:14:14.944 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:14.945 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-22 22:14:14.945 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:14.945 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 22:14:14.945 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 22:14:14.945 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:14.946 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:14.946 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-22 22:14:14.947 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:14.947 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/details/1251780392676016129
2020-04-22 22:14:14.948 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:14.949 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:14.949 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.read
2020-04-22 22:14:14.950 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:14.958 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-22 22:14:14.958 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 22:14:14.982 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：37
2020-04-22 22:14:14.983 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-22 22:14:14.993 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：46
2020-04-22 22:14:14.994 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":38},"msg":"操作成功"}
2020-04-22 22:14:31.948 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 22:14:31.949 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-04-22 22:14:31.951 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 22:14:31.952 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-22 22:14:31.953 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-22 22:14:31.953 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 22:14:31.953 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:31.953 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:31.954 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:31.954 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:31.953 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:31.954 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-22 22:14:31.954 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-22 22:14:31.954 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-04-22 22:14:31.954 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:31.954 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:31.954 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:31.954 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:31.955 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 22:14:31.956 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:31.960 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：8
2020-04-22 22:14:31.961 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-22 22:14:31.984 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：36
2020-04-22 22:14:31.985 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 22:14:31.986 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：33
2020-04-22 22:14:31.986 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-22 22:14:31.989 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：40
2020-04-22 22:14:31.990 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"1","categoryName":"测试","id":1,"isEnable":true},{"articleCount":"3","categoryName":"微服务","id":2,"isEnable":true},{"articleCount":"2","categoryName":"数据库","id":3,"isEnable":true},{"articleCount":"2","categoryName":"其他","id":4,"isEnable":true},{"articleCount":"0","categoryName":"转载","id":5,"isEnable":true}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-04-22 22:14:35.468 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-22 22:14:35.469 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:35.469 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:35.469 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-22 22:14:35.470 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:35.480 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-22 22:14:35.483 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-22 22:14:38.123 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-22 22:14:38.124 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:38.124 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:38.125 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-22 22:14:38.125 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:38.137 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：14
2020-04-22 22:14:38.138 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-22 22:14:45.047 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-22 22:14:45.048 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:45.049 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-22 22:14:45.049 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:45.049 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-22 22:14:45.049 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 22:14:45.050 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:45.050 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:45.050 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-22 22:14:45.051 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:45.064 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：17
2020-04-22 22:14:45.065 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-22 22:14:45.090 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：41
2020-04-22 22:14:45.091 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-22 22:14:45.315 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 22:14:45.315 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:45.315 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:45.316 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 22:14:45.316 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:45.324 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：9
2020-04-22 22:14:45.324 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 22:14:45.354 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-22 22:14:45.354 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:45.355 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:45.355 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-22 22:14:45.355 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:45.359 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：5
2020-04-22 22:14:45.359 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-22 22:14:46.292 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 22:14:46.292 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/details/1251752142763507713
2020-04-22 22:14:46.292 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:46.293 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:46.294 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 22:14:46.293 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:46.295 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:46.295 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:46.296 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.read
2020-04-22 22:14:46.296 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:46.305 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：13
2020-04-22 22:14:46.305 INFO  [http-nio-8088-exec-8]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 22:14:46.311 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：19
2020-04-22 22:14:46.312 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","id":"1251752142763507713","isEnable":false,"isRecommend":false,"isTop":false,"likeCount":123,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","updateTime":"2020-04-19 21:29:41","views":15},"msg":"操作成功"}
2020-04-22 22:14:46.596 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-22 22:14:46.597 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 22:14:46.597 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:46.597 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-22 22:14:46.598 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:46.625 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：29
2020-04-22 22:14:46.626 INFO  [http-nio-8088-exec-10]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-22 22:14:48.359 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-22 22:14:48.360 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:48.360 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:48.361 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-22 22:14:48.362 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:48.371 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-22 22:14:48.372 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-22 22:14:48.664 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/recommend/list
2020-04-22 22:14:48.664 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/link/list
2020-04-22 22:14:48.665 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:48.665 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:48.665 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-04-22 22:14:48.665 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:48.665 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:48.666 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 22:14:48.666 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listRecommend
2020-04-22 22:14:48.666 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.FriendLinkController.listLink
2020-04-22 22:14:48.666 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:48.666 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:48.666 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:48.666 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-04-22 22:14:48.667 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:48.671 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：7
2020-04-22 22:14:48.671 INFO  [http-nio-8088-exec-9]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"id":1,"isEnable":true,"nickname":"百度","url":"https://www.baidu.com"},{"id":2,"isEnable":true,"nickname":"codexing","url":"http://codexing.cn"},{"id":3,"isEnable":true,"nickname":"Google","url":"https://www.google.com"}],"msg":"操作成功"}
2020-04-22 22:14:48.676 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：12
2020-04-22 22:14:48.676 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"category":{"categoryName":"数据库","id":3},"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","likeCount":0,"tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题"}],"msg":"操作成功"}
2020-04-22 22:14:48.698 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：33
2020-04-22 22:14:48.699 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"3","id":1,"isEnable":true,"name":"spring"},{"articleCount":"4","id":2,"isEnable":true,"name":"java"},{"articleCount":"2","id":3,"isEnable":true,"name":"mysql"},{"articleCount":"0","id":4,"isEnable":true,"name":"javascript"},{"articleCount":"0","id":5,"isEnable":true,"name":"Python"},{"articleCount":"0","id":6,"isEnable":true,"name":"vue"},{"articleCount":"0","id":7,"isEnable":true,"name":"面试"}],"pageSize":20,"params":{},"totalCount":7,"totalPage":1},"msg":"操作成功"}
2020-04-22 22:14:52.270 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/archive/list
2020-04-22 22:14:52.270 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-04-22 22:14:52.270 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:52.271 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.listArchive
2020-04-22 22:14:52.271 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:52.280 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-04-22 22:14:52.280 INFO  [http-nio-8088-exec-6]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":[{"articles":[{"createTime":"2020-04-19 15:51:17","id":"1251780392676016129","title":"mysql练习题"},{"createTime":"2020-04-19 15:36:25","id":"1251776651612700674","title":"springboot jackson"},{"createTime":"2020-04-19 15:12:12","id":"1251770557519675394","title":"test"},{"createTime":"2020-04-19 13:59:01","id":"1251752142763507713","title":"离职半年了，老东家又发 offer，回不回？"},{"createTime":"2020-04-19 13:52:57","id":"1251750614375907330","title":"123123123"},{"createTime":"2020-04-19 12:15:26","id":"1251726075243896833","title":"sdfsdf"},{"createTime":"2020-04-19 12:14:41","id":"1251725884101074946","title":"sdf"},{"createTime":"2020-04-19 12:11:56","id":"1251725190564519937","title":"阿道夫啊实打实的"},{"createTime":"2020-04-19 11:36:19","id":"1251716229803122690","title":"上的撒旦发射点"},{"createTime":"2020-04-18 17:30:52","id":"6","title":"save"},{"createTime":"2020-04-18 11:00:05","id":"5","title":"12515215"},{"createTime":"2020-04-08 10:54:04","id":"2","title":"这是推荐阅读的文章哇"},{"createTime":"2020-03-23 15:55:15","id":"1","title":"mybatis plus 乐观锁测试时间"}],"year":"2020"},{"articles":[{"createTime":"2019-06-17 23:48:04","id":"3","title":"岁的法国士大夫"},{"createTime":"2019-06-14 12:21:50","id":"4","title":"这是置顶的文章哇"}],"year":"2019"}],"msg":"操作成功"}
2020-04-22 22:14:53.190 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-22 22:14:53.191 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 22:14:53.191 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:53.191 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-22 22:14:53.192 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:53.250 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：60
2020-04-22 22:14:53.250 INFO  [http-nio-8088-exec-7]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1149},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":39},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-22 22:14:54.243 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-04-22 22:14:54.244 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-04-22 22:14:54.244 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-04-22 22:14:54.244 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-04-22 22:14:54.245 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36
2020-04-22 22:14:54.292 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：49
2020-04-22 22:14:54.292 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":12,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","id":"4","isEnable":true,"isRecommend":false,"isTop":true,"likeCount":12,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","updateTime":"2020-04-20 15:19:20","views":1149},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":23,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","id":"1","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":34,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","updateTime":"2020-04-20 15:24:06","views":138},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"3123123123","createTime":"2019-06-17 23:48:04","id":"3","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","updateTime":"2020-04-17 23:48:04","views":2},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","id":"1251725190564519937","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","updateTime":"2020-04-20 12:03:53","views":1},{"author":"sdf","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"<p>sdfsdfsdf</p>","createTime":"2020-04-19 12:14:41","id":"1251725884101074946","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"sdf","tagList":[{"id":1,"name":"spring"}],"title":"sdf","updateTime":"2020-04-20 15:28:47","views":5},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","id":"1251750614375907330","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","updateTime":"2020-04-19 20:15:29","views":5},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","id":"1251776651612700674","isEnable":true,"isRecommend":false,"isTop":false,"likeCount":0,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","updateTime":"2020-04-20 15:22:20","views":11},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","id":"1251780392676016129","isEnable":true,"isRecommend":true,"isTop":false,"likeCount":0,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","updateTime":"2020-04-19 21:31:59","views":39}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-04-22 22:39:32.939 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:33 -用户为====>admin登录成功
2020-04-22 22:39:33.832 INFO  [http-nio-8088-exec-4]io.lettuce.core.EpollProvider.<clinit>:68 -Starting without optional epoll library
2020-04-22 22:39:33.836 INFO  [http-nio-8088-exec-4]io.lettuce.core.KqueueProvider.<clinit>:70 -Starting without optional kqueue library
2020-04-22 23:01:29.934 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 23:01:30.716 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 11392 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 23:01:30.717 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 23:01:32.792 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 23:01:32.795 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 23:01:32.859 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 40ms. Found 0 Redis repository interfaces.
2020-04-22 23:01:33.987 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:01:34.062 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:01:34.068 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@3c3c4a71' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:01:34.070 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:01:34.083 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:01:34.094 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$e9e511d5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:01:35.517 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 23:01:35.536 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 23:01:35.538 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 23:01:35.538 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 23:01:35.729 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 23:01:35.729 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 4955 ms
2020-04-22 23:01:38.918 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 23:01:39.091 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@464400b3, org.springframework.security.web.context.SecurityContextPersistenceFilter@640a8f93, org.springframework.security.web.header.HeaderWriterFilter@5aa6da2, org.springframework.web.filter.CorsFilter@58182b96, org.springframework.security.web.authentication.logout.LogoutFilter@72324965, cn.codexing.blog.common.filter.JwtAuthenticationFilter@32ea16b7, cn.codexing.blog.common.filter.JWTLoginFilter@118041c7, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1850f2da, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@74ce7fdf, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7686f701, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@37d6dddc, org.springframework.security.web.session.SessionManagementFilter@13908f9c, org.springframework.security.web.access.ExceptionTranslationFilter@1410d645, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@59313495]
2020-04-22 23:01:39.748 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 23:01:39.767 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 23:01:39.798 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 23:01:39.988 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 23:01:40.029 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 23:01:40.040 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 23:01:40.047 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 23:01:40.059 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 23:01:40.072 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 23:01:40.080 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 23:01:40.122 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 23:01:40.143 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 23:01:40.146 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 10.122 seconds (JVM running for 12.012)
2020-04-22 23:01:45.266 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 23:01:45.266 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 23:01:45.281 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 15 ms
2020-04-22 23:01:45.449 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-22 23:03:00.580 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 23:03:01.238 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 16120 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 23:03:01.239 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 23:03:02.606 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 23:03:02.608 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 23:03:02.653 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 32ms. Found 0 Redis repository interfaces.
2020-04-22 23:03:03.004 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:03:03.059 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:03:03.065 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@671d1157' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:03:03.067 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:03:03.079 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:03:03.091 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$a7580e74] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:03:03.580 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 23:03:03.589 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 23:03:03.590 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 23:03:03.591 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 23:03:03.688 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 23:03:03.688 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2351 ms
2020-04-22 23:03:07.131 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 23:03:07.287 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5350ab17, org.springframework.security.web.context.SecurityContextPersistenceFilter@20027c44, org.springframework.security.web.header.HeaderWriterFilter@71b0289b, org.springframework.web.filter.CorsFilter@984de01, org.springframework.security.web.authentication.logout.LogoutFilter@141bb6b8, cn.codexing.blog.common.filter.JwtAuthenticationFilter@25791d40, cn.codexing.blog.common.filter.JWTLoginFilter@6df4af5, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@27261190, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5d84e363, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2bfa17b0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@58cda03f, org.springframework.security.web.session.SessionManagementFilter@563172d3, org.springframework.security.web.access.ExceptionTranslationFilter@ae3c140, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4cc26df]
2020-04-22 23:03:07.895 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 23:03:07.910 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 23:03:07.938 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 23:03:08.122 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 23:03:08.160 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 23:03:08.168 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 23:03:08.175 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 23:03:08.188 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 23:03:08.200 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 23:03:08.208 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 23:03:08.261 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 23:03:08.289 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 23:03:08.294 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 7.637 seconds (JVM running for 9.045)
2020-04-22 23:03:11.822 INFO  [http-nio-8088-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 23:03:11.823 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 23:03:11.839 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 15 ms
2020-04-22 23:03:12.003 INFO  [http-nio-8088-exec-2]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-04-22 23:06:22.257 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 23:06:23.057 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 6108 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 23:06:23.058 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 23:06:24.665 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 23:06:24.667 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 23:06:24.711 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 32ms. Found 0 Redis repository interfaces.
2020-04-22 23:06:25.094 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:06:25.153 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:06:25.159 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@73844119' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:06:25.162 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:06:25.175 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:06:25.189 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$4c581e45] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:06:25.666 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 23:06:25.673 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 23:06:25.674 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 23:06:25.674 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 23:06:25.762 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 23:06:25.762 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2588 ms
2020-04-22 23:06:28.512 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 23:06:28.797 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1410d645, org.springframework.security.web.context.SecurityContextPersistenceFilter@243c4346, org.springframework.security.web.header.HeaderWriterFilter@a5e8260, org.springframework.web.filter.CorsFilter@4ccdacf5, org.springframework.security.web.authentication.logout.LogoutFilter@3e28dc96, cn.codexing.blog.common.filter.JwtAuthenticationFilter@374c40ba, cn.codexing.blog.common.filter.JWTLoginFilter@65eb3597, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@37ffe4f3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3dfe59d7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@218df7d6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5aa6da2, org.springframework.security.web.session.SessionManagementFilter@4a9bce99, org.springframework.security.web.access.ExceptionTranslationFilter@43a7203e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2a120c88]
2020-04-22 23:06:30.945 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 23:06:30.966 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 23:06:30.996 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 23:06:31.174 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 23:06:31.208 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 23:06:31.216 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 23:06:31.224 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 23:06:31.238 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 23:06:31.248 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 23:06:31.254 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 23:06:31.288 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 23:06:31.337 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 23:06:31.341 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 8.999 seconds (JVM running for 10.287)
2020-04-22 23:06:44.870 INFO  [http-nio-8088-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 23:06:44.871 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 23:06:44.883 INFO  [http-nio-8088-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 12 ms
2020-04-22 23:07:02.650 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 23:07:03.360 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 948 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 23:07:03.362 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 23:07:04.587 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 23:07:04.589 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 23:07:04.630 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 29ms. Found 0 Redis repository interfaces.
2020-04-22 23:07:04.958 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:07:05.013 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:07:05.020 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@d5d5353' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:07:05.022 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:07:05.037 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:07:05.047 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$5724b11e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:07:05.482 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 23:07:05.489 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 23:07:05.489 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 23:07:05.490 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 23:07:05.577 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 23:07:05.578 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2149 ms
2020-04-22 23:07:08.231 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 23:07:08.391 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5a13f1f7, org.springframework.security.web.context.SecurityContextPersistenceFilter@51132514, org.springframework.security.web.header.HeaderWriterFilter@218df7d6, org.springframework.web.filter.CorsFilter@5dae5a70, org.springframework.security.web.authentication.logout.LogoutFilter@184de357, cn.codexing.blog.common.filter.JwtAuthenticationFilter@26e0d39c, cn.codexing.blog.common.filter.JWTLoginFilter@74ba6ff5, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2f60cbf2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5c839677, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@44eb2452, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7686f701, org.springframework.security.web.session.SessionManagementFilter@55053f81, org.springframework.security.web.access.ExceptionTranslationFilter@1d1c37d5, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@329b331f]
2020-04-22 23:07:09.013 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 23:07:09.028 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 23:07:09.055 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 23:07:09.217 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 23:07:09.249 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 23:07:09.256 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 23:07:09.261 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 23:07:09.272 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 23:07:09.283 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 23:07:09.290 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 23:07:09.325 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 23:07:09.345 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 23:07:09.348 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.628 seconds (JVM running for 7.946)
2020-04-22 23:07:20.187 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 23:07:20.187 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 23:07:20.200 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 12 ms
2020-04-22 23:08:17.341 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-04-22 23:08:18.184 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-0EBHI2S with PID 15516 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-04-22 23:08:18.185 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-04-22 23:08:19.321 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-22 23:08:19.323 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-04-22 23:08:19.366 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 31ms. Found 0 Redis repository interfaces.
2020-04-22 23:08:19.742 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:08:19.800 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:08:19.806 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@315f09ef' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:08:19.809 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:08:19.824 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:08:19.835 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$348de5ed] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-22 23:08:20.287 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-04-22 23:08:20.294 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-04-22 23:08:20.295 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-04-22 23:08:20.296 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-04-22 23:08:20.389 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-04-22 23:08:20.389 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2126 ms
2020-04-22 23:08:23.188 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-04-22 23:08:23.347 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2109a691, org.springframework.security.web.context.SecurityContextPersistenceFilter@559fd5ec, org.springframework.security.web.header.HeaderWriterFilter@6c6379c, org.springframework.web.filter.CorsFilter@e521067, org.springframework.security.web.authentication.logout.LogoutFilter@631bc9f4, cn.codexing.blog.common.filter.JwtAuthenticationFilter@15d114ce, cn.codexing.blog.common.filter.JWTLoginFilter@5b0dbfb, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5fde1d64, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@708dfe10, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@202f054f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3bab95ca, org.springframework.security.web.session.SessionManagementFilter@2bfa17b0, org.springframework.security.web.access.ExceptionTranslationFilter@3b5da0b0, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1e471884]
2020-04-22 23:08:23.968 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-04-22 23:08:23.985 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-04-22 23:08:24.016 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-04-22 23:08:24.194 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-04-22 23:08:24.229 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-04-22 23:08:24.238 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-04-22 23:08:24.245 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-04-22 23:08:24.257 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-04-22 23:08:24.268 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-04-22 23:08:24.277 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-04-22 23:08:24.317 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-04-22 23:08:24.358 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-04-22 23:08:24.361 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 6.915 seconds (JVM running for 8.265)
2020-04-22 23:09:01.996 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-22 23:09:01.997 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-04-22 23:09:02.009 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 12 ms
