2020-05-15 10:38:01.407 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-05-15 10:38:02.392 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on GUOXING with PID 1860 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-05-15 10:38:02.395 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-05-15 10:38:05.115 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-15 10:38:05.119 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-15 10:38:05.179 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 44ms. Found 0 Redis repository interfaces.
2020-05-15 10:38:05.855 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:38:05.927 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:38:05.936 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6cf0a747' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:38:05.941 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:38:05.961 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:38:05.977 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$819dbc07] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:38:06.714 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-05-15 10:38:06.730 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-05-15 10:38:06.731 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-05-15 10:38:06.732 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-15 10:38:06.910 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-05-15 10:38:06.911 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 4405 ms
2020-05-15 10:38:11.078 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-15 10:38:11.368 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@12448de1, org.springframework.security.web.context.SecurityContextPersistenceFilter@4cc26df, org.springframework.security.web.header.HeaderWriterFilter@2c77344f, org.springframework.security.web.authentication.logout.LogoutFilter@18b40fe6, cn.codexing.blog.common.filter.JwtAuthenticationFilter@3db65c0d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5e158f33, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@f4f843f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@984de01, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2b35c7aa, org.springframework.security.web.session.SessionManagementFilter@297bd171, org.springframework.security.web.access.ExceptionTranslationFilter@40cf6254, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@601d295]
2020-05-15 10:38:12.323 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-05-15 10:38:12.348 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-05-15 10:38:12.407 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-05-15 10:38:12.994 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-05-15 10:38:13.153 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-05-15 10:38:13.183 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-05-15 10:38:13.219 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-05-15 10:38:13.314 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-05-15 10:38:13.350 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-05-15 10:38:13.376 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-05-15 10:38:13.651 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-05-15 10:38:13.858 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-05-15 10:38:13.889 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 12.371 seconds (JVM running for 14.45)
2020-05-15 10:42:16.095 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-05-15 10:42:16.782 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on GUOXING with PID 7832 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-05-15 10:42:16.808 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-05-15 10:42:19.750 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-15 10:42:19.756 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-15 10:42:19.825 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 48ms. Found 0 Redis repository interfaces.
2020-05-15 10:42:20.256 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:42:20.327 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:42:20.333 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@7e53339' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:42:20.335 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:42:20.348 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:42:20.361 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$ba86da2d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:42:22.208 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-05-15 10:42:22.219 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-05-15 10:42:22.220 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-05-15 10:42:22.221 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-15 10:42:22.339 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-05-15 10:42:22.340 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 5471 ms
2020-05-15 10:42:25.567 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-15 10:42:25.774 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@995ad50, org.springframework.security.web.context.SecurityContextPersistenceFilter@7757a37f, org.springframework.security.web.header.HeaderWriterFilter@5fde1d64, org.springframework.security.web.authentication.logout.LogoutFilter@455cbf18, cn.codexing.blog.common.filter.JwtAuthenticationFilter@8c43966, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@134d7ffa, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@e521067, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7198ab9a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6249a08d, org.springframework.security.web.session.SessionManagementFilter@984de01, org.springframework.security.web.access.ExceptionTranslationFilter@6e46891d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3b0ed98a]
2020-05-15 10:42:26.449 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-05-15 10:42:26.480 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-05-15 10:42:26.526 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-05-15 10:42:26.709 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-05-15 10:42:26.739 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-05-15 10:42:26.748 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-05-15 10:42:26.755 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-05-15 10:42:26.766 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-05-15 10:42:26.777 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-05-15 10:42:26.786 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-05-15 10:42:26.836 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-05-15 10:42:26.858 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-05-15 10:42:26.861 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 10.635 seconds (JVM running for 12.603)
2020-05-15 10:42:36.910 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-15 10:42:36.911 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-05-15 10:42:36.926 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 15 ms
2020-05-15 10:42:37.131 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
2020-05-15 10:42:37.713 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.handler.LoginSuccessHandler.onAuthenticationSuccess:35 -用户为====>admin登录成功
2020-05-15 10:42:38.194 INFO  [http-nio-8088-exec-1]io.lettuce.core.EpollProvider.<clinit>:68 -Starting without optional epoll library
2020-05-15 10:42:38.196 INFO  [http-nio-8088-exec-1]io.lettuce.core.KqueueProvider.<clinit>:70 -Starting without optional kqueue library
2020-05-15 10:42:39.947 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/info
2020-05-15 10:42:39.948 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-05-15 10:42:39.949 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-05-15 10:42:39.952 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.userInfo
2020-05-15 10:42:39.952 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
2020-05-15 10:42:39.957 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：11
2020-05-15 10:42:39.971 INFO  [http-nio-8088-exec-2]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"accountNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"},{"authority":"ROLE_ADMIN"}],"avatar":"http://cdn.codexing.cn/avatar","credentialsNonExpired":true,"enabled":true,"id":1,"password":"[HIDE]","username":"admin"},"msg":"操作成功"}
2020-05-15 10:42:40.926 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/tag/list
2020-05-15 10:42:40.927 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-05-15 10:42:40.927 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-05-15 10:42:40.928 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.TagController.getByPage
2020-05-15 10:42:40.929 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
2020-05-15 10:42:40.977 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/category/list
2020-05-15 10:42:40.978 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-05-15 10:42:40.978 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-05-15 10:42:40.979 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.CategoryController.getByPage
2020-05-15 10:42:40.979 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
2020-05-15 10:42:41.032 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：55
2020-05-15 10:42:41.039 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：113
2020-05-15 10:42:41.042 INFO  [http-nio-8088-exec-4]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"1","categoryName":"测试","enable":true,"id":1},{"articleCount":"3","categoryName":"微服务","enable":true,"id":2},{"articleCount":"2","categoryName":"数据库","enable":true,"id":3},{"articleCount":"1","categoryName":"其他","enable":true,"id":4},{"articleCount":"0","categoryName":"转载","enable":true,"id":5}],"pageSize":20,"params":{},"totalCount":5,"totalPage":1},"msg":"操作成功"}
2020-05-15 10:42:41.044 INFO  [http-nio-8088-exec-3]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"articleCount":"2","enable":true,"id":1,"name":"spring"},{"articleCount":"4","enable":true,"id":2,"name":"java"},{"articleCount":"2","enable":true,"id":3,"name":"mysql"},{"articleCount":"0","enable":true,"id":4,"name":"javascript"},{"articleCount":"0","enable":true,"id":5,"name":"Python"},{"articleCount":"0","enable":true,"id":6,"name":"vue"}],"pageSize":20,"params":{},"totalCount":6,"totalPage":1},"msg":"操作成功"}
2020-05-15 10:42:44.351 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/article/list
2020-05-15 10:42:44.352 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：POST
2020-05-15 10:42:44.353 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：127.0.0.1
2020-05-15 10:42:44.353 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.ArticleController.getByPage
2020-05-15 10:42:44.354 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
2020-05-15 10:42:44.441 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：90
2020-05-15 10:42:44.461 INFO  [http-nio-8088-exec-5]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"data":{"currPage":1,"list":[{"author":"3","category":{"categoryName":"其他","id":4},"commentCount":0,"content":"save","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2019-06-14 12:21:50","enable":true,"id":"4","likeCount":12,"recommend":false,"summary":"1","tagList":[{"id":3,"name":"mysql"}],"title":"这是置顶的文章哇","top":true,"updateTime":"2020-04-20 15:19:20","views":1173},{"author":"xing","category":{"categoryName":"数据库","id":3},"commentCount":1,"content":"### 建表\n\n- 学生表\n\n```mysql\nCREATE TABLE `Student`(\n`s_id` VARCHAR(20),\n`s_name` VARCHAR(20) NOT NULL DEFAULT '',\n`s_birth` VARCHAR(20) NOT NULL DEFAULT '',\n`s_sex` VARCHAR(10) NOT NULL DEFAULT '',\nPRIMARY KEY(`s_id`)\n);\n```\n\n- 课程表\n\n```mysql\nCREATE TABLE `Course`(\n`c_id`  VARCHAR(20),\n`c_name` VARCHAR(20) NOT NULL DEFAULT '',\n`t_id` VARCHAR(20) NOT NULL,\nPRIMARY KEY(`c_id`)\n);\n```\n\n- 教师表\n\n```mysql\nCREATE TABLE `Teacher`(\n`t_id` VARCHAR(20),\n`t_name` VARCHAR(20) NOT NULL DEFAULT '',\nPRIMARY KEY(`t_id`)\n);\n```\n\n- 成绩表\n\n```mysql\nCREATE TABLE `Score`(\n`s_id` VARCHAR(20),\n`c_id`  VARCHAR(20),\n`s_score` INT(3),\nPRIMARY KEY(`s_id`,`c_id`)\n);\n```\n\n- 插入学生表测试数据\n\n```mysql\ninsert into Student values('01' , '赵雷' , '1990-01-01' , '男');\ninsert into Student values('02' , '钱电' , '1990-12-21' , '男');\ninsert into Student values('03' , '孙风' , '1990-05-20' , '男');\ninsert into Student values('04' , '李云' , '1990-08-06' , '男');\ninsert into Student values('05' , '周梅' , '1991-12-01' , '女');\ninsert into Student values('06' , '吴兰' , '1992-03-01' , '女');\ninsert into Student values('07' , '郑竹' , '1989-07-01' , '女');\ninsert into Student values('08' , '王菊' , '1990-01-20' , '女');\n```\n\n- 课程表测试数据\n\n```mysql\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n- 教师表测试数据\n\n```mysql\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n- 成绩表测试数据\n\n```mysql\ninsert into Score values('01' , '01' , 80);\ninsert into Score values('01' , '02' , 90);\ninsert into Score values('01' , '03' , 99);\ninsert into Score values('02' , '01' , 70);\ninsert into Score values('02' , '02' , 60);\ninsert into Score values('02' , '03' , 80);\ninsert into Score values('03' , '01' , 80);\ninsert into Score values('03' , '02' , 80);\ninsert into Score values('03' , '03' , 80);\ninsert into Score values('04' , '01' , 50);\ninsert into Score values('04' , '02' , 30);\ninsert into Score values('04' , '03' , 20);\ninsert into Score values('05' , '01' , 76);\ninsert into Score values('05' , '02' , 87);\ninsert into Score values('06' , '01' , 31);\ninsert into Score values('06' , '03' , 34);\ninsert into Score values('07' , '02' , 89);\ninsert into Score values('07' , '03' , 98);\n```\n\n### 练习题和sql语句\n\n1. 查询\"01\"课程比\"02\"课程成绩高的学生的信息及课程分数\n\n```mysql\nselect a.*,b.s_score as 01_score,c.s_score as 02_score from student   a,score b,score c \nwhere a.s_id=b.s_id \nand a.s_id=c.s_id \nand b.c_id='01' \nand c.c_id='02' \nand b.s_score>c.s_score\n```\n\n2. 查询\"01\"课程比\"02\"课程成绩低的学生的信息及课程分数\n\n```mysql\nselect a.* ,b.s_score as 01_score,c.s_score as 02_score from \nstudent a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL \njoin score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score\n```\n\n3. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \njoin score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score >=60;\n```\n\n4. 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩(包括有成绩的和无成绩的)\n\n```mysql\nselect b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from \nstudent b \nleft join score a on b.s_id = a.s_id\nGROUP BY b.s_id,b.s_name HAVING avg_score <60\nunion\nselect a.s_id,a.s_name,0 as avg_score from \nstudent a \nwhere a.s_id not in (\nselect distinct s_id from score);\n```\n\n5. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩\n\n```mysql\nselect a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from \nstudent a \nleft join score b on a.s_id=b.s_id\nGROUP BY a.s_id,a.s_name;\n```\n\n6. 查询\"李\"姓老师的数量 \n\n```mysql\nselect count(t_id) from teacher where t_name like '李%';\n```\n\n7. 查询学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect a.* from \nstudent a \njoin score b on a.s_id=b.s_id where b.c_id in(\nselect c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三'));\n```\n\n\n\n8. 查询没学过\"张三\"老师授课的同学的信息 \n\n```mysql\nselect * from \n    student c \n    where c.s_id not in(\n        select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(\n        select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='张三'));\n```\n\n\n\n9. 查询学过编号为\"01\"并且也学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a,score b,score c \nwhere a.s_id = b.s_id  and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';\n```\n\n10. 查询学过编号为\"01\"但是没有学过编号为\"02\"的课程的同学的信息\n\n```mysql\nselect a.* from \nstudent a \nwhere a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')\n```\n\n11. 查询没有学全所有课程的同学的信息 \n\n```mysql\n--@wendiepei的写法\nselect s.* from student s \nleft join Score s1 on s1.s_id=s.s_id\ngroup by s.s_id having count(s1.c_id)<(select count(*) from course)\t\n--@k1051785839的写法\nselect *\nfrom student\nwhere s_id not in(\nselect s_id from score t1  \ngroup by s_id having count(*) =(select count(distinct c_id)  from course)) \n```\n\n12. 查询至少有一门课与学号为\"01\"的同学所学相同的同学的信息 \n\n```mysql\nselect * from student where s_id in(\nselect distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')\n);\n```\n\n13. 查询和\"01\"号的同学学习的课程完全相同的其他同学的信息 \n\n```mysql\n--@ouyang_1993的写法\nSELECT\n Student.*\nFROM\n Student\nWHERE\n s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (\n    #下面的语句是找到'01'同学学习的课程数\n    SELECT COUNT(c_id) FROM Score WHERE s_id = '01'\n   )\n )\nAND s_id NOT IN (\n #下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们\n SELECT s_id FROM Score\n WHERE c_id IN(\n   #下面的语句是找到‘01’同学没学过的课程\n   SELECT DISTINCT c_id FROM Score\n   WHERE c_id NOT IN (\n     #下面的语句是找出‘01’同学学习的课程\n     SELECT c_id FROM Score WHERE s_id = '01'\n    )\n  ) GROUP BY s_id\n) #下面的条件是排除01同学\nAND s_id NOT IN ('01')\n--@k1051785839的写法\nSELECT\n t3.*\nFROM\n (\n  SELECT\n   s_id,\n   group_concat(c_id ORDER BY c_id) group1\n  FROM\n   score\n  WHERE\n   s_id &lt;> '01'\n  GROUP BY\n   s_id\n ) t1\nINNER JOIN (\n SELECT\n  group_concat(c_id ORDER BY c_id) group2\n FROM\n  score\n WHERE\n  s_id = '01'\n GROUP BY\n  s_id\n) t2 ON t1.group1 = t2.group2\nINNER JOIN student t3 ON t1.s_id = t3.s_id\n```\n\n14. 查询没学过\"张三\"老师讲授的任一门课程的学生姓名 \n\n```mysql\nselect a.s_name from student a where a.s_id not in (\nselect s_id from score where c_id = \n(select c_id from course where t_id =(\nselect t_id from teacher where t_name = '张三')));\n```\n\n15. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 \n\n```mysql\nselect a.s_id,a.s_name,ROUND(AVG(b.s_score)) from \nstudent a \nleft join score b on a.s_id = b.s_id\nwhere a.s_id in(\nselect s_id from score where s_score<60 GROUP BY  s_id having count(1)>=2)\nGROUP BY a.s_id,a.s_name\n```\n\n16. 检索\"01\"课程分数小于60，按分数降序排列的学生信息\n\n```mysql\nselect a.*,b.c_id,b.s_score from \nstudent a,score b \nwhere a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;\n```\n\n17. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\n\n```mysql\nselect a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 语文,\n(select s_score from score where s_id=a.s_id and c_id='02') as 数学,\n(select s_score from score where s_id=a.s_id and c_id='03') as 英语,\nround(avg(s_score),2) as 平均分 from score a  GROUP BY a.s_id ORDER BY 平均分 DESC;\n--@喝完这杯还有一箱的写法\nSELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 语文, \nMAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 数学, \nMAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英语, \navg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC\n```\n\n18. 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\n    --及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90\n\n```mysql\nselect a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),\nROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,\nROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,\nROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优良率,\nROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 优秀率\nfrom score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name\n```\n\n19. 按各科成绩进行排序，并显示排名\n\n```mysql\n-- mysql没有rank函数\nselect a.s_id,a.c_id,\n        @i:=@i +1 as i保留排名,\n        @k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,\n        @score:=a.s_score as score\n    from (\n        select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC\n    )a,(select @k:=0,@i:=0,@score:=0)s\n--@k1051785839的写法\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank\n                FROM score t1 where t1.c_id='01'\n                order by t1.s_score desc) t1)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank\n                FROM score t1 where t1.c_id='02'\n                order by t1.s_score desc) t2)\nunion\n(select * from (select \n                t1.c_id,\n                t1.s_score,\n                (select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank\n                FROM score t1 where t1.c_id='03'\n                order by t1.s_score desc) t3)\n```\n\n20. 查询学生的总成绩并进行排名\n\n```mysql\nselect a.s_id,\n@i:=@i+1 as i,\n@k:=(case when @score=a.sum_score then @k else @i end) as rank,\n@score:=a.sum_score as score\nfrom (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,\n(select @k:=0,@i:=0,@score:=0)s\n```\n\n21. 查询不同老师所教不同课程平均分从高到低显示 \n\n```mysql\nselect a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a\nleft join score b on a.c_id=b.c_id \nleft join teacher c on a.t_id=c.t_id\nGROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;\n```\n\n22. 查询所有课程的成绩第2名到第3名的学生信息及该课程成绩\n\n```mysql\nselect d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'  \nORDER BY a.s_score DESC  \n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'  \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3\n            UNION\n            select d.*,c.排名,c.s_score,c.c_id from (\n                select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03' \nORDER BY a.s_score DESC\n            )c\n            left join student d on c.s_id=d.s_id\n            where 排名 BETWEEN 2 AND 3;\n```\n\n23. 统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比\n\n```mysql\nselect distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a\nleft join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,\nROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)b on a.c_id=b.c_id\nleft join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,\nROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)c on a.c_id=c.c_id\nleft join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,\nROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)d on a.c_id=d.c_id\nleft join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,\nROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比\nfrom score GROUP BY c_id)e on a.c_id=e.c_id\nleft join course f on a.c_id = f.c_id\n```\n\n24. 查询学生平均成绩及其名次 \n\n```mysql\nselect a.s_id,\n@i:=@i+1 as '不保留空缺排名',\n@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',\n@avg_score:=avg_s as '平均分'\nfrom (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;\n```\n\n25. 查询各科成绩前三名的记录\n\n```mysql\n-- 1.选出b表比a表成绩大的所有组\n-- 2.选出比当前id成绩大的 小于三个的\nselect a.s_id,a.c_id,a.s_score from score a \nleft join score b on a.c_id = b.c_id and a.s_score<b.s_score\ngroup by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3\nORDER BY a.c_id,a.s_score DESC\n```\n\n26. 查询每门课程被选修的学生数 \n\n```mysql\nselect c_id,count(s_id) from score a GROUP BY c_id\n```\n\n27. 查询出只有两门课程的全部学生的学号和姓名 \n\n```mysql\nselect s_id,s_name from student where s_id in(\nselect s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);\n```\n\n28. 查询男生、女生人数 \n\n```mysql\nselect s_sex,COUNT(s_sex) as 人数  from student GROUP BY s_sex\n```\n\n29. 查询名字中含有\"风\"字的学生信息\n\n```mysql\nselect * from student where s_name like '%风%';\n```\n\n30. 查询同名同性学生名单，并统计同名人数 \t\t\n\n```mysql\nselect a.s_name,a.s_sex,count(*) from student a  JOIN \nstudent b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex\nGROUP BY a.s_name,a.s_sex\n```\n\n31. 查询1990年出生的学生名单\n\n```mysql\nselect s_name from student where s_birth like '1990%'\n```\n\n32. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 \n\n```mysql\nselect c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC\n```\n\n33. 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 \n\n```mysql\nselect a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a\nleft join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85\n```\n\n34. 查询课程名称为\"数学\"，且分数低于60的学生姓名和分数 \t\n\n```mysql\nselect a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(\nselect c_id from course where c_name ='数学') and b.s_score<60\n```\n\n35. 查询所有学生的课程及分数情况；\n\n```mysql\nselect a.s_id,a.s_name,\nSUM(case c.c_name when '语文' then b.s_score else 0 end) as '语文',\nSUM(case c.c_name when '数学' then b.s_score else 0 end) as '数学',\nSUM(case c.c_name when '英语' then b.s_score else 0 end) as '英语',\nSUM(b.s_score) as  '总分'\nfrom student a left join score b on a.s_id = b.s_id \nleft join course c on b.c_id = c.c_id \nGROUP BY a.s_id,a.s_name\n```\n\n36. 查询任何一门课程成绩在70分以上的姓名、课程名称和分数； \n\n```mysql\nselect a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id\nleft join student a on a.s_id=c.s_id where c.s_score>=70\n```\n\n37. 查询不及格的课程\n\n```mysql\nselect a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id\nwhere a.s_score<60 \n```\n\n38. 查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； \n\n```mysql\nselect a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id\nwhere a.c_id = '01'and a.s_score>80\n```\n\n39. 求每门课程的学生人数 \n\n```mysql\nselect count(*) from score GROUP BY c_id;\n```\n\n40. 查询选修\"张三\"老师所授课程的学生中，成绩最高的学生信息及其成绩\n\n```mysql\n-- 查询老师id\t\nselect c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三'\n-- 查询最高分（可能有相同分数）\nselect MAX(s_score) from score where c_id='02'\n-- 查询信息\nselect a.*,b.s_score,b.c_id,c.c_name from student a\nLEFT JOIN score b on a.s_id = b.s_id\nLEFT JOIN course c on b.c_id=c.c_id\nwhere b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='张三')\nand b.s_score in (select MAX(s_score) from score where c_id='02')\n```\n\n41. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 \n\n```mysql\nselect DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score\n```\n\n42. 查询每门功成绩最好的前两名 \n\n```mysql\nselect a.s_id,a.c_id,a.s_score from score a\nwhere (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id\n```\n\n43. 统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  \n\n```mysql\nselect c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC\n```\n\n44. 检索至少选修两门课程的学生学号 \n\n```mysql\nselect s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2\n```\n\n45. 查询选修了全部课程的学生信息 \n\n```mysql\nselect * from student where s_id in(\t\t\nselect s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))\n```\n\n46. 查询各学生的年龄\n\n```mysql\n# 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\nselect s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') - \n(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age\nfrom student;\n```\n\n47. 查询本周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)\nselect * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n\t\nselect WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))\n```\n\n48. 查询下周过生日的学生\n\n```mysql\nselect * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)\n```\n\n49. 查询本月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)\n```\n\n50. 查询下月过生日的学生\n\n```mysql\nselect * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)\n```\n\n","createTime":"2020-04-19 15:51:17","enable":true,"id":"1251780392676016129","likeCount":0,"recommend":true,"summary":"MySQL练习题","tagList":[{"id":3,"name":"mysql"}],"title":"mysql练习题","top":false,"updateTime":"2020-04-19 21:31:59","views":59},{"author":"xing","category":{"categoryName":"微服务","id":2},"commentCount":1,"content":" ```java\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n\n@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.removeIf(c -> c instanceof MappingJackson2HttpMessageConverter);\n        converters.add(new MappingJackson2HttpMessageConverter(jacksonObjectMapperCustomization()));\n    }\n\n    private static final String DATE_FORMAT = \"yyyy-MM-dd\";\n    private static final String DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n    @Bean\n    public ObjectMapper jacksonObjectMapperCustomization() {\n\n        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder()\n                .simpleDateFormat(DATE_TIME_FORMAT)\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_FORMAT)))\n                .serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));\n\n\n        return builder.build();\n    }\n```\n","createTime":"2020-04-19 15:36:25","enable":true,"id":"1251776651612700674","likeCount":0,"recommend":false,"summary":"jackson","tagList":[{"id":2,"name":"java"}],"title":"springboot jackson","top":false,"updateTime":"2020-04-20 15:22:20","views":65},{"author":"_江南一点雨","category":{"categoryName":"测试","id":1},"commentCount":0,"content":"```\n代码块\n```\nasdasd","createTime":"2020-04-19 13:59:01","enable":false,"id":"1251752142763507713","likeCount":123,"recommend":false,"summary":"有小伙伴问松哥这个问题，他在上海某公司，在离职了几个月后，前公司的领导联系到他，希望他能够返聘回去，他很纠结要不要回去？","tagList":[{"id":2,"name":"java"}],"title":"离职半年了，老东家又发 offer，回不回？","top":false,"updateTime":"2020-04-19 21:29:41","views":18},{"author":"213123","category":{"categoryName":"微服务","id":2},"commentCount":2,"content":"<p>tup</p>","cover":"http://cdn.codexing.cn/4141087202ef47a9a75cf89fe417c117.png","createTime":"2020-04-19 13:52:57","enable":true,"id":"1251750614375907330","likeCount":0,"recommend":false,"summary":"123123123","tagList":[{"id":1,"name":"spring"}],"title":"123123123","top":false,"updateTime":"2020-04-19 20:15:29","views":29},{"author":"现在才VS真的非常","category":{"categoryName":"微服务","id":2},"commentCount":0,"content":"<p>阿三打撒</p>","createTime":"2020-04-19 12:11:56","enable":true,"id":"1251725190564519937","likeCount":0,"recommend":false,"summary":"f 阿三打撒","tagList":[{"id":2,"name":"java"}],"title":"阿道夫啊实打实的","top":false,"updateTime":"2020-04-20 12:03:53","views":6},{"author":"1","category":{"categoryName":"数据库","id":3},"commentCount":0,"content":"1","cover":"http://cdn.codexing.cn/03a13adb79244931998748430a874b77.jpg","createTime":"2020-03-23 15:55:15","enable":true,"id":"1","likeCount":34,"recommend":false,"summary":"1","tagList":[{"id":1,"name":"spring"},{"id":2,"name":"java"}],"title":"mybatis plus 乐观锁测试时间","top":false,"updateTime":"2020-04-20 15:24:06","views":139},{"author":"1","category":{"categoryName":"测试","id":1},"commentCount":5,"content":"3123123123","createTime":"2019-06-17 23:48:04","enable":true,"id":"3","likeCount":0,"recommend":false,"summary":"123124312414","tagList":[{"id":2,"name":"java"}],"title":"岁的法国士大夫","top":false,"updateTime":"2020-04-17 23:48:04","views":40}],"pageSize":10,"params":{},"totalCount":8,"totalPage":1},"msg":"操作成功"}
2020-05-15 10:49:15.213 INFO  [main]org.springframework.core.KotlinDetector.<clinit>:57 -Kotlin reflection implementation not found at runtime, related features won't be available.
2020-05-15 10:49:15.897 INFO  [main]cn.codexing.blog.BlogApplication.logStarting:55 -Starting BlogApplication on GUOXING with PID 11428 (E:\2020\myblog2.0\blog-backend\target\classes started by GuoXing in E:\2020\myblog2.0\blog-backend)
2020-05-15 10:49:15.913 INFO  [main]cn.codexing.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-05-15 10:49:17.367 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.multipleStoresDetected:249 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-15 10:49:17.370 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-05-15 10:49:17.413 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 30ms. Found 0 Redis repository interfaces.
2020-05-15 10:49:17.759 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:49:17.816 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:49:17.823 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@181d8899' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:49:17.827 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:49:17.842 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:49:17.854 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'redisConfig' of type [cn.codexing.blog.common.config.RedisConfig$$EnhancerBySpringCGLIB$$af8a11f5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-15 10:49:18.429 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8088 (http)
2020-05-15 10:49:18.437 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8088"]
2020-05-15 10:49:18.438 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-05-15 10:49:18.438 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.31]
2020-05-15 10:49:18.530 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-05-15 10:49:18.531 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 2572 ms
2020-05-15 10:49:21.908 INFO  [main]s.d.s.web.PropertySourcedRequestMappingHandlerMapping.initHandlerMethods:69 -Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]
2020-05-15 10:49:22.091 INFO  [main]o.s.security.web.DefaultSecurityFilterChain.<init>:43 -Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@34beadce, org.springframework.security.web.context.SecurityContextPersistenceFilter@64ec1459, org.springframework.security.web.header.HeaderWriterFilter@72324965, org.springframework.security.web.authentication.logout.LogoutFilter@40bf0e15, cn.codexing.blog.common.filter.JwtAuthenticationFilter@3db65c0d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@10bdfbcc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4b3ad7ca, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@46c662f2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@382d549a, org.springframework.security.web.session.SessionManagementFilter@194911c1, org.springframework.security.web.access.ExceptionTranslationFilter@745926c3, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7f012923]
2020-05-15 10:49:23.073 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:160 -Context refreshed
2020-05-15 10:49:23.097 INFO  [main]s.d.spring.web.plugins.DocumentationPluginsBootstrapper.start:163 -Found 1 custom documentation plugin(s)
2020-05-15 10:49:23.131 INFO  [main]s.d.spring.web.scanners.ApiListingReferenceScanner.scan:41 -Scanning for api listing references
2020-05-15 10:49:23.326 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_1
2020-05-15 10:49:23.362 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_1
2020-05-15 10:49:23.371 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_2
2020-05-15 10:49:23.378 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_2
2020-05-15 10:49:23.390 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_3
2020-05-15 10:49:23.402 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByIdUsingGET_4
2020-05-15 10:49:23.410 INFO  [main]s.d.s.w.readers.operation.CachingOperationNameGenerator.startingWith:40 -Generating unique operation named: getByPageUsingPOST_3
2020-05-15 10:49:23.553 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8088"]
2020-05-15 10:49:23.580 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8088 (http) with context path ''
2020-05-15 10:49:23.585 INFO  [main]cn.codexing.blog.BlogApplication.logStarted:61 -Started BlogApplication in 8.271 seconds (JVM running for 9.69)
2020-05-15 10:49:34.114 INFO  [http-nio-8088-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-15 10:49:34.115 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-05-15 10:49:34.130 INFO  [http-nio-8088-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 14 ms
2020-05-15 10:49:34.169 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:121 -请求地址：/user/login/qq
2020-05-15 10:49:34.170 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:122 -请求方式：GET
2020-05-15 10:49:34.172 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:125 -请求IP：0:0:0:0:0:0:0:1
2020-05-15 10:49:34.174 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:127 -方法：cn.codexing.blog.controller.UserController.loginWithQq
2020-05-15 10:49:34.175 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.printRequestLog:130 -浏览器：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36
2020-05-15 10:49:34.179 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAround:76 -耗时：10
2020-05-15 10:49:34.194 INFO  [http-nio-8088-exec-1]cn.codexing.blog.common.aspect.RequestLogAspect.doAfterReturning:90 -返回值：{"code":20000,"msg":"https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=101873713&redirect_uri=http://localhost:8088/oauth2/qq/callback&state=qq.state"}
2020-05-15 10:49:34.583 INFO  [http-nio-8088-exec-1]com.alibaba.druid.pool.DruidDataSource.init:1003 -{dataSource-1} inited
